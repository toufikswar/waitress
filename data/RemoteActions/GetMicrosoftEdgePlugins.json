{"id": "Get_Microsoft_Edge_Plugins_windows", "name": "Get Microsoft Edge Plugins", "description": "Retrieves all the plugins currently configured for the Chromium-based Microsoft Edge, in alphabetical order, displaying version and status.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Number of Microsoft Edge plugins available", "id": "MicrosoftEdgePluginsCount", "name": "MicrosoftEdgePluginsCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft Edge plugins names, followed by version and status (Enabled/Disabled)", "id": "MicrosoftEdgePluginsNames", "name": "MicrosoftEdgePluginsNames", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MicrosoftEdgePlugins.ps1", "script": ""}}}