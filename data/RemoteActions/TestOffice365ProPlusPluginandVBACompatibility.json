{"id": "Test_Office_365_ProPlus_Plugin_and_VBA_Compatibility_windows", "name": "Test Office 365 ProPlus Plugin and VBA Compatibility", "description": "Executes a Microsoft official tool to determine whether Microsoft Office Addins, Macros or VBA scripts are compatible with Microsoft Office 365.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Tells whether the current user's Microsoft Office installation is ready to be upgraded to Microsoft Office 365", "id": "ReadinessStatus", "name": "ReadinessStatus", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "A list of Microsoft Office Addins that are not compatible with Microsoft Office 365. If ReadinessStatus is 'yes', this list will be empty", "id": "AddinsNotReady", "name": "AddinsNotReady", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "A list of Microsoft Office documents containing Macros or VBA scripts which are not compatible with Microsoft Office 365. If ReadinessStatus is 'yes', this list will be empty", "id": "DocumentsNotReady", "name": "DocumentsNotReady", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-Office365ProPlusPluginAndVBACompatibility.ps1", "script": ""}}}