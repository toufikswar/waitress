{"id": "Set_Collector_Configuration_windows", "name": "Set Collector Configuration", "description": "ADVANCED SCRIPT - This Remote action should be used by a certified Nexthink expert.\nCollector configuration is changed using Nxtcfg tool, except for 'AppStartTime'.\n'AppStartTime' configuration parameter change involves Registry Key changes and additional verifications done by the Remote Action.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Optional number to identify the installation (0-2147483647)", "id": "Tag", "name": "Tag", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Logging mode (0 - Silent, 1 - Verbose, 2 - Debug). It might impact performance. Use only for debugging", "id": "LogMode", "name": "LogMode", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "List of domains for which to report the URL of web requests (comma-separated)", "id": "WMDomains", "name": "WMDomains", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (1) or disables (0) IOPS monitoring functionality", "id": "IOPS", "name": "IOPS", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Period, in hours, in which the Collector checks for new installed packages and updates. Integer in range (0-24) (0-Never)", "id": "PKGInterval", "name": "PKGInterval", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables ('enable') or disables ('disable') print monitoring", "id": "Printing", "name": "Printing", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (0) or disables (1) App Start Time feature. If enabled, a list of executables must be provided as AppStartTimeWhitelist input parameter", "id": "AppStartTime", "name": "AppStartTime", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of executables that should be monitored by Collector. Example\":\" 'my-executable.exe, exec*.exe, prefix*name*suffix'. Use \"*\" if you want to monitor all the executables", "id": "AppStartTimeWhitelist", "name": "AppStartTimeWhitelist", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (1) or disables (0) the Windows Focus Time Monitoring", "id": "WindowFocusTimeMonitoring", "name": "WindowFocusTimeMonitoring", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (0) or disables (1) the User Interaction Time Monitoring", "id": "UserInteractionTimeMonitoring", "name": "UserInteractionTimeMonitoring", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (1) or disables (0) the Anonymize User Name", "id": "AnonymizeUserName", "name": "AnonymizeUserName", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enables (1) or disables (0) the Anonymize Wifi Networks", "id": "AnonymizeWifiNetwork", "name": "AnonymizeWifiNetwork", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "List of Collector parameter=value set", "id": "CollectorParametersSet", "name": "CollectorParametersSet", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Set-CollectorConfiguration.ps1", "script": ""}}}