{"id": "Get_Configuration_Drift_windows", "name": "Get Configuration Drift", "description": "Compares a defined configuration in the input XML file with the device current configuration and displays whether it is compliant with it or not.\nLists the non compliant items and the file size, checksum and last write time information of all found files.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UNC Path where the XML Configuration file is located. Example\":\" \\\\\\\\server\\\\SharedFolder\\\\configuration.xml\"", "id": "ConfigurationFilePath", "name": "ConfigurationFilePath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Whether all categories are compliant or not (Yes/No)", "id": "OverallCompliance", "name": "OverallCompliance", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether all the Windows Registry items in the provided XML configuration file are compliant or not (Yes/No)", "id": "RegistryCompliance", "name": "RegistryCompliance", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether all the Windows Services items in the provided XML configuration file are compliant or not (Yes/No)", "id": "ServicesCompliance", "name": "ServicesCompliance", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether all the Files and Directories items in the provided XML configuration file are compliant or not (Yes/No)", "id": "FilesDirectoriesCompliance", "name": "FilesDirectoriesCompliance", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Registry paths which were not found", "id": "RegistryPathNotFoundItems", "name": "RegistryPathNotFoundItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Registry properties paths whose properties did not match criteria supplied", "id": "RegistryPropertyNotFoundItems", "name": "RegistryPropertyNotFoundItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Registry properties paths whose type did not match criteria supplied", "id": "RegistryPropertyTypeNonCompliantItems", "name": "RegistryPropertyTypeNonCompliantItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Registry properties paths whose value did not match criteria supplied", "id": "RegistryValueNonCompliantItems", "name": "RegistryValueNonCompliantItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Services names which were not found", "id": "ServiceNotFoundItems", "name": "ServiceNotFoundItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Services names whose startup type did not match criteria supplied", "id": "ServiceStartUpTypeNonCompliantItems", "name": "ServiceStartUpTypeNonCompliantItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Windows Services names whose current state did not match criteria supplied", "id": "ServiceCurrentStatusNonCompliantItems", "name": "ServiceCurrentStatusNonCompliantItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Files and Directories paths which were not found", "id": "FileDirectoryNotFoundItems", "name": "FileDirectoryNotFoundItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Files whose SHA256 checksum did not match criteria supplied", "id": "FileChecksumNonCompliantItems", "name": "FileChecksumNonCompliantItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of the File's size of each found file in KB", "id": "FileSizeItems", "name": "FileSizeItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of the File's SHA256 checksum of each found file", "id": "FileChecksumItems", "name": "FileChecksumItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of the File's last modification date of each found file", "id": "FileLastModifiedItems", "name": "FileLastModifiedItems", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-ConfigurationDrift.ps1", "script": ""}}}