{"id": "Get_Windows_Registry_Key_Values_windows", "name": "Get Windows Registry Key Values", "description": "Returns the value data of up to three Windows Registry properties.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "Registry key path in the format specified in this remote action documentation", "id": "RegistryKey1", "name": "RegistryKey1", "options": ["Registry::\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the registry value whose data will be retrieved", "id": "ValueName1", "name": "ValueName1", "options": ["ProductId"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Registry key path in the format specified in this remote action documentation", "id": "RegistryKey2", "name": "RegistryKey2", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the registry value whose data will be retrieved", "id": "ValueName2", "name": "ValueName2", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Registry key path in the format specified in this remote action documentation", "id": "RegistryKey3", "name": "RegistryKey3", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the registry value whose data will be retrieved", "id": "ValueName3", "name": "ValueName3", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Data associated to the corresponding value name indicated in the parameters", "id": "ValueData1", "name": "ValueData1", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Data associated to the corresponding value name indicated in the parameters", "id": "ValueData2", "name": "ValueData2", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Data associated to the corresponding value name indicated in the parameters", "id": "ValueData3", "name": "ValueData3", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WindowsRegistryKeyValues.ps1", "script": ""}}}