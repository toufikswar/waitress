{"id": "Get_Windows_Information___DEPRECATED_windows", "name": "Get Windows Information - DEPRECATED", "description": "Returns the following information:\n    * Windows build name.\n    * Date on which Windows has been installed.\n    * Display language currently set in Windows.\n    * List of the user accounts defined on the local computer.\n    * PowerShell, Java, Python and .Net versions.\n    * Execution policies for PowerShell.\n    * Status of the BitLocker Drive Encryption.\n    * Reboot information.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Volume for which the Bitlocker information should be returned (e.g. C)", "id": "DiskDrive", "name": "DiskDrive", "options": ["C"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Windows build name", "id": "WindowsBuild", "name": "WindowsBuild", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date on which Windows has been installed", "id": "WindowsInstallDate", "name": "WindowsInstallDate", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Display language currently set in Windows", "id": "WindowsDisplayLanguage", "name": "WindowsDisplayLanguage", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of the user accounts defined on the local computer", "id": "WindowsLocalAccounts", "name": "WindowsLocalAccounts", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "PowerShell version (Major.Minor)", "id": "PSVersion", "name": "PSVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Execution policy affecting the remote actions executed by the current Windows PowerShell session. It is set within a PowerShell session via a variable", "id": "PSPolicyProcess", "name": "PSPolicyProcess", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Execution policy set through the machine GPO", "id": "PSMachinePolicy", "name": "PSMachinePolicy", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Execution policy set through the user GPO", "id": "PSUserPolicy", "name": "PSUserPolicy", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Execution policy affecting only the current user. It is set for the current user on a machine through a registry key", "id": "PSPolicyCurrentUser", "name": "PSPolicyCurrentUser", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Execution policy affecting all users of the computer. It is set for the local machine through a registry key", "id": "PSPolicyLocalMachine", "name": "PSPolicyLocalMachine", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether the volume and its encryption key (if any) are secured", "id": "BitLockerProtectionStatus", "name": "BitLockerProtectionStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The status of the encryption or decryption on the volume", "id": "BitLockerConversionStatus", "name": "BitLockerConversionStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The percentage of volume that is currently encrypted", "id": "BitLockerPercentageEncrypted", "name": "BitLockerPercentageEncrypted", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "The encryption algorithm and key size used on the volume", "id": "BitLockerEncryptionMethod", "name": "BitLockerEncryptionMethod", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Lists of protectors used to secure the volume's encryption key", "id": "BitLockerKeyProtectors", "name": "BitLockerKeyProtectors", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date and time of last reboot. It also considers reboots performed while the device was offline (no connection between the Nexthink Collector and the Engine)", "id": "LastReboot", "name": "LastReboot", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days since the last time the machine was rebooted. It also considers reboots performed while the device was offline (no connection between the Nexthink Collector and the Engine)", "id": "NumberOfDaysSinceLastReboot", "name": "NumberOfDaysSinceLastReboot", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of machine startup mode: 'UEFI' or 'BIOS'", "id": "StartupMode", "name": "StartupMode", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of Secure Boot feature: 'Yes', 'No', 'Not available'", "id": "SecureBootEnabled", "name": "SecureBootEnabled", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Latest version of .Net", "id": "DotNetVersion", "name": "DotNetVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Default version of Python", "id": "PythonVersion", "name": "PythonVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Default version of Java", "id": "JavaVersion", "name": "JavaVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WindowsInfo-OLD.ps1", "script": ""}}}