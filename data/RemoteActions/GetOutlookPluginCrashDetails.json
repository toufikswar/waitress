{"id": "Get_Outlook_Plugin_Crash_Details_windows", "name": "Get Outlook Plugin Crash Details", "description": "Retrieves details of Microsoft Outlook plugin crashes, with the focus on the most recent. Scope is limited by the company policy to control Event Log, which serves as a source of information.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Number of days since crash event was created to include in scope. Provide 0 to search entire log", "id": "CrashEventAgeInDays", "name": "CrashEventAgeInDays", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Date of last logged crash of a Microsoft Outlook plugin", "id": "LastCrashedPluginDate", "name": "LastCrashedPluginDate", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of last logged crash of a Microsoft Outlook plugin", "id": "LastCrashedPluginName", "name": "LastCrashedPluginName", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of a Microsoft Outlook plugin that crashed most frequently", "id": "MaximumCrashCountPluginName", "name": "MaximumCrashCountPluginName", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "A list of all logged Microsoft Outlook plugin crashes with its total count, sorted by most recent date", "id": "CrashedPluginList", "name": "CrashedPluginList", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-OutlookPluginCrashDetails.ps1", "script": ""}}}