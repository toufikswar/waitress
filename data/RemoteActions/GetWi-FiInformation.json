{"id": "Get_Wi_Fi_Information_windows", "name": "Get Wi-Fi Information", "description": "Get information about Wi-Fi connection on the device using Microsoft Windows built-in netsh.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Wi-Fi network name", "id": "SSID", "name": "SSID", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Basic Service Set Identifier is the MAC address of the wireless access point", "id": "BSSID", "name": "BSSID", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The network band your device can support", "id": "Radio", "name": "Radio", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Channel number used in the connection", "id": "Channel", "name": "Channel", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Strength of the signal the device is receiving", "id": "Signal", "name": "Signal", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WiFiInformation.ps1", "script": ""}}}