{"id": "Get_Microsoft_Intune_Device_Status_windows", "name": "Get Microsoft Intune Device Status", "description": "Verifies whether the device was onboarded correctly by checking the Microsoft 'Intune MDM' certificate and 'Intune Management Extension' service.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "If the certificate 'Microsoft Intune MDM Device CA' used to enroll a device in Microsoft Intune is present on the device or not", "id": "OnboardingCertificateInstalled", "name": "OnboardingCertificateInstalled", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the service 'Intune Management Extension Status' is present on the device or not", "id": "MDMServiceInstalled", "name": "MDMServiceInstalled", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the service 'Intune Management Extension Status' is present and running on the device or not. In case of the service is not present, then the field is left with its default value '-'", "id": "MDMServiceRunning", "name": "MDMServiceRunning", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-IntuneDeviceStatus.ps1", "script": ""}}}