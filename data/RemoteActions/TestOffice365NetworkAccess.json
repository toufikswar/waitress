{"id": "Test_Office_365_Network_Access_windows", "name": "Test Office 365 Network Access", "description": "Tests TCP connection to Microsoft Office 365 services specified in input parameters. For domain ranges only parent domains are considered, for IP ranges a set of random IPs are considered.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 1320, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Mandatory parameter of an Office 365 Organization name owned by a customer", "id": "TenantName", "name": "TenantName", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Mandatory parameter of an Office 365 service instance. Accepted value is one of the following ('Worldwide', 'China', 'Germany', 'USGovDoD', 'USGovGCCHigh'). By default 'Worldwide' option is used", "id": "Instance", "name": "Instance", "options": ["Worldwide"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Mandatory parameter to test access to specific applications. Accepted values separated by comma are ('Common', 'Exchange', 'SharePoint', 'Skype'). 'Common' service area items are a prerequisite for all other service areas, therefore tests will always include them", "id": "ServiceArea", "name": "ServiceArea", "options": ["Common"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Timeout value for each test connection attempt. Provide number of seconds between (1-10)", "id": "ConnectionTimeout", "name": "ConnectionTimeout", "options": ["2"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Confirmation if network access to all specified Microsoft services is allowed", "id": "RequiredConnectivityAvailable", "name": "RequiredConnectivityAvailable", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of services reported as failing to connect", "id": "FailingServices", "name": "FailingServices", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of domains reported as failing to connect", "id": "FailingDomains", "name": "FailingDomains", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of IP addresses or IP ranges reported as failing to connect", "id": "FailingIPRanges", "name": "FailingIPRanges", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-Office365NetworkAccess.ps1", "script": ""}}}