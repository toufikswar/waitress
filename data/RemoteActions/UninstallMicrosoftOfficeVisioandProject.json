{"id": "Uninstall_Microsoft_Office_Visio_and_Project_windows", "name": "Uninstall Microsoft Office Visio and Project", "description": "In case Microsoft Office Visio and/or Project are installed on the device, this Remote Action will uninstall them.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "The name of the Microsoft Office software which must be uninstalled. Allowed values are 'Visio', 'Project', 'Both'", "id": "ProductToUninstall", "name": "ProductToUninstall", "allowCustomValue": false, "options": ["Both", "Visio", "Project"], "usedByWindows": true, "usedByMacOs": false}, {"description": "GUID of the campaign to prompt the user to uninstall MS Office Visio and/or Project", "id": "UninstallationPromptCampaignId", "name": "UninstallationPromptCampaignId", "options": ["f21f1429-0616-4c66-995c-ee3e247d60b4"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "GUID of the campaign to notify the user that uninstallation tasks finished", "id": "UninstallationConfirmationCampaignId", "name": "UninstallationConfirmationCampaignId", "options": ["c7600139-9eb8-4625-842d-a6b36179b363"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Uninstall-MicrosoftOfficeVisioAndProject.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KVW5pbnN0YWxscyBNaWNyb3NvZnQgT2ZmaWNlIFZpc2lvIGFuZC9vciBQcm9qZWN0IGZyb20gdGFyZ2V0IGRldmljZXMuDQoNCi5ERVNDUklQVElPTg0KSW4gY2FzZSBNaWNyb3NvZnQgT2ZmaWNlIFZpc2lvIGFuZC9vciBQcm9qZWN0IGFyZSBpbnN0YWxsZWQgb24gdGhlIGRldmljZSwgdGhpcyBSZW1vdGUgQWN0aW9uIHdpbGwgdW5pbnN0YWxsIHRoZW0uDQoNCi5GVU5DVElPTkFMSVRZDQpSZW1lZGlhdGlvbg0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIFByb2R1Y3RUb1VuaW5zdGFsbCAgICAgICAgICAgICAgVGhlIG5hbWUgb2YgdGhlIE1pY3Jvc29mdCBPZmZpY2Ugc29mdHdhcmUgd2hpY2ggbXVzdCBiZSB1bmluc3RhbGxlZC4gQWxsb3dlZCB2YWx1ZXMgYXJlICdWaXNpbycsICdQcm9qZWN0JywgJ0JvdGgnDQoyICAgVW5pbnN0YWxsYXRpb25Qcm9tcHRDYW1wYWlnbklkICBHVUlEIG9mIHRoZSBjYW1wYWlnbiB0byBwcm9tcHQgdGhlIHVzZXIgdG8gdW5pbnN0YWxsIE1TIE9mZmljZSBWaXNpbyBhbmQvb3IgUHJvamVjdA0KMyAgIFVuaW5zdGFsbGF0aW9uQ29uZmlybWF0aW9uQ2FtcGFpZ25JZEdVSUQgb2YgdGhlIGNhbXBhaWduIHRvIG5vdGlmeSB0aGUgdXNlciB0aGF0IHVuaW5zdGFsbGF0aW9uIHRhc2tzIGZpbmlzaGVkDQoNCi5GVVJUSEVSIElORk9STUFUSU9ODQpUd28gY2FtcGFpZ25zIGFyZSBkZWxpdmVyZWQgYWxvbmcgd2l0aCB0aGlzIFJlbW90ZSBBY3Rpb24iOiINCiAgICAtIFVuaW5zdGFsbGF0aW9uIHByb21wdCI6IiBUbyBhc2sgdGhlIHVzZXIgZm9yIGNvbmZpcm1hdGlvbiBhYm91dCB1bmluc3RhbGxpbmcgdGhlIHVudXNlZCBzb2Z0d2FyZSwgYW5kIHRvIGluZm9ybSBhYm91dCBvdGhlciBPZmZpY2UgYXBwbGljYXRpb25zIHdpbGwgYmUgY2xvc2VkIHVwb24gY29uZmlybWF0aW9uDQogICAgLSBDb25maXJtYXRpb24iOiIgV2hlbiB1bmluc3RhbGxhdGlvbiB0YXNrcyBmaW5pc2hlZCwgc28gdXNlciBtYXkgdXNlIE9mZmljZSBhcHBsaWNhdGlvbnMgYWdhaW4NCg0KQXBhcnQgZnJvbSB0aGUgY2FtcGFpZ25zLCBhbiBpbnZlc3RpZ2F0aW9uIGlzIHByb3ZpZGVkIHRvIHRhcmdldCBkZXZpY2VzIHdpdGggdGhpcyBSZW1vdGUgQWN0aW9uLg0KVGhpcyBpbnZlc3RpZ2F0aW9uIHJldHJpZXZlcyB0aGUgZGV2aWNlcyB3aGljaCBoYXZlIG5vdCBleGVjdXRlZCBWaXNpbyBub3IgUHJvamVjdCBkdXJpbmcgdGhlIGZ1bGwgYXZhaWxhYmxlIHBlcmlvZCBvZiB0aW1lIChpbiB0aGUgRW5naW5lIGRhdGFiYXNlKS4NCg0KLlJFU1RSSUNUSU9OUw0KLSBUaGlzIFJlbW90ZSBBY3Rpb24gaXMgY29tcGF0aWJsZSB3aXRoIE9mZmljZSAzNjUgb25seS4NCg0KLk5PVEVTDQpDb250ZXh0OiAgICAgICAgICAgIExvY2FsU3lzdGVtDQpWZXJzaW9uOiAgICAgICAgICAgIDEuMS4xLjAgLSBJbXByb3ZlZCBkb2N1bWVudGF0aW9uIGJ5IGFkZGluZyBjb21wYXRpYmlsaXR5DQogICAgICAgICAgICAgICAgICAgIDEuMS4wLjEgLSBNaW5vciBmaXggaW4gZG9jdW1lbnRhdGlvbiByZWdhcmRpbmcgaW5wdXRzDQogICAgICAgICAgICAgICAgICAgIDEuMS4wLjAgLSBJbnRyb2R1Y2VkIGZ1bmN0aW9uYWxpdHkgdG8gYWxsb3cgdGhlIHVzZXIgdG8gY2hvb3NlIHdoaWNoIE1pY3Jvc29mdCBPZmZpY2Ugc29mdHdhcmUgdG8gdW5pbnN0YWxsDQogICAgICAgICAgICAgICAgICAgIDEuMC4wLjAgLSBJbml0aWFsIHJlbGVhc2UNCkxhc3QgR2VuZXJhdGVkOiAgICAgMjggRGVjIDIwMjEgLSAxMDozODozMA0KQ29weXJpZ2h0IChDKSAyMDIxIE5leHRoaW5rIFNBLCBTd2l0emVybGFuZA0KIz4NCg0KIw0KIyBJbnB1dCBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCiMNCnBhcmFtKA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFByb2R1Y3RUb1VuaW5zdGFsbCwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRVbmluc3RhbGxhdGlvblByb21wdENhbXBhaWduSWQsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kVW5pbnN0YWxsYXRpb25Db25maXJtYXRpb25DYW1wYWlnbklkDQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdDQU1QQUlHTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dGNhbXBhaWduYWN0aW9uLmRsbCIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdDQU1QQUlHTl9USU1FT1VUJyBgDQogICAgLVZhbHVlIDYwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnRVJST1JfRVhDRVBUSU9OX1RZUEUnIGANCiAgICAtVmFsdWUgQHtFbnZpcm9ubWVudCA9ICdbRW52aXJvbm1lbnQgZXJyb3JdJw0KICAgICAgICAgICAgIElucHV0ID0gJ1tJbnB1dCBlcnJvcl0nDQogICAgICAgICAgICAgSW50ZXJuYWwgPSAnW0ludGVybmFsIGVycm9yXSd9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnSEtMTV9PRkZJQ0VfUkVHJyBgDQogICAgLVZhbHVlIEAoJ0hLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxPZmZpY2UnLA0KICAgICAgICAgICAgICdIS0xNOlxTT0ZUV0FSRVxXT1c2NDMyTm9kZVxNaWNyb3NvZnRcT2ZmaWNlJykgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTlVNX1JFVFJJRVMnIGANCiAgICAtVmFsdWUgMjUgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdSRU1PVEVfQUNUSU9OX0RMTF9QQVRIJyBgDQogICAgLVZhbHVlICIkZW52Ok5FWFRISU5LXFJlbW90ZUFjdGlvbnNcbnh0cmVtb3RlYWN0aW9ucy5kbGwiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVUUllfV0FJVF9NUycgYA0KICAgIC1WYWx1ZSAyMDAgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0FMTE9XRURfU09GVFdBUkVfTkFNRVMnIGANCiAgICAtVmFsdWUgQCgnVmlzaW8nLCAnUHJvamVjdCcsICdCb3RoJykgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnU1VQUE9SVEVEX09GRklDRV9WRVJTSU9OUycgYA0KICAgIC1WYWx1ZSAgQCgnMTYuMCcpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0hLTE1fT0ZGSUNFX1JFRycgYA0KICAgIC1WYWx1ZSBAKCdIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcT2ZmaWNlJywgYA0KICAgICAgICAgICAgICdIS0xNOlxTT0ZUV0FSRVxXT1c2NDMyTm9kZVxNaWNyb3NvZnRcT2ZmaWNlJykgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdPRkZJQ0VfUFJPRFVDVF9QUk9DRVNTX05BTUVTJyBgDQogICAgLVZhbHVlIEB7V29yZCA9ICdXSU5XT1JEJw0KICAgICAgICAgICAgIEV4Y2VsID0gJ0VYQ0VMJw0KICAgICAgICAgICAgIFBvd2VyUG9pbnQgPSAnUE9XRVJQTlQnDQogICAgICAgICAgICAgQWNjZXNzID0gJ01TQUNDRVNTJw0KICAgICAgICAgICAgIFB1Ymxpc2hlciA9ICdNU1BVQicNCiAgICAgICAgICAgICBPbmVOb3RlID0gJ09ORU5PVEUnDQogICAgICAgICAgICAgT3V0bG9vayA9ICdPVVRMT09LJw0KICAgICAgICAgICAgIFByb2plY3QgPSAnV0lOUFJPSicNCiAgICAgICAgICAgICBWaXNpbyA9ICdWSVNJTycNCiAgICAgICAgICAgICBTa3lwZUZvckJ1c2luZXNzID0gJ2x5bmMnfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ1VOSU5TVEFMTF9SRUdLRVknIGANCiAgICAtVmFsdWUgJ3JlZ2lzdHJ5OjpIS0VZX0xPQ0FMX01BQ0hJTkVcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cVW5pbnN0YWxsXCcgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTVNfVklTSU9fSU5GT1JNQVRJT04nIGANCiAgICAtVmFsdWUgQHtSZWdpc3RyeU5hbWUgPSAnVmlzaW9Qcm9SZXRhaWwqJw0KICAgICAgICAgICAgIFNvZnR3YXJlTmFtZSA9ICdNaWNyb3NvZnQgVmlzaW8nfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdNU19QUk9KRUNUX0lORk9STUFUSU9OJyBgDQogICAgLVZhbHVlIEB7UmVnaXN0cnlOYW1lID0gJ1Byb2plY3RQcm9SZXRhaWwqJw0KICAgICAgICAgICAgIFNvZnR3YXJlTmFtZSA9ICdNaWNyb3NvZnQgUHJvamVjdCd9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ09GRklDRV9QUk9EVUNUU19UT19SRU1PVkUnIGANCiAgICAtVmFsdWUgQHtWaXNpbyA9ICRNU19WSVNJT19JTkZPUk1BVElPTg0KICAgICAgICAgICAgIFByb2plY3QgPSAkTVNfUFJPSkVDVF9JTkZPUk1BVElPTg0KICAgICAgICAgICAgIEJvdGggPSBAKCRNU19WSVNJT19JTkZPUk1BVElPTiwgJE1TX1BST0pFQ1RfSU5GT1JNQVRJT04pfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdESVNQTEFZX1ZFUlNJT05fUkVHX1BST1BFUlRZJyBgDQogICAgLVZhbHVlICdEaXNwbGF5VmVyc2lvbicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVU5JTlNUQUxMX0NPTU1BTkRfUkVHX1BST1BFUlRJRVMnIGANCiAgICAtVmFsdWUgQCgnRGlzcGxheU5hbWUnLCAnVW5pbnN0YWxsU3RyaW5nJykgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdVTklOU1RBTExfQ09NTUFORF9SRUdFWCcgYA0KICAgIC1WYWx1ZSAnXiIoPzxFeGVjdXRhYmxlUGF0aD4uKi5leGUpIiAoPzxBcmd1bWVudHM+LiopJCcgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnU0lMRU5UX1VOSU5TVEFMTF9BUkdVTUVOVCcgYA0KICAgIC1WYWx1ZSAnZGlzcGxheWxldmVsPWZhbHNlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ1VOSU5TVEFMTEFUSU9OX0RFTklBTF9SRUFTT05TJyBgDQogICAgLVZhbHVlIEB7TmVlZFByb2R1Y3RzID0gJ1RoZSB1c2VyIG5lZWRzIHRoZXNlIE9mZmljZSBwcm9kdWN0cyBpbiB0aGUgc2hvcnQgdGVybScNCiAgICAgICAgICAgICBCdXN5Tm93ID0gJ1RoZSB1c2VyIGlzIGJ1c3kgbm93IGFuZCBkb2VzIG5vdCB3YW50IGhpcyBPZmZpY2UgYXBwbGljYXRpb25zIHRvIGJlIGNsb3NlZCcNCiAgICAgICAgICAgICBPdGhlciA9ICdUaGUgdXNlciBkaWQgbm90IHNwZWNpZnkgYW55IHBhcnRpY3VsYXIgcmVhc29uJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KIw0KIyBJbnZva2UgTWFpbg0KIw0KZnVuY3Rpb24gSW52b2tlLU1haW4gKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRleGl0Q29kZSA9IDANCg0KICAgIHRyeSB7DQogICAgICAgIEFkZC1OZXh0aGlua0RMTHMNCg0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtDQogICAgICAgIFRlc3QtUnVubmluZ09uV2luZG93czEwDQogICAgICAgIFRlc3QtT2ZmaWNlVmVyc2lvbg0KDQogICAgICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KDQogICAgICAgIEludm9rZS1Nc09mZmljZVByb2R1Y3RzVW5pbnN0YWxsIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCiMNCiMgVGVtcGxhdGUgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBBZGQtTmV4dGhpbmtETExzIHsNCg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgpKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgTmV4dGhpbmsgUmVtb3RlIEFjdGlvbiBETEwgbm90IGZvdW5kLiAiDQogICAgfQ0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJENBTVBBSUdOX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIE5leHRoaW5rIENhbXBhaWduIERMTCBub3QgZm91bmQuICINCiAgICB9DQogICAgQWRkLVR5cGUgLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgNCiAgICBBZGQtVHlwZSAtUGF0aCAkQ0FNUEFJR05fRExMX1BBVEgNCn0NCg0KZnVuY3Rpb24gVGVzdC1SdW5uaW5nQXNMb2NhbFN5c3RlbSB7DQoNCiAgICBpZiAoLW5vdCAoQ29uZmlybS1DdXJyZW50VXNlcklzTG9jYWxTeXN0ZW0pKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgbXVzdCBiZSBydW4gYXMgTG9jYWxTeXN0ZW0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtIHsNCg0KICAgICRjdXJyZW50SWRlbnRpdHkgPSBHZXQtQ3VycmVudElkZW50aXR5DQogICAgcmV0dXJuICRjdXJyZW50SWRlbnRpdHkgLWVxICRMT0NBTF9TWVNURU1fSURFTlRJVFkNCn0NCg0KZnVuY3Rpb24gR2V0LUN1cnJlbnRJZGVudGl0eSB7DQoNCiAgICByZXR1cm4gW3NlY3VyaXR5LnByaW5jaXBhbC53aW5kb3dzaWRlbnRpdHldOjpHZXRDdXJyZW50KCkuVXNlci5Ub1N0cmluZygpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUnVubmluZ09uV2luZG93czEwIHsNCg0KICAgICRPU1ZlcnNpb24gPSAoR2V0LU9TVmVyc2lvbikgLWFzIFt2ZXJzaW9uXQ0KICAgIGlmICgtbm90ICgkT1NWZXJzaW9uKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoaXMgc2NyaXB0IGNvdWxkIG5vdCByZXR1cm4gT1MgdmVyc2lvbi4gIg0KICAgIH0NCiAgICBpZiAoJE9TVmVyc2lvbi5NYWpvciAtbmUgMTApIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyAxMCBvbmx5LiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCg0KICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgIC1GaWx0ZXIgJ1Byb2R1Y3RUeXBlID0gMScgLUVycm9yQWN0aW9uIFN0b3AgfCBgDQogICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBWZXJzaW9uDQp9DQoNCmZ1bmN0aW9uIFdyaXRlLVN0YXR1c01lc3NhZ2UgKFtwc29iamVjdF0kTWVzc2FnZSkgew0KICAgICRleGNlcHRpb25NZXNzYWdlID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJHZlcnNpb24gPSBHZXQtU2NyaXB0VmVyc2lvbg0KICAgICAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICRzY3JpcHRWZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlTGluZSA9ICRzY3JpcHRWZXJzaW9uICsgIkxpbmUgJyQoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlciknOiAiDQogICAgfQ0KDQogICAgJGhvc3QudWkuV3JpdGVFcnJvckxpbmUoJGVycm9yTWVzc2FnZUxpbmUgKyAkZXhjZXB0aW9uTWVzc2FnZSkNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KDQogICAgJHNjcmlwdENvbnRlbnQgPSBHZXQtQ29udGVudCAkTXlJbnZvY2F0aW9uLlNjcmlwdE5hbWUgfCBPdXQtU3RyaW5nDQogICAgaWYgKCRzY3JpcHRDb250ZW50IC1ub3RtYXRjaCAnPCNbXHJcbl17Mn0uU1lOT1BTSVNbXlwjXD5dKiguTk9URVNbXlwjXD5dKilcIz4nKSB7IHJldHVybiB9DQoNCiAgICAkaGVscEJsb2NrID0gJE1hdGNoZXNbMV0uU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkNCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRoZWxwQmxvY2spIHsNCiAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCAnVmVyc2lvbjonKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpbmUuU3BsaXQoJzonKVsxXS5TcGxpdCgnLScpWzBdLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUdVSURQYXJhbWV0ZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmICgtbm90ICgkUGFyYW1WYWx1ZSAtYXMgW2d1aWRdKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIEVycm9yIGluIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuIE9ubHkgVUlEIHZhbHVlcyBhcmUgYWNjZXB0ZWQuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3RyaW5nTnVsbE9yRW1wdHkgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgoRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkUGFyYW1WYWx1ZSkpKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnB1dCkgJyRQYXJhbU5hbWUnIGNhbm5vdCBiZSBlbXB0eSBub3IgbnVsbC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVN0cmluZ1NldCAoW3N0cmluZ10kUGFyYW1OYW1lLCAkUGFyYW1WYWx1ZSwgW3N0cmluZ1tdXSRWYWxpZFZhbHVlcykgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yIC1ub3QgKCRQYXJhbVZhbHVlIC1pcyBbc3RyaW5nXSkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBpcyBub3QgYSBzdHJpbmcuICINCiAgICB9DQoNCiAgICBmb3JlYWNoICgkdmFsdWUgaW4gJFZhbGlkVmFsdWVzKSB7DQogICAgICAgIGlmICgkUGFyYW1WYWx1ZSAtZXEgJHZhbHVlKSB7IHJldHVybiB9DQogICAgfQ0KDQogICAgJGV4cGVjdGVkVmFsdWVzID0gJFZhbGlkVmFsdWVzIC1qb2luICcsICcNCiAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIEVycm9yIGluIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuIEFjY2VwdGVkIHZhbHVlcyBhcmUgJGV4cGVjdGVkVmFsdWVzLiAiDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUmVnaXN0cnlLZXlQcm9wZXJ0eSAoW3N0cmluZ10kS2V5LCBbc3RyaW5nXSRQcm9wZXJ0eSkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkS2V5KSkgeyByZXR1cm4gJGZhbHNlIH0NCiAgICByZXR1cm4gJG51bGwgLW5lIChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRLZXkgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU5hbWUgJFByb3BlcnR5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnlLZXlQcm9wZXJ0eSAoW3N0cmluZ10kS2V5LCBbc3RyaW5nXSRQcm9wZXJ0eSkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkS2V5KSkgeyByZXR1cm4gfQ0KICAgIHJldHVybiAoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkS2V5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU5hbWUgJFByb3BlcnR5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIHwNCiAgICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAkUHJvcGVydHkNCn0NCg0KZnVuY3Rpb24gSW52b2tlLU9wZXJhdGlvbkNvbXBsZXRlZENhbXBhaWduIChbc3RyaW5nXSRDYW1wYWlnbklkKSB7DQogICAgW254dC5jYW1wYWlnbmFjdGlvbl06OlJ1blN0YW5kQWxvbmVDYW1wYWlnbigkQ2FtcGFpZ25JZCkNCn0NCg0KZnVuY3Rpb24gR2V0LUNhbXBhaWduUmVzcG9uc2UgKFtzdHJpbmddJENhbXBhaWduSWQpIHsNCiAgICByZXR1cm4gW254dC5jYW1wYWlnbmFjdGlvbl06OlJ1bkNhbXBhaWduKCRDYW1wYWlnbklkLCAkQ0FNUEFJR05fVElNRU9VVCkNCn0NCg0KZnVuY3Rpb24gR2V0LUNhbXBhaWduUmVzcG9uc2VTdGF0dXMgKCRSZXNwb25zZSkgew0KICAgIHJldHVybiBbbnh0LmNhbXBhaWduYWN0aW9uXTo6R2V0UmVzcG9uc2VTdGF0dXMoJFJlc3BvbnNlKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ2FtcGFpZ25SZXNwb25zZUFuc3dlciAoJFJlc3BvbnNlLCBbc3RyaW5nXSRRdWVzdGlvbk5hbWUpIHsNCiAgICByZXR1cm4gW254dC5jYW1wYWlnbmFjdGlvbl06OkdldFJlc3BvbnNlQW5zd2VyKCRSZXNwb25zZSwgJFF1ZXN0aW9uTmFtZSlbMF0NCn0NCg0KZnVuY3Rpb24gU3RvcC1HaXZlblByb2Nlc3MgKFtzdHJpbmddJFByb2Nlc3NOYW1lKSB7DQogICAgU3RvcC1Qcm9jZXNzIC1OYW1lICRQcm9jZXNzTmFtZSAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBmb3IgKCRpID0gMDsgJGkgLWx0ICROVU1fUkVUUklFUzsgJGkrKykgew0KICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzICRSRVRSWV9XQUlUX01TDQogICAgICAgIGlmICgtbm90IChUZXN0LUdpdmVuUHJvY2VzcyAtUHJvY2Vzc05hbWUgJFByb2Nlc3NOYW1lKSkgeyByZXR1cm4gJHRydWUgfQ0KICAgIH0NCiAgICByZXR1cm4gJGZhbHNlDQp9DQoNCmZ1bmN0aW9uIFRlc3QtR2l2ZW5Qcm9jZXNzIChbc3RyaW5nXSRQcm9jZXNzTmFtZSkgew0KICAgIHJldHVybiAkbnVsbCAtbmUgKEdldC1HaXZlblByb2Nlc3MgLVByb2Nlc3NOYW1lICRQcm9jZXNzTmFtZSkNCn0NCg0KZnVuY3Rpb24gR2V0LUdpdmVuUHJvY2VzcyAoW3N0cmluZ10kUHJvY2Vzc05hbWUpIHsNCiAgICByZXR1cm4gR2V0LVByb2Nlc3MgLU5hbWUgJFByb2Nlc3NOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQp9DQoNCmZ1bmN0aW9uIFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IChbcHNvYmplY3RbXV0kQ29sbGVjdGlvbikgew0KICAgIHJldHVybiAkbnVsbCAtZXEgJENvbGxlY3Rpb24gLW9yICgkQ29sbGVjdGlvbiB8IE1lYXN1cmUtT2JqZWN0KS5Db3VudCAtZXEgMA0KfQ0KDQpmdW5jdGlvbiBJbnZva2UtUHJvY2VzcyAoW3N0cmluZ10kRmlsZVBhdGgsIFtzdHJpbmddJEFyZ3VtZW50cykgew0KICAgICRvdXRwdXQgPSBAe0V4aXRDb2RlID0gLTENCiAgICAgICAgICAgICAgICBTdGRPdXQgPSAkbnVsbA0KICAgICAgICAgICAgICAgIFN0ZEVyciA9ICRudWxsfQ0KICAgICRwcm9jZXNzSW5mbyA9IE5ldy1vYmplY3QgLVR5cGVOYW1lIGRpYWdub3N0aWNzLnByb2Nlc3NzdGFydGluZm8NCiAgICAkcHJvY2Vzc0luZm8uQ3JlYXRlTm9XaW5kb3cgPSAkdHJ1ZQ0KICAgICRwcm9jZXNzSW5mby5Vc2VTaGVsbEV4ZWN1dGUgPSAkZmFsc2UNCiAgICAkcHJvY2Vzc0luZm8uUmVkaXJlY3RTdGFuZGFyZE91dHB1dCA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLlJlZGlyZWN0U3RhbmRhcmRFcnJvciA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLkZpbGVOYW1lID0gJEZpbGVQYXRoDQogICAgJHByb2Nlc3NJbmZvLkFyZ3VtZW50cyA9ICRBcmd1bWVudHMNCiAgICAkcHJvY2Vzc0luZm8uV29ya2luZ0RpcmVjdG9yeSA9IFNwbGl0LVBhdGggJEZpbGVQYXRoIC1QYXJlbnQNCiAgICAkcHJvY2VzcyA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIGRpYWdub3N0aWNzLnByb2Nlc3MNCiAgICAkcHJvY2Vzcy5TdGFydEluZm8gPSAkcHJvY2Vzc0luZm8NCg0KICAgIHRyeSB7DQogICAgICAgIFt2b2lkXSRwcm9jZXNzLlN0YXJ0KCkNCiAgICAgICAgJG91dHB1dC5TdGRPdXQgPSAkcHJvY2Vzcy5TdGFuZGFyZE91dHB1dC5SZWFkVG9FbmQoKQ0KICAgICAgICAkb3V0cHV0LlN0ZEVyciA9ICRwcm9jZXNzLlN0YW5kYXJkRXJyb3IuUmVhZFRvRW5kKCkNCiAgICAgICAgJHByb2Nlc3MuV2FpdEZvckV4aXQoKQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpICckRmlsZVBhdGgnIGV4ZWN1dGlvbiBmYWlsZWQuICINCiAgICB9IGZpbmFsbHkgew0KICAgICAgICAkb3V0cHV0LkV4aXRDb2RlID0gJHByb2Nlc3MuRXhpdENvZGUNCiAgICAgICAgJHByb2Nlc3MuRGlzcG9zZSgpDQogICAgfQ0KDQogICAgcmV0dXJuICRvdXRwdXQNCn0NCg0KZnVuY3Rpb24gQ29uZmlybS1TdHJpbmdJc05vdEVtcHR5IChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KChGb3JtYXQtU3RyaW5nVmFsdWUgLVZhbHVlICRWYWx1ZSkpDQp9DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVyIHZhbGlkYXRpb24NCiMNCmZ1bmN0aW9uIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBUZXN0LUdVSURQYXJhbWV0ZXIgYA0KICAgICAgICAtUGFyYW1OYW1lICdVbmluc3RhbGxhdGlvblByb21wdENhbXBhaWduSWQnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5Vbmluc3RhbGxhdGlvblByb21wdENhbXBhaWduSWQNCiAgICBUZXN0LUdVSURQYXJhbWV0ZXIgYA0KICAgICAgICAtUGFyYW1OYW1lICdVbmluc3RhbGxhdGlvbkNvbmZpcm1hdGlvbkNhbXBhaWduSWQnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5Vbmluc3RhbGxhdGlvbkNvbmZpcm1hdGlvbkNhbXBhaWduSWQNCiAgICBUZXN0LVN0cmluZ051bGxPckVtcHR5IGANCiAgICAgICAgLVBhcmFtTmFtZSAnUHJvZHVjdFRvVW5pbnN0YWxsJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuUHJvZHVjdFRvVW5pbnN0YWxsDQogICAgVGVzdC1TdHJpbmdTZXQgYA0KICAgICAgICAtUGFyYW1OYW1lICdQcm9kdWN0VG9Vbmluc3RhbGwnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5Qcm9kdWN0VG9Vbmluc3RhbGwgYA0KICAgICAgICAtVmFsaWRWYWx1ZXMgKCRBTExPV0VEX1NPRlRXQVJFX05BTUVTIC1hcyBbc3RyaW5nW11dKQ0KfQ0KDQojDQojIE9mZmljZSB2ZXJzaW9uIGNoZWNrDQojDQpmdW5jdGlvbiBUZXN0LU9mZmljZVZlcnNpb24gew0KICAgICRvZmZpY2VWZXJzaW9uID0gRmluZC1DbGlja1RvUnVuQ29uZmlndXJhdGlvbiAtUHJvcGVydHkgJ1ZlcnNpb25Ub1JlcG9ydCcNCg0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkb2ZmaWNlVmVyc2lvbikpIHsgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBNaWNyb3NvZnQgVmlzaW8gYW5kL29yIE1pY3Jvc29mdCBQcm9qZWN0IGFyZSBub3QgaW5zdGFsbGVkIG9uIHRoaXMgZGV2aWNlLiAiIH0NCg0KICAgIHRyeSB7IFt2ZXJzaW9uXSR2ZXJzaW9uID0gJG9mZmljZVZlcnNpb24gfQ0KICAgIGNhdGNoIHsgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBJbXBvc3NpYmxlIHRvIGNoZWNrIE1pY3Jvc29mdCBWaXNpby9NaWNyb3NvZnQgUHJvamVjdCB2ZXJzaW9uICckb2ZmaWNlVmVyc2lvbicuICIgfQ0KDQogICAgaWYgKCR2ZXJzaW9uLk1ham9yIC1uZSAxNikgew0KICAgICAgICAkc3VwcG9ydGVkVmVyc2lvbnNNZXNzYWdlID0gJFNVUFBPUlRFRF9PRkZJQ0VfVkVSU0lPTlMgLWpvaW4gJywgJw0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoaXMgc2NyaXB0IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgZm9sbG93aW5nIE1pY3Jvc29mdCBWaXNpby9NaWNyb3NvZnQgUHJvamVjdCB2ZXJzaW9uczogJHN1cHBvcnRlZFZlcnNpb25zTWVzc2FnZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRmluZC1DbGlja1RvUnVuQ29uZmlndXJhdGlvbiAoW3N0cmluZ10kUHJvcGVydHkpIHsNCiAgICBmb3JlYWNoICgkcmVnIGluICRIS0xNX09GRklDRV9SRUcpIHsNCiAgICAgICAgJGNvbmZpZ3VyYXRpb24gPSAiJHJlZ1xDbGlja1RvUnVuXENvbmZpZ3VyYXRpb24iDQoNCiAgICAgICAgaWYgKFRlc3QtUmVnaXN0cnlLZXlQcm9wZXJ0eSAtS2V5ICRjb25maWd1cmF0aW9uIC1Qcm9wZXJ0eSAkUHJvcGVydHkpIHsNCiAgICAgICAgICAgIHJldHVybiBHZXQtUmVnaXN0cnlLZXlQcm9wZXJ0eSAtS2V5ICRjb25maWd1cmF0aW9uIC1Qcm9wZXJ0eSAkUHJvcGVydHkNCiAgICAgICAgfQ0KDQogICAgICAgIGZvcmVhY2ggKCR2ZXJzaW9uIGluICRTVVBQT1JURURfT0ZGSUNFX1ZFUlNJT05TKSB7DQogICAgICAgICAgICAkY29uZmlndXJhdGlvbiA9ICIkcmVnXCR2ZXJzaW9uXENsaWNrVG9SdW5cQ29uZmlndXJhdGlvbiINCg0KICAgICAgICAgICAgaWYgKFRlc3QtUmVnaXN0cnlLZXlQcm9wZXJ0eSAtS2V5ICRjb25maWd1cmF0aW9uIC1Qcm9wZXJ0eSAkUHJvcGVydHkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gR2V0LVJlZ2lzdHJ5S2V5UHJvcGVydHkgLUtleSAkY29uZmlndXJhdGlvbiAtUHJvcGVydHkgJFByb3BlcnR5DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQoNCiMNCiMgTVMgT2ZmaWNlIHByb2R1Y3RzIHVuaW5zdGFsbGF0aW9uIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIEludm9rZS1Nc09mZmljZVByb2R1Y3RzVW5pbnN0YWxsIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICB0cnkgew0KICAgICAgICBJbnZva2UtQ2FtcGFpZ25Vbmluc3RhbGxQcm9tcHQgLUNhbXBhaWduSWQgJElucHV0UGFyYW1ldGVycy5Vbmluc3RhbGxhdGlvblByb21wdENhbXBhaWduSWQNCiAgICAgICAgSW52b2tlLU9mZmljZVByb2R1Y3RzQ2xvc3VyZQ0KICAgICAgICBSZW1vdmUtTVNPZmZpY2VQcm9kdWN0cyAtUHJvZHVjdE5hbWUgJElucHV0UGFyYW1ldGVycy5Qcm9kdWN0VG9Vbmluc3RhbGwNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAiRmFpbGVkIHRvIHJlbW92ZSBNaWNyb3NvZnQgVmlzaW8gYW5kL29yIE1pY3Jvc29mdCBQcm9qZWN0LiBSZWFzb246ICRfICINCiAgICB9IGZpbmFsbHkgew0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyA1DQogICAgICAgIEludm9rZS1PcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbiAtQ2FtcGFpZ25JZCAkSW5wdXRQYXJhbWV0ZXJzLlVuaW5zdGFsbGF0aW9uQ29uZmlybWF0aW9uQ2FtcGFpZ25JZA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSW52b2tlLUNhbXBhaWduVW5pbnN0YWxsUHJvbXB0IChbc3RyaW5nXSRDYW1wYWlnbklkKSB7DQogICAgJHJlc3BvbnNlID0gR2V0LUNhbXBhaWduUmVzcG9uc2UgLUNhbXBhaWduSWQgJENhbXBhaWduSWQNCiAgICAkc3RhdHVzID0gR2V0LUNhbXBhaWduUmVzcG9uc2VTdGF0dXMgLVJlc3BvbnNlICRyZXNwb25zZQ0KDQogICAgc3dpdGNoICgkc3RhdHVzKSB7DQogICAgICAgICdmdWxseScgew0KICAgICAgICAgICAgJHVuaW5zdGFsbEFuc3dlciA9IEdldC1DYW1wYWlnblJlc3BvbnNlQW5zd2VyIC1SZXNwb25zZSAkcmVzcG9uc2UgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1RdWVzdGlvbk5hbWUgJ1VuaW5zdGFsbCBWaXNpbyBhbmQgUHJvamVjdCcNCg0KICAgICAgICAgICAgaWYgKCR1bmluc3RhbGxBbnN3ZXIgLWVxICdZZXMnKSB7IHJldHVybiB9DQoNCiAgICAgICAgICAgICRkZW5pYWxSZWFzb25BbnN3ZXIgPSBHZXQtQ2FtcGFpZ25SZXNwb25zZUFuc3dlciAtUmVzcG9uc2UgJHJlc3BvbnNlIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUXVlc3Rpb25OYW1lICdEZW5pYWwgcmVhc29uJw0KICAgICAgICAgICAgJHJlYXNvbk1lc3NhZ2UgPSBHZXQtRGVuaWFsUmVhc29uTWVzc2FnZSAtRGVuaWFsQW5zd2VyTmFtZSAkZGVuaWFsUmVhc29uQW5zd2VyDQogICAgICAgICAgICB0aHJvdyAiVGhlIHVzZXIgcmVmdXNlZCB0byB1bmluc3RhbGwgT2ZmaWNlIHByb2R1Y3RzICgkcmVhc29uTWVzc2FnZSkuICINCiAgICAgICAgfQ0KICAgICAgICAndGltZW91dCcgeyB0aHJvdyAnVGltZW91dCBvbiBnZXR0aW5nIGFuIGFuc3dlciBmcm9tIHRoZSB1c2VyLiAnIH0NCiAgICAgICAgJ3Bvc3Rwb25lZCcgeyB0aHJvdyAnVGhlIHVzZXIgcG9zdHBvbmVkIHRoZSBjYW1wYWlnbi4gJyB9DQogICAgICAgICdkZWNsaW5lZCcgeyB0aHJvdyAnVGhlIHVzZXIgZGVjbGluZWQgdGhlIGNhbXBhaWduLiAnIH0NCiAgICAgICAgJ2Nvbm5lY3Rpb25mYWlsZWQnIHsgdGhyb3cgJ1VuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBDb2xsZWN0b3IgY29tcG9uZW50IHRoYXQgY29udHJvbHMgY2FtcGFpZ24gbm90aWZpY2F0aW9ucy4gJyB9DQogICAgICAgICdub3RpZmljYXRpb25mYWlsZWQnIHsgdGhyb3cgJ1VuYWJsZSB0byBub3RpZnkgdGhlIENvbGxlY3RvciBjb21wb25lbnQgdGhhdCBjb250cm9scyBjYW1wYWlnbiBub3RpZmljYXRpb25zLiAnIH0NCiAgICAgICAgZGVmYXVsdCB7IHRocm93ICJGYWlsZWQgdG8gaGFuZGxlIGNhbXBhaWduIHJlc3BvbnNlOiAkcmVzcG9uc2UuICIgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LURlbmlhbFJlYXNvbk1lc3NhZ2UgKFtzdHJpbmddJERlbmlhbEFuc3dlck5hbWUpIHsNCiAgICBpZiAoJFVOSU5TVEFMTEFUSU9OX0RFTklBTF9SRUFTT05TLkNvbnRhaW5zS2V5KCREZW5pYWxBbnN3ZXJOYW1lKSkgew0KICAgICAgICByZXR1cm4gJFVOSU5TVEFMTEFUSU9OX0RFTklBTF9SRUFTT05TLiREZW5pYWxBbnN3ZXJOYW1lDQogICAgfQ0KICAgIHJldHVybiAkVU5JTlNUQUxMQVRJT05fREVOSUFMX1JFQVNPTlMuT3RoZXINCn0NCg0KZnVuY3Rpb24gSW52b2tlLU9mZmljZVByb2R1Y3RzQ2xvc3VyZSB7DQogICAgZm9yZWFjaCAoJHByb2Nlc3MgaW4gJE9GRklDRV9QUk9EVUNUX1BST0NFU1NfTkFNRVMuVmFsdWVzKSB7DQogICAgICAgIGlmIChTdG9wLUdpdmVuUHJvY2VzcyAtUHJvY2Vzc05hbWUgJHByb2Nlc3MpIHsgY29udGludWUgfQ0KICAgICAgICB0aHJvdyAiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBzdG9wcGluZyAkcHJvY2VzcyBwcm9jZXNzLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtTVNPZmZpY2VQcm9kdWN0cyAoW3N0cmluZ10kUHJvZHVjdE5hbWUpIHsNCiAgICBbaGFzaHRhYmxlW11dJHVuaW5zdGFsbENvbW1hbmRzID0gR2V0LVVuaW5zdGFsbENvbW1hbmRzQnlQcm9kdWN0IC1Qcm9kdWN0TmFtZSAkUHJvZHVjdE5hbWUNCg0KICAgIGlmIChUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAtQ29sbGVjdGlvbiAkdW5pbnN0YWxsQ29tbWFuZHMpIHsgcmV0dXJuIH0NCg0KICAgIGZvcmVhY2ggKCRjb21tYW5kSW5mbyBpbiAkdW5pbnN0YWxsQ29tbWFuZHMuR2V0RW51bWVyYXRvcigpKSB7DQogICAgICAgICRlcnJvck1lc3NhZ2UgPSAiRmFpbGVkIHRvIHJlbW92ZSAkKCRjb21tYW5kSW5mby5OYW1lKSBmb3IgbGFuZ3VhZ2UgJCgkY29tbWFuZEluZm8uTGFuZ3VhZ2UpIg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJGNvbW1hbmREYXRhID0gR2V0LVVuaW5zdGFsbENvbW1hbmREYXRhIC1GdWxsQ29tbWFuZCAkY29tbWFuZEluZm8uQ29tbWFuZA0KICAgICAgICAgICAgJGNvbW1hbmRSZXN1bHQgPSBJbnZva2UtUHJvY2VzcyAtRmlsZVBhdGggJGNvbW1hbmREYXRhLkV4ZWN1dGFibGVQYXRoIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUFyZ3VtZW50cyAiJFNJTEVOVF9VTklOU1RBTExfQVJHVU1FTlQgJCgkY29tbWFuZERhdGEuQXJndW1lbnRzKSINCg0KICAgICAgICAgICAgaWYgKCRjb21tYW5kUmVzdWx0LkV4aXRDb2RlIC1uZSAwIC1vciBgDQogICAgICAgICAgICAgICAgKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJGNvbW1hbmRSZXN1bHQuU3RkRXJyKSkgew0KICAgICAgICAgICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgIiRlcnJvck1lc3NhZ2UuICINCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAiJCgkY29tbWFuZEluZm8uTmFtZSkgd2FzIHN1Y2Nlc3NmdWxseSByZW1vdmVkIGZvciBsYW5ndWFnZSAkKCRjb21tYW5kSW5mby5MYW5ndWFnZSkuICINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlICIkZXJyb3JNZXNzYWdlLiBSZWFzb246ICRfICINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVVuaW5zdGFsbENvbW1hbmRzQnlQcm9kdWN0IChbc3RyaW5nXSRQcm9kdWN0TmFtZSkgew0KICAgICR1bmluc3RhbGxDb21tYW5kcyA9IEAoKQ0KDQogICAgZm9yZWFjaCAoJHByb2R1Y3QgaW4gJE9GRklDRV9QUk9EVUNUU19UT19SRU1PVkUuJFByb2R1Y3ROYW1lKSB7DQogICAgICAgICRpbnN0YWxsYXRpb25OYW1lID0gJHByb2R1Y3QuU29mdHdhcmVOYW1lDQogICAgICAgICRyZWdLZXlQYXRoID0gSm9pbi1QYXRoIC1QYXRoICRVTklOU1RBTExfUkVHS0VZIC1DaGlsZFBhdGggJHByb2R1Y3QuUmVnaXN0cnlOYW1lDQogICAgICAgICRwcm9kdWN0c1Byb3BlcnRpZXMgPSBHZXQtUmVnaXN0cnlLZXlQcm9wZXJ0aWVzIC1LZXkgJHJlZ0tleVBhdGggLVByb3BlcnRpZXMgKCRVTklOU1RBTExfQ09NTUFORF9SRUdfUFJPUEVSVElFUyAtYXMgW3N0cmluZ1tdXSkNCg0KICAgICAgICBpZiAoJG51bGwgLWVxICRwcm9kdWN0c1Byb3BlcnRpZXMpIHsNCiAgICAgICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgIickaW5zdGFsbGF0aW9uTmFtZScgd2FzIG5vdCBwcmVzZW50IG9uIHRoZSBkZXZpY2UuICINCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKCRwcm9wZXJ0eSBpbiAkcHJvZHVjdHNQcm9wZXJ0aWVzKSB7DQogICAgICAgICAgICAgICAgJGNvbW1hbmQgPSAkcHJvcGVydHkuVW5pbnN0YWxsU3RyaW5nDQogICAgICAgICAgICAgICAgJGxhbmd1YWdlID0gR2V0LUxhbmd1YWdlIC1OYW1lICRwcm9wZXJ0eS5EaXNwbGF5TmFtZQ0KICAgICAgICAgICAgICAgICR1bmluc3RhbGxDb21tYW5kcyArPSBAe0NvbW1hbmQgPSAkY29tbWFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhbmd1YWdlID0gJGxhbmd1YWdlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSA9ICRpbnN0YWxsYXRpb25OYW1lfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICR1bmluc3RhbGxDb21tYW5kcw0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnlLZXlQcm9wZXJ0aWVzIChbc3RyaW5nXSRLZXksIFtzdHJpbmdbXV0kUHJvcGVydGllcykgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkS2V5KSkgeyByZXR1cm4gfQ0KICAgIHJldHVybiAoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkS2V5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU5hbWUgJFByb3BlcnRpZXMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCn0NCg0KZnVuY3Rpb24gR2V0LUxhbmd1YWdlIChbc3RyaW5nXSROYW1lKSB7DQogICAgJGxhbmd1YWdlUmVnZXggPSAnLipbLV17MX0gKD88bGFuZ3VhZ2U+LiopJw0KICAgIGlmICgkTmFtZSAtbWF0Y2ggJGxhbmd1YWdlUmVnZXgpIHsNCiAgICAgICAgcmV0dXJuICRNYXRjaGVzLmxhbmd1YWdlDQogICAgfQ0KDQogICAgcmV0dXJuICROYW1lDQp9DQoNCmZ1bmN0aW9uIEdldC1Vbmluc3RhbGxDb21tYW5kRGF0YSAoW3N0cmluZ10kRnVsbENvbW1hbmQpIHsNCiAgICBpZiAoJEZ1bGxDb21tYW5kIC1tYXRjaCAkVU5JTlNUQUxMX0NPTU1BTkRfUkVHRVgpIHsNCiAgICAgICAgcmV0dXJuIEB7RXhlY3V0YWJsZVBhdGggPSAkTWF0Y2hlcy5FeGVjdXRhYmxlUGF0aA0KICAgICAgICAgICAgICAgICBBcmd1bWVudHMgPSAkTWF0Y2hlcy5Bcmd1bWVudHN9DQogICAgfQ0KICAgIHRocm93ICJVbmV4cGVjdGVkIHVuaW5zdGFsbCBjb21tYW5kOiAnJEZ1bGxDb21tYW5kJy4gIg0KfQ0KDQojDQojIE1haW4gc2NyaXB0IGZsb3cNCiMNCltlbnZpcm9ubWVudF06OkV4aXQoKEludm9rZS1NYWluIC1JbnB1dFBhcmFtZXRlcnMgJE15SW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnMpKQ0KDQojIFNJRyAjIEJlZ2luIHNpZ25hdHVyZSBibG9jaw0KIyBNSUlpbVFZSktvWklodmNOQVFjQ29JSWlpakNDSW9ZQ0FRRXhEekFOQmdsZ2hrZ0JaUU1FQWdFRkFEQjVCZ29yDQojIEJnRUVBWUkzQWdFRW9Hc3dhVEEwQmdvckJnRUVBWUkzQWdFZU1DWUNBd0VBQUFRUUg4dzdZRmxMQ0U2M0pOTEcNCiMgS1g3elVRSUJBQUlCQUFJQkFBSUJBQUlCQURBeE1BMEdDV0NHU0FGbEF3UUNBUVVBQkNEUEc3WVltMWd3R3JYSQ0KIyBVK0U5bWZyWXVLbHJXeTJ4ZllJdW5JT25GMGxkWUtDQ0VUc3dnZ1BGTUlJQ3JhQURBZ0VDQWhBQ3JGd21hZ3RBDQojIG00OExlZkt1UmlWM01BMEdDU3FHU0liM0RRRUJCUVVBTUd3eEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUsNCiMgRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhLekFwQmdOVg0KIyBCQU1USWtScFoybERaWEowSUVocFoyZ2dRWE56ZFhKaGJtTmxJRVZXSUZKdmIzUWdRMEV3SGhjTk1EWXhNVEV3DQojIE1EQXdNREF3V2hjTk16RXhNVEV3TURBd01EQXdXakJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU0NCiMgUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRRA0KIyBFeUpFYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNSUlCSWpBTkJna3Foa2lHDQojIDl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4c3psYytiNzFMdmxMUzB5cHQvbGdUL0p6U1ZKdG5FcXc5V1UNCiMgTkdlaUNoeXdYMm1tUUxIRXQ3S1AwSmlrcVVGWk90UGNsTlk4MjNRNHBFck1UU1dDOTBxbFV4STQ3dk5KYlhHUg0KIyBmbU8ycTZaZnc2U0UrRTlpVWI3NHhlemJPSkxqQnVVSWtRekVLRUZWKzh0YWlSVitjZWcxdjAxeUNUMitPamhRDQojIFczY3hHNDJ6eHlSRm1xZXNiUUFVV2dTM3VoUHJVUXFZUVVFaVRtVmhoNEZCVUtaNVhJbmVHVXBYMVM3bVhSeFQNCiMgTEg2WXpSb0dGcVJvYzlBMEJCTmNvWEhUV254VjIxNWs0VGVITUZZRTVSRzBLWUFTOFhrNWlLSUNFWHduWnJlSQ0KIyB0M2p5eWdxb09Lc0taTUsvWmwyVmhNR2hKUjZIWFJwUUN5QVN6RUc3Ymd0Uk9MaEx5d0lEQVFBQm8yTXdZVEFPDQojIEJnTlZIUThCQWY4RUJBTUNBWVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVc1Q3RGFRUDQNCiMgdjBjQjFKZ21HZ2dDNzJOa0s4TXdId1lEVlIwakJCZ3dGb0FVc1Q3RGFRUDR2MGNCMUpnbUdnZ0M3Mk5rSzhNdw0KIyBEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQndhQnBmYzE1eWZQSWhtQmdoWElkc2hSL2dxWjZxL0dESjJRQkJYDQojIHdZcnpldGtSWlk0MStwNzhSYldlMlV3eFM3aVI2RU1zanJONHp0dmpVM2x4MXVVaGxBSGFWWWVhSkdUMmltYk0NCiMgM3B3M3phZzBzV21iSThpZWVDSXJjRVBqVlVjeFlSbnZXTVdGTDA0dzlxQXhGaVBJNStKbEZqUEx2eG9ib0QzNA0KIyB5bDZMTVl0Z0NJa3REQVpjVXJmRStRcVkwUlZmbnhLK2ZEWmpPTDFFcEgva0ppc0t4SmRwRGVtTTRzQVFWN2pJDQojIGRoS1JWZkpJYWRpOEtnSmJEMFRVSURIYjlMcHdKbDJRWUo2OFN4Y0pMN1RMSGtOb3lRY253ZEpjOStvaHVXZ1MNCiMgbkR5Y3Y1NzhnRnliWTgzc1I2b2xKMmVnTi9NQWduMVUxNm40NlM0VG8zZm9IMG93Z2dhdU1JSUZscUFEQWdFQw0KIyBBaEFLR2cwYmNvK1V1TGR3RkNCOEtnckVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Hd3hDekFKQmdOVkJBWVRBbFZUDQojIE1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWoNCiMgYjIweEt6QXBCZ05WQkFNVElrUnBaMmxEWlhKMElFVldJRU52WkdVZ1UybG5ibWx1WnlCRFFTQW9VMGhCTWlrdw0KIyBIaGNOTWpBd09ERTNNREF3TURBd1doY05Nak13T0RJeU1USXdNREF3V2pDQndERVRNQkVHQ3lzR0FRUUJnamM4DQojIEFnRURFd0pEU0RFVk1CTUdDeXNHQVFRQmdqYzhBZ0VDRXdSV1lYVmtNUjB3R3dZRFZRUVBEQlJRY21sMllYUmwNCiMgSUU5eVoyRnVhWHBoZEdsdmJqRVlNQllHQTFVRUJSTVBRMGhGTFRFeE1pNHdNREF1TlRjNU1Rc3dDUVlEVlFRRw0KIyBFd0pEU0RFUE1BMEdBMVVFQnhNR1VISnBiR3g1TVJZd0ZBWURWUVFLRXcxT1JWaFVhR2x1YXlCVExrRXVNUXN3DQojIENRWURWUVFMRXdKU1JERVdNQlFHQTFVRUF4TU5Ua1ZZVkdocGJtc2dVeTVCTGpDQ0FpSXdEUVlKS29aSWh2Y04NCiMgQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxNYnI4azVCNFVUN0U5KzZTa29hM0loeTh2NnZTSFdhNVRmcHRQbg0KIyBCMUpRN0Jnc3c2RURDSS9IcklsY1JSRitmZVhHWVBZYWtKNW5nMWNrTTIydS9GdEFtcmxoYjVWTEZPZU1pdWIvDQojIFI1Y1BRNkloamRDblRpVlByQmJZZXZDbXlIT1RkcWM3NEdGeWdCSytnL1pMWnFPV0pEa2h3VmltVE5UUDFSTy8NCiMgQmVjM0pJM3JyMEN1SXFxR3ZDdC9UdWNQc3pWeXVLUlZpdzVndk1rYXdRdmZ3VDhNbUxmRmtyOThsdDRCbFRaRw0KIyBTa29QdW1FUytiSmRXTVR0ZFRmWklrK0tRdjYwb1dtc1dsSS9MeGUrbTFxSW5DRURMRm5Tc1FJTitIR2thYlc1DQojIFVpRUo2YkRqWkNJQjVQaFFYanYwV1hMVEdacVRjYkJlQkxJQW4wNkw5VElINm9DRzg3UWxyWGR5c09EY2FxaVENCiMgU2tBSjdiWFFzY2ZXc1JIV1ByUnpVMzZBMm1PeERLRVJHeEgzaVBEeGZWOU5BRWI4aGRGVGZ4SlJNYStoRUFxdA0KIyA2cXg0UHVVWmJ1N204VHJoK2ZIS281Uzlid1hrWW1pMFRET05wWUVRbWI3K2xlZmNIcUxOYUlncGZkSzVoLzBWDQojIGxVbHBEd2xOR1hNZkUyYUJoTlI2TDVPOTlyMTFZMnFKQTFPbU1CY1BOb1k3bGpYbWRNSHUxVjkvREUwSks0T1kNCiMgVnhiblVWTXFUZjMvVmdaeEdlY1lNTWZhbWp2NDJzUEZ2TWRhQ2o4QzNONGMwZDRzV09sdEprakNtaTVmS3c5eQ0KIyBVR0x6VXpXT2Z4OXkwYVRRbjlTZC95NjhjQlAvSmwvMWt3czN4UDRPcnN6bDV2QUZlblRRd3RPSExnc29rMEVGDQojIEZ1YUxBZ01CQUFHamdnSDFNSUlCOFRBZkJnTlZIU01FR0RBV2dCU1A2SDd3YlRKcUFBVWp4M0NYYWpxUS8ydnENCiMgMURBZEJnTlZIUTRFRmdRVVVsdW96UENJb1lCeXVENGRWQmNDbGJ3NDYzOHdNZ1lEVlIwUkJDc3dLYUFuQmdncg0KIyBCZ0VGQlFjSUE2QWJNQmtNRjBOSUxWWkJWVVF0UTBoRkxURXhNaTR3TURBdU5UYzVNQTRHQTFVZER3RUIvd1FFDQojIEF3SUhnREFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQXpCN0JnTlZIUjhFZERCeU1EZWdOYUF6aGpGb2RIUncNCiMgT2k4dlkzSnNNeTVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdFp6RXVZM0pzTURlZw0KIyBOYUF6aGpGb2RIUndPaTh2WTNKc05DNWthV2RwWTJWeWRDNWpiMjB2UlZaRGIyUmxVMmxuYm1sdVoxTklRVEl0DQojIFp6RXVZM0pzTUVzR0ExVWRJQVJFTUVJd053WUpZSVpJQVliOWJBTUNNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDANCiMgZEhCek9pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13QndZRlo0RU1BUU13ZmdZSUt3WUJCUVVIQVFFRQ0KIyBjakJ3TUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3T2k4dmIyTnpjQzVrYVdkcFkyVnlkQzVqYjIwd1NBWUlLd1lCDQojIEJRVUhNQUtHUEdoMGRIQTZMeTlqWVdObGNuUnpMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVWV1EyOWsNCiMgWlZOcFoyNXBibWREUVMxVFNFRXlMbU55ZERBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWTZJQjRQbk5jemhkZW1WVmlkdFQ4WFQwUCsvRWo5YmJhTUltUjZIRUxUY1lYMTlnamtzRk5VclI2DQojIC9YVVBnYWovblNwbHI1T2ozREo1SkNQbzJBVkt3WTFtVVdTMnVZb1pSaW5FQW9kRGZFU3FmVGlSMTk4MnhwNzINCiMgZ28zNDdHVE1ucHBrMkVwZHVJaW9pK2Rjd2JidzFEZjJuRnpJM0ZjWDdIMVVJUGQ4TTRwM1VBdDVXQ2lWTVBIVw0KIyBYeHJRdDVuOGp4Z0xjdXN2T1JYWnFaT3NkVGw3SFpwc1ZIbkdVWTc4N091MElKeHVGc2lVTTY0YktHenZOcXF0DQojIFl5RnlSOTlFckNUcWRaNjZ1cmFGaWxBZ2pQd2FMRnpKVXc2K2FLL3dXeEtCN1EwcGlJQ3BlWDFYMElMWnU1NkcNCiMgUjIwNlZFY214V0lMWWpRRTJOWmNUKzd2YlV6bU1JSUd2RENDQmFTZ0F3SUJBZ0lRQS9HMDRWODZndkVVbG5peg0KIyAxOWhIWERBTkJna3Foa2lHOXcwQkFRc0ZBREJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuDQojIGFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRREV5SkUNCiMgYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNQjRYRFRFeU1EUXhPREV5TURBdw0KIyBNRm9YRFRJM01EUXhPREV5TURBd01Gb3diREVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEDQojIFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG4NCiMgYVVObGNuUWdSVllnUTI5a1pTQlRhV2R1YVc1bklFTkJJQ2hUU0VFeUtUQ0NBU0l3RFFZSktvWklodmNOQVFFQg0KIyBCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLZFQrZyt5dFJQeFpNK0VnUHl1Z0RYUnR0ZkhveXlzR2l5czhZU3NPalVTDQojIE9wS1J1bGZreE1uekw2aElQTGZXYnR5WElycFJlV0d2UXk4TnQ1dTBTVEd1UkZnK3BLR1dwNGRQSTM3RGJHVWsNCiMga0ZVK29jb2pmTVZDNmNSNllrV2JmZDVqZE11ZVl5WDRoSnFhclVWUHJuMGZ5QlBMZFp2SjRlR0srQXNNbVBUSw0KIyBQdEJGcW5vZXBWaVROalMrS3k0ck1WaG10RElRbjUzd1VxSHY2RDdUZHZKQVd0ejZhajBiUzYxMnNJeGM3amE2DQojIGcrb3dxRXplOFFzcVdFR0lyZ0NKcXdQUkZvSWdJbmJyWGxRNEVtTGgwbkFrMiswZmNOSmtDWUF0NHJhZHpoL3kNCiMgdXlIemJOdllzeGw3aWxDZjcrdzJDbHlhdDByVENLQTVlZjNkdnowNkNTVUNBd0VBQWFPQ0ExZ3dnZ05VTUJJRw0KIyBBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdEZ1lEVlIwUEFRSC9CQVFEQWdHR01CTUdBMVVkSlFRTU1Bb0dDQ3NHDQojIEFRVUZCd01ETUg4R0NDc0dBUVVGQndFQkJITXdjVEFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXUNCiMgWkdsbmFXTmxjblF1WTI5dE1Fa0dDQ3NHQVFVRkJ6QUNoajFvZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeQ0KIyBkQzVqYjIwdlJHbG5hVU5sY25SSWFXZG9RWE56ZFhKaGJtTmxSVlpTYjI5MFEwRXVZM0owTUlHUEJnTlZIUjhFDQojIGdZY3dnWVF3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXd6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHANCiMgWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dRS0Erb0R5R09taDBkSEE2THk5amNtdzBMbVJwWjJsag0KIyBaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHBaMmhCYzNOMWNtRnVZMlZGVmxKdmIzUkRRUzVqY213d2dnSEVCZ05WDQojIEhTQUVnZ0c3TUlJQnR6Q0NBYk1HQ1dDR1NBR0cvV3dEQWpDQ0FhUXdPZ1lJS3dZQkJRVUhBZ0VXTG1oMGRIQTYNCiMgTHk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDNOemJDMWpjSE10Y21Wd2IzTnBkRzl5ZVM1b2RHMHdnZ0ZrQmdncg0KIyBCZ0VGQlFjQ0FqQ0NBVlllZ2dGU0FFRUFiZ0I1QUNBQWRRQnpBR1VBSUFCdkFHWUFJQUIwQUdnQWFRQnpBQ0FBDQojIFF3QmxBSElBZEFCcEFHWUFhUUJqQUdFQWRBQmxBQ0FBWXdCdkFHNEFjd0IwQUdrQWRBQjFBSFFBWlFCekFDQUENCiMgWVFCakFHTUFaUUJ3QUhRQVlRQnVBR01BWlFBZ0FHOEFaZ0FnQUhRQWFBQmxBQ0FBUkFCcEFHY0FhUUJEQUdVQQ0KIyBjZ0IwQUNBQVF3QlFBQzhBUXdCUUFGTUFJQUJoQUc0QVpBQWdBSFFBYUFCbEFDQUFVZ0JsQUd3QWVRQnBBRzRBDQojIFp3QWdBRkFBWVFCeUFIUUFlUUFnQUVFQVp3QnlBR1VBWlFCdEFHVUFiZ0IwQUNBQWR3Qm9BR2tBWXdCb0FDQUENCiMgYkFCcEFHMEFhUUIwQUNBQWJBQnBBR0VBWWdCcEFHd0FhUUIwQUhrQUlBQmhBRzRBWkFBZ0FHRUFjZ0JsQUNBQQ0KIyBhUUJ1QUdNQWJ3QnlBSEFBYndCeUFHRUFkQUJsQUdRQUlBQm9BR1VBY2dCbEFHa0FiZ0FnQUdJQWVRQWdBSElBDQojIFpRQm1BR1VBY2dCbEFHNEFZd0JsQUM0d0hRWURWUjBPQkJZRUZJL29mdkJ0TW1vQUJTUEhjSmRxT3BEL2ErclUNCiMgTUI4R0ExVWRJd1FZTUJhQUZMRSt3MmtEK0w5SEFkU1lKaG9JQXU5alpDdkRNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWk0wb01nVE0zMjYwMnllVEpPcnUxR3k1Nm91TDBRMElYbnI5T29VM2hzZHZwZ2QyZkFmTGtpTlhwDQojIC9nbjlJY0hzWFlEUzhOYkJROEwrZHl2YitkZVJNODVzMWJJWk8rWXUxc21UVDRoQWpzM2g5WDd4RDhaWlZuTG8NCiMgNjJwQnZSelZSdFY4U2NwbU9CWEJ2K0NSY0hlSDNNbU5NY2tNS2FJejdZM2loODJKalQ4Yi85WGdHcGVMZk5wdA0KIyArNmpHc2pwbWEzc0JzODNZcGpUc0VnR3JsVmlseEZOWHFHRG01d0lTb0xralpLSk51M3lCSldRaHZzL3VRaGhEDQojIGw3dWxOd2F2VGY4bXBVMWhTK3hHUWJobHpyaDVuZ2lXQzRHTWlqdVB4NW1Nb3lwdW1HMWVZY2FXdDRxNVlTMlQNCiMgdU9zT0JFUFg5ZjZtOEdMVW1XcWx3Y0h3WkpTQU1ZSVF0RENDRUxBQ0FRRXdnWUF3YkRFTE1Ba0dBMVVFQmhNQw0KIyBWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowDQojIExtTnZiVEVyTUNrR0ExVUVBeE1pUkdsbmFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXkNCiMgS1FJUUNob05HM0tQbExpM2NCUWdmQ29LeERBTkJnbGdoa2dCWlFNRUFnRUZBS0NCaERBWUJnb3JCZ0VFQVlJMw0KIyBBZ0VNTVFvd0NLQUNnQUNoQW9BQU1Ca0dDU3FHU0liM0RRRUpBekVNQmdvckJnRUVBWUkzQWdFRU1Cd0dDaXNHDQojIEFRUUJnamNDQVFzeERqQU1CZ29yQmdFRUFZSTNBZ0VWTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0FUQy9sVkNibTkNCiMgOXh0dkpHMXBSRThDbWtyZm0zczZ5TnlIRmRoK1llMVcvVEFOQmdrcWhraUc5dzBCQVFFRkFBU0NBZ0JTazZZYg0KIyBGbTFiT1RyS0hQd3JTTzRCUUZad0h1bUhrMldZT1lWK1hkRkY0cUZBYnArWnpSRlNRaUNHN1VodU1YNnFZN3BpDQojIHp2MldCTGpMRHVsZktEUnJGbjlkcDdZVktMQ0lKVlZpbkpXNEZVYS8vWklmckVpWFQrbTJBbG94VmpTK1JYcWcNCiMgdkNtS0VtWDhvMkUybHBCbUJYSllRRUtsYjdtYU5DUUpQL0pqUnFEelBCRUVFN2pFTGpWbW9nWE1GUXdMZndxMQ0KIyAyTEhQTWFVWVpQWmJMMkhUTXF5cUIxaTE0djdpZzBralFEQjBRRXd3MTltdFg3RnRIaTFvNEtVUWVYQXJJalVCDQojIEhUU3g1Z0JYY2ZZMmRxbFZmNmt3czlpc01helFrbkpPZTA2TWhrNWdNTFVFdGJSUjFzVUpvRml1NXZnTktCYVYNCiMgQnVHVEZMR3JaQUlGVkVLVnNvaHlBUUJ6UlFXdU9uTzE3Q21IbVFxK1FGbGpiVEFOU1Ivd005MDZLWDJONTZOcg0KIyBhN2E5dGxML3lwd1FQci90QjNCOG5GKzZmZy9ESk52YzRsdnJjL2ZsOHQ3bTArekpkMTBteWcxRk5MM2ErOHpYDQojIG9Pa3lXdkgyRGZmRFNxY3Z1SkNkd2tUSHdaT2sxWDJTVk9DZUwrRXloVVRYbHVxNlE3YjRoYjZSNU9ORGIxR1INCiMgL3B1ZzdpN05jT2piZTFvSDMzNjdsTWVGcVkxQVNPUlA3R2U0aTNVUmt1ekQ2aStwSGNUZEZtTytkSG96ME5UMg0KIyA4T2ZjMlhoeklSTzZFOVZFbUtHNFp1SklyVitsWFNtSEZCM24rdXAvSFlJbU8zZjZibmpHZGt5S0JITVVJV3BmDQojIG45dEQyN2I1YlJCdlRGQ0pzRlJ1UHRXUGU5VmNva3B6NzE1UHRLR0NEWDB3Z2cxNUJnb3JCZ0VFQVlJM0F3TUINCiMgTVlJTmFUQ0NEV1VHQ1NxR1NJYjNEUUVIQXFDQ0RWWXdnZzFTQWdFRE1ROHdEUVlKWUlaSUFXVURCQUlCQlFBdw0KIyBkd1lMS29aSWh2Y05BUWtRQVFTZ2FBUm1NR1FDQVFFR0NXQ0dTQUdHL1d3SEFUQXhNQTBHQ1dDR1NBRmxBd1FDDQojIEFRVUFCQ0FQWE10ZytCenc4a2VIUDZGU1I4Tkt6TW1CMHp0cXk2ZEs3ZjZ0YkxYcS9RSVFZRlhmSUpwQkxybEQNCiMgY1JDVmQ0ZmRGaGdQTWpBeU1URXlNamd3T1RNNE16VmFvSUlLTnpDQ0JQNHdnZ1Btb0FNQ0FRSUNFQTFDU3VDKw0KIyBPb2ovWUVBaHpoUUE4TjB3RFFZSktvWklodmNOQVFFTEJRQXdjakVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WDQojIEJBb1RERVJwWjJsRFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFeE1DOEcNCiMgQTFVRUF4TW9SR2xuYVVObGNuUWdVMGhCTWlCQmMzTjFjbVZrSUVsRUlGUnBiV1Z6ZEdGdGNHbHVaeUJEUVRBZQ0KIyBGdzB5TVRBeE1ERXdNREF3TURCYUZ3MHpNVEF4TURZd01EQXdNREJhTUVneEN6QUpCZ05WQkFZVEFsVlRNUmN3DQojIEZRWURWUVFLRXc1RWFXZHBRMlZ5ZEN3Z1NXNWpMakVnTUI0R0ExVUVBeE1YUkdsbmFVTmxjblFnVkdsdFpYTjANCiMgWVcxd0lESXdNakV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREM1bUdFWjhXSw0KIyA5UTBJcEVYS1kydFIxem9SUXIwS2RYVk5sTFFNVUxVbUVQNGR5RytSYXd5VzV4cGNTTzlFNWIrYlljMFZrV0phDQojIHVQOW5DNXhqL1RacWdmb3ArTjByY0lYZUFoanplRzI4ZmZuSGJRazl2bXAyaCttS3ZmaUVYUjUyeWVUR2RuWTYNCiMgVTlIUjAxbzJqOGFqNFM4Yk9yZGgxblBzVG0wemlueGRSUzFMc1ZEbVFUbzNWb2Jja3lPTjkxQWw2R1RtM2RPUA0KIyBMMWUxaHlEckRvNHMxU1BhOUUxNFJ1TURnekVwU2x3TU1ZcEtqSWpGOXpCYStSU3ZGVjlzUTBrSi9TWWpVL2FODQojIFkrZ2FxMXV4SFREQ20ybUN0TnY4VmxTOEg2R0hxNzU2V3dvZ0wwc0p5WlduamJMNjFtT0xUcVZ5SE82ZmVnRnoNCiMgK0JuVy9nMUpoTDBCQWdNQkFBR2pnZ0c0TUlJQnREQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFILw0KIyBCQUl3QURBV0JnTlZIU1VCQWY4RUREQUtCZ2dyQmdFRkJRY0RDREJCQmdOVkhTQUVPakE0TURZR0NXQ0dTQUdHDQojIC9Xd0hBVEFwTUNjR0NDc0dBUVVGQndJQkZodG9kSFJ3T2k4dmQzZDNMbVJwWjJsalpYSjBMbU52YlM5RFVGTXcNCiMgSHdZRFZSMGpCQmd3Rm9BVTlMYmhJQjMrS2E3UzVHR2xzcUlsc3NnWE5XNHdIUVlEVlIwT0JCWUVGRFpFaG82aw0KIyB1ckJtdnJ3b0xSMUVOdDNqYW5xOE1IRUdBMVVkSHdScU1HZ3dNcUF3b0M2R0xHaDBkSEE2THk5amNtd3pMbVJwDQojIFoybGpaWEowTG1OdmJTOXphR0V5TFdGemMzVnlaV1F0ZEhNdVkzSnNNREtnTUtBdWhpeG9kSFJ3T2k4dlkzSnMNCiMgTkM1a2FXZHBZMlZ5ZEM1amIyMHZjMmhoTWkxaGMzTjFjbVZrTFhSekxtTnliRENCaFFZSUt3WUJCUVVIQVFFRQ0KIyBlVEIzTUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3T2k4dmIyTnpjQzVrYVdkcFkyVnlkQzVqYjIwd1R3WUlLd1lCDQojIEJRVUhNQUtHUTJoMGRIQTZMeTlqWVdObGNuUnpMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEZOSVFUSkINCiMgYzNOMWNtVmtTVVJVYVcxbGMzUmhiWEJwYm1kRFFTNWpjblF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUVnYw0KIyAzTFhwbWlPODV4cm5JQTZPWjBiOVFuSlJkQW9qUjZPcmt0SWx4SEJadmhTZzVTZUJwVTBVRlJrSGVmRFJCTU9HDQojIDJUdTkva1FDWmszdGFhUVA5cmh3ejJMbzlWRktlSGsyZWllMzgrZFNuNU9uN1VPZWUrZTAzVUVpaWZ1SG9rWUQNCiMgVHZ6MC9yZGtkMk5mSTFKcGc0TDZHbFB0a015Tm9SZHpEZlR6WlRsd1MvT2MxbnA3Mmd5OFBUTFFHOHYxWWZ4MQ0KIyBDQUIydklFTytNRGhYTS9FRVhMbkcyUkoyQ0thZFJWQzlTMHlPSUhhOUdDaXVyUlMrMXpnWVNRbFQ3TGZ5U21vDQojIGMwTlIycjFqMWg5Ym0vY3VHMDhUSGZkS0RYRitsN2YwUDRUcndlT2pTYUg2enFlL1ZzKzZXWFpoaVY5K3A3U08NCiMgWjNqNU5wamh5eWphVzRlbWlpOHdnZ1V4TUlJRUdhQURBZ0VDQWhBS29TWFcxakliZmtIa0JkbzJsOElWTUEwRw0KIyBDU3FHU0liM0RRRUJDd1VBTUdVeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKDQojIGJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhKREFpQmdOVkJBTVRHMFJwWjJsRFpYSjANCiMgSUVGemMzVnlaV1FnU1VRZ1VtOXZkQ0JEUVRBZUZ3MHhOakF4TURjeE1qQXdNREJhRncwek1UQXhNRGN4TWpBdw0KIyBNREJhTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WDQojIEJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhNVEF2QmdOVkJBTVRLRVJwWjJsRFpYSjBJRk5JUVRJZ1FYTnoNCiMgZFhKbFpDQkpSQ0JVYVcxbGMzUmhiWEJwYm1jZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdw0KIyBnZ0VLQW9JQkFRQzkwREx1UzgyUGY5MnB1b0taeFRsVUtGZTJJMHJFRGdkRk0xRVFmZEQ1ZlUxb2Z1ZTJvUFNODQojIHM0amtsNzlqSVpDWXZ4TzhWOVBENFg0STFtb1VBRGozTGg0NzdzeW05akpaL2w5bFArQ2I2K05HUndZYVZYNEwNCiMgSjM3QW92V2c0TjRpUHc3L2ZwWDc4Nk82SWo0WXJCSGs4SmtEYlR1RmZBblQ3bDNJbWd0VTQ2Z0pjV3ZnenlJUQ0KIyBEM1hQY1hKT0NxM2ZRRHBjdDFIaG9Ya1V4azBrSXpCZHZPdzhZR3FzTHdmTS9mRHFSOW1JVUY3OVptNVdZU2NwDQojIGlZUlI1b0xuUmxEOWxDb3NwK1IxUHJxWUQ0Ui9uekVVMXEzVjhtVExleDRGMElRWmNoZnhGd2J2UGMzV1RlOEcNCiMgUXYyaVV5cFBoUjNFSFR5dno5cXNFUFhkckt6cFZ2K1RBZ01CQUFHamdnSE9NSUlCeWpBZEJnTlZIUTRFRmdRVQ0KIyA5TGJoSUIzK0thN1M1R0dsc3FJbHNzZ1hOVzR3SHdZRFZSMGpCQmd3Rm9BVVJldWlyL1NTeTRJeExWR0xwNmNoDQojIG5mTnR5QTh3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBT0JnTlZIUThCQWY4RUJBTUNBWVl3RXdZRFZSMGwNCiMgQkF3d0NnWUlLd1lCQlFVSEF3Z3dlUVlJS3dZQkJRVUhBUUVFYlRCck1DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSdw0KIyBPaTh2YjJOemNDNWthV2RwWTJWeWRDNWpiMjB3UXdZSUt3WUJCUVVITUFLR04yaDBkSEE2THk5allXTmxjblJ6DQojIExtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRUZ6YzNWeVpXUkpSRkp2YjNSRFFTNWpjblF3Z1lFR0ExVWQNCiMgSHdSNk1IZ3dPcUE0b0RhR05HaDBkSEE2THk5amNtdzBMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVGeg0KIyBjM1Z5WldSSlJGSnZiM1JEUVM1amNtd3dPcUE0b0RhR05HaDBkSEE2THk5amNtd3pMbVJwWjJsalpYSjBMbU52DQojIGJTOUVhV2RwUTJWeWRFRnpjM1Z5WldSSlJGSnZiM1JEUVM1amNtd3dVQVlEVlIwZ0JFa3dSekE0QmdwZ2hrZ0INCiMgaHYxc0FBSUVNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDBkSEJ6T2k4dmQzZDNMbVJwWjJsalpYSjBMbU52YlM5RA0KIyBVRk13Q3dZSllJWklBWWI5YkFjQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnhsUkxwVVlkV2FjM3YzZHA4DQojIHFtTjZzM2pQQmpkQWhPOUxoTC9LendNQy9jV253dzRnUWl5dmQvTXJId3doV2lxM0JUUWRhcTZaK0NlaVpyOEoNCiMgcW1EZmRxUTZrdy80c3RIWWZCbGk2RjZDSlI3RXVoeDdMQ0hpMWxzc0ZEVkRCR2l5MjNVQzRITEhtTlk4Wk9VZg0KIyBTQkFZWDRrNFlVMWlSaVNIWTR5UlVpeXZLWW5sZUIvV0N4U2xnTmNTUjNDemRkV1RoWk4rdHBKbisxTmhpYWoxDQojIGE1YkE5RmhwRFh6SUFiRzVLSFczbVdPRklveGh5bm1VZmxuOGpBL2piN1VCSnJac3BlNkhVU0hrV0dDYnVnd3QNCiMgSzIyaXhINjd4Q1VyUndJSWZFbXVFN2JoZkVKQ0tNWVlWczlCTkxabVhiWjBlL1ZXTXlJdklqYXlTNkpLbGRqMQ0KIyBwbzVTTVlJQ2hqQ0NBb0lDQVFFd2dZWXdjakVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEDQojIFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFeE1DOEdBMVVFQXhNb1JHbG4NCiMgYVVObGNuUWdVMGhCTWlCQmMzTjFjbVZrSUVsRUlGUnBiV1Z6ZEdGdGNHbHVaeUJEUVFJUURVSks0TDQ2aVA5Zw0KIyBRQ0hPRkFEdzNUQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQjBUQWFCZ2txaGtpRzl3MEJDUU14RFFZTEtvWklodmNODQojIEFRa1FBUVF3SEFZSktvWklodmNOQVFrRk1ROFhEVEl4TVRJeU9EQTVNemd6TlZvd0t3WUxLb1pJaHZjTkFRa1ENCiMgQWd3eEhEQWFNQmd3RmdRVTRkZUNxT0dSdnU5cnloYVJ0YXEwbEtZa20vTXdMd1lKS29aSWh2Y05BUWtFTVNJRQ0KIyBJSkFhK05yK1JmK2VlRk9STElYYVVHWXZQU3I5ZnR2UTVMWVd2NWdRRWgyQ01EY0dDeXFHU0liM0RRRUpFQUl2DQojIE1TZ3dKakFrTUNJRUlMTVFrQWE4Q3RtREI1RlhLZUJFQTBGY2crTXBLMkZQSnBaTWpUVng3UFdwTUEwR0NTcUcNCiMgU0liM0RRRUJBUVVBQklJQkFFQU5pN1NKWXg0dUJnVlJkQWp6dGs3OGhuWHlkYXZCeU5zM0pJeHl3YVlqbld1Zg0KIyBiSU5CY2UxS3pURUxhZktmaFlyUmprU09ZYU1YUlVIMTlvMVgzcnF5bGV3SCt5ZnlGWUd1ZXlQWGtkV3FlQ0hGDQojIGZ3a2o1eWZzR052WkVpTzgvRjRhRGFoVHVWRURzNnhNamlHU1hCUmZqc0llcDVFY04vbHFmK0dzTkNmR2JOMksNCiMgdVRYUkZrVmxzQ2ttMVVnZFhxRjBaSEF3NHh4VlBXd3dTUDRiNmhKSXFPQXlPMmw5dEVlOGRQanZQakhaVEk5Kw0KIyBMU1Nublh1ZjZNTG9zRlcrcEZFSUFnWEZqRmdUYUZRSHYzUm9lUi83bXRDenNEZUxtdWVENUpCaEtsZTlaSDZzDQojIGFKdHhNT0ZUNU9jM2pvMC9jVmdsYk1XczBOK1U5M21aa000SVlBcz0NCiMgU0lHICMgRW5kIHNpZ25hdHVyZSBibG9jaw0K"}}}