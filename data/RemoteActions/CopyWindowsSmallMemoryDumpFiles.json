{"id": "Copy_Windows_Small_Memory_Dump_Files_windows", "name": "Copy Windows Small Memory Dump Files", "description": "During execution, script copies collected Windows small memory dump files to the network shared folder provided as an input parameter.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Absolute path to the network shared folder where memory dumps should be copied. UNC path format is required (e.g. \\\\Server\\SharedFolderName)", "id": "NetworkPath", "name": "NetworkPath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid server overload. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Number of copied Windows small memory dump files", "id": "NumberOfSmallDumps", "name": "NumberOfSmallDumps", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Output folder created in network shared folder provided as an input parameter", "id": "OutputNetworkPath", "name": "OutputNetworkPath", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Copy-WindowsSmallMemoryDumpFiles.ps1", "script": ""}}}