{"id": "Get_Gpo_Startup_Impact_windows", "name": "Get Gpo Startup Impact", "description": "Obtains from Windows Event Log a wide range of information about user/machine GPOs applied during user logon/device startup. The script is designed for Windows 7 and 10.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Status of last user GPOs applied during user logon", "id": "UserGpoSuccessfullyApplied", "name": "UserGpoSuccessfullyApplied", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Duration time necessary for the device to connect to Domain Controller during user logon", "id": "DcConnectionTime", "name": "DcConnectionTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Domain Controller DNS name and IP used during user logon", "id": "DcInformation", "name": "DcInformation", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Duration time necessary for the device to apply all user policies", "id": "TotalUserGpoAppliedTime", "name": "TotalUserGpoAppliedTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of all user GPOs categories applied on the device", "id": "UserGpoCategories", "name": "UserGpoCategories", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Duration time necessary for the device to connect to the domain controller, download user policies and apply them", "id": "UserTotalGpoProcessingTime", "name": "UserTotalGpoProcessingTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of last computer GPOs applied during device startup", "id": "ComputerGpoSuccessfullyApplied", "name": "ComputerGpoSuccessfullyApplied", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Duration time necessary for device to apply all computer policies", "id": "TotalComputerGpoAppliedTime", "name": "TotalComputerGpoAppliedTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of all device GPOs categories applied on the device", "id": "ComputerGpoCategories", "name": "ComputerGpoCategories", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Duration time device needed to connect to the domain controller, download computer policies, apply them and run startup scripts", "id": "ComputerTotalGpoProcessingTime", "name": "ComputerTotalGpoProcessingTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-GpoStartupImpact.ps1", "script": ""}}}