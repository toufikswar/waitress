{"id": "Get_Multiple_Batteries_Status_windows", "name": "Get Multiple Batteries Status", "description": "Returns the health status of the batteries installed on the laptop, in terms of capacity that they can still hold. It also retrieves the currently active power plan. Useful for identifying the batteries to be replaced and optimize the power settings of the devices.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Health ratio for battery 1, expressed as a percentage", "id": "Battery1Health", "name": "Battery1Health", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Initial capacity for battery 1, in milliamp hour (mAh)", "id": "Battery1DesignedCapacity", "name": "Battery1DesignedCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Current full charge capacity for battery 1, in milliamp hour (mAh)", "id": "Battery1FullChargeCapacity", "name": "Battery1FullChargeCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of charge cycles the battery 1 has so far", "id": "Battery1CycleCount", "name": "Battery1CycleCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Health ratio for battery 2, expressed as a percentage", "id": "Battery2Health", "name": "Battery2Health", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Initial capacity for battery 2, in milliamp hour (mAh)", "id": "Battery2DesignedCapacity", "name": "Battery2DesignedCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Current full charge capacity for battery 2, in milliamp hour (mAh)", "id": "Battery2FullChargeCapacity", "name": "Battery2FullChargeCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of charge cycles the battery 2 has so far", "id": "Battery2CycleCount", "name": "Battery2CycleCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Estimated life time with one full charge. It will be 0 on Windows 7 devices", "id": "EstimatedBatteryLife", "name": "EstimatedBatteryLife", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The power plan which is currently active on the device. It will display \"Custom\" if the power plan is not any of the default ones (Balanced, High performance, Power saving) and it will display \"Unknown\" in the case the information could not be retrieved", "id": "PowerPlan", "name": "PowerPlan", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MultipleBatteriesStatus.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KT2J0YWlucyBiYXR0ZXJ5IGhlYWx0aCBzdGF0dXMgZm9yIGRldmljZXMgd2l0aCAyIGJhdHRlcmllcy4NCg0KLkRFU0NSSVBUSU9ODQpSZXR1cm5zIHRoZSBoZWFsdGggc3RhdHVzIG9mIHRoZSBiYXR0ZXJpZXMgaW5zdGFsbGVkIG9uIHRoZSBsYXB0b3AsIGluIHRlcm1zIG9mIGNhcGFjaXR5IHRoYXQgdGhleSBjYW4gc3RpbGwgaG9sZC4gSXQgYWxzbyByZXRyaWV2ZXMgdGhlIGN1cnJlbnRseSBhY3RpdmUgcG93ZXIgcGxhbi4gVXNlZnVsIGZvciBpZGVudGlmeWluZyB0aGUgYmF0dGVyaWVzIHRvIGJlIHJlcGxhY2VkIGFuZCBvcHRpbWl6ZSB0aGUgcG93ZXIgc2V0dGluZ3Mgb2YgdGhlIGRldmljZXMuDQoNCi5GVU5DVElPTkFMSVRZDQpPbi1kZW1hbmQNCg0KLk9VVFBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIEJhdHRlcnkxSGVhbHRoICAgICAgICAgICAgICAgICAgUmF0aW8gICAgICAgICAgIEhlYWx0aCByYXRpbyBmb3IgYmF0dGVyeSAxLCBleHByZXNzZWQgYXMgYSBwZXJjZW50YWdlDQoyICAgQmF0dGVyeTFEZXNpZ25lZENhcGFjaXR5ICAgICAgICBJbnQgICAgICAgICAgICAgSW5pdGlhbCBjYXBhY2l0eSBmb3IgYmF0dGVyeSAxLCBpbiBtaWxsaWFtcCBob3VyIChtQWgpDQozICAgQmF0dGVyeTFGdWxsQ2hhcmdlQ2FwYWNpdHkgICAgICBJbnQgICAgICAgICAgICAgQ3VycmVudCBmdWxsIGNoYXJnZSBjYXBhY2l0eSBmb3IgYmF0dGVyeSAxLCBpbiBtaWxsaWFtcCBob3VyIChtQWgpDQo0ICAgQmF0dGVyeTFDeWNsZUNvdW50ICAgICAgICAgICAgICBJbnQgICAgICAgICAgICAgTnVtYmVyIG9mIGNoYXJnZSBjeWNsZXMgdGhlIGJhdHRlcnkgMSBoYXMgc28gZmFyDQo1ICAgQmF0dGVyeTJIZWFsdGggICAgICAgICAgICAgICAgICBSYXRpbyAgICAgICAgICAgSGVhbHRoIHJhdGlvIGZvciBiYXR0ZXJ5IDIsIGV4cHJlc3NlZCBhcyBhIHBlcmNlbnRhZ2UNCjYgICBCYXR0ZXJ5MkRlc2lnbmVkQ2FwYWNpdHkgICAgICAgIEludCAgICAgICAgICAgICBJbml0aWFsIGNhcGFjaXR5IGZvciBiYXR0ZXJ5IDIsIGluIG1pbGxpYW1wIGhvdXIgKG1BaCkNCjcgICBCYXR0ZXJ5MkZ1bGxDaGFyZ2VDYXBhY2l0eSAgICAgIEludCAgICAgICAgICAgICBDdXJyZW50IGZ1bGwgY2hhcmdlIGNhcGFjaXR5IGZvciBiYXR0ZXJ5IDIsIGluIG1pbGxpYW1wIGhvdXIgKG1BaCkNCjggICBCYXR0ZXJ5MkN5Y2xlQ291bnQgICAgICAgICAgICAgIEludCAgICAgICAgICAgICBOdW1iZXIgb2YgY2hhcmdlIGN5Y2xlcyB0aGUgYmF0dGVyeSAyIGhhcyBzbyBmYXINCjkgICBFc3RpbWF0ZWRCYXR0ZXJ5TGlmZSAgICAgICAgICAgIE1pbGxpc2Vjb25kICAgICBFc3RpbWF0ZWQgbGlmZSB0aW1lIHdpdGggb25lIGZ1bGwgY2hhcmdlLiBJdCB3aWxsIGJlIDAgb24gV2luZG93cyA3IGRldmljZXMNCjEwICBQb3dlclBsYW4gICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyAgICAgICAgICBUaGUgcG93ZXIgcGxhbiB3aGljaCBpcyBjdXJyZW50bHkgYWN0aXZlIG9uIHRoZSBkZXZpY2UuIEl0IHdpbGwgZGlzcGxheSAiQ3VzdG9tIiBpZiB0aGUgcG93ZXIgcGxhbiBpcyBub3QgYW55IG9mIHRoZSBkZWZhdWx0IG9uZXMgKEJhbGFuY2VkLCBIaWdoIHBlcmZvcm1hbmNlLCBQb3dlciBzYXZpbmcpIGFuZCBpdCB3aWxsIGRpc3BsYXkgIlVua25vd24iIGluIHRoZSBjYXNlIHRoZSBpbmZvcm1hdGlvbiBjb3VsZCBub3QgYmUgcmV0cmlldmVkDQoNCi5SRVNUUklDVElPTlMNCi0gSW4gdGhlIGNhc2UgdGhlIGRldmljZSBoYXMgb25seSBvbmUgYmF0dGVyeSwgb3V0cHV0cyBmb3IgdGhlIHNlY29uZCBvbmUgd2lsbCBiZSB0aGUgZGVmYXVsdCB2YWx1ZXMgKGVtcHR5IG9yIDApLg0KLSBVcCB0byAyIGJhdHRlcmllcyBhcmUgc3VwcG9ydGVkIGZvciBkYXRhIHJldHJpZXZhbC4NCi0gVGhlICJFc3RpbWF0ZWQgQmF0dGVyeSBMaWZlIiB2YWx1ZSBjYW4gb25seSBiZSBvYnRhaW5lZCBmb3IgV2luZG93cyAxMCBkZXZpY2VzLiBPbiBXaW5kb3dzIDcgZGV2aWNlcywgdGhpcyB2YWx1ZSB3aWxsIGJlIDAuDQotIFRoZSBiYXR0ZXJ5IGN5Y2xlIGNvdW50IG1heSBiZSAwIHNvbWV0aW1lcywgZXZlbiB0aG91Z2ggdGhlIGJhdHRlcnkgaGFzIGJlZW4gcmVjaGFyZ2VkIHNldmVyYWwgdGltZXMgYWxyZWFkeS4NCg0KLk5PVEVTDQpDb250ZXh0OiAgICAgICAgICAgIExvY2FsU3lzdGVtDQpWZXJzaW9uOiAgICAgICAgICAgIDEuMC4wLjAgLSBJbml0aWFsIHJlbGVhc2UNCkxhc3QgR2VuZXJhdGVkOiAgICAgMTcgQXByIDIwMjAgLSAxMDowMDo0NQ0KQ29weXJpZ2h0IChDKSAyMDIwIE5leHRoaW5rIFNBLCBTd2l0emVybGFuZA0KIz4NCg0KIyBFbmQgb2YgcGFyYW1ldGVycyBkZWZpbml0aW9uDQoNCiMNCiMgQ29uc3RhbnRzIGRlZmluaXRpb24NCiMNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTE9DQUxfU1lTVEVNX0lERU5USVRZJyBgDQogICAgLVZhbHVlICdTLTEtNS0xOCcgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ1JFTU9URV9BQ1RJT05fRExMX1BBVEgnIGANCiAgICAtVmFsdWUgIiRlbnY6TkVYVEhJTktcUmVtb3RlQWN0aW9uc1xueHRyZW1vdGVhY3Rpb25zLmRsbCIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ1JFUE9SVF9GSUxFX1BBVEgnIGANCiAgICAtVmFsdWUgKEpvaW4tUGF0aCAtUGF0aCAkZW52OlRFTVAgLUNoaWxkUGF0aCAnYmF0dGVyeS1yZXBvcnQueG1sJykgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdQT1dFUkNGR19FWEUnIGANCiAgICAtVmFsdWUgIiRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxwb3dlcmNmZy5leGUiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1BPV0VSQ0ZHX0JBVFRFUllfSU5GT19BUkdVTUVOVFMnIGANCiAgICAtVmFsdWUgIi9CQVRURVJZUkVQT1JUIC9PVVRQVVQgYCIkUkVQT1JUX0ZJTEVfUEFUSGAiIC9YTUwiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1BPV0VSQ0ZHX1BPV0VSX1BMQU5fQVJHVU1FTlQnIGANCiAgICAtVmFsdWUgJy9HRVRBQ1RJVkVTQ0hFTUUnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUk9PVF9XTUlfTkFNRVNQQUNFJyBgDQogICAgLVZhbHVlICdyb290XFdNSScgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdSVU5USU1FX1JFR0VYJyBgDQogICAgLVZhbHVlICdQVChcZHsxLDJ9KUgoXGR7MSwyfSlNKFxkezEsMn0pUycgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUE9XRVJfUExBTl9HVUlEX1JFR0VYJyBgDQogICAgLVZhbHVlICdbYS1mQS1GLTAtOV17OH0tW2EtZkEtRi0wLTldezR9LVthLWZBLUYtMC05XXs0fS1bYS1mQS1GLTAtOV17NH0tW2EtZkEtRi0wLTldezEyfScgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdERUZBVUxUX1BPV0VSX1BMQU5TJyBgDQogICAgLVZhbHVlIEB7JzM4MWI0MjIyLWY2OTQtNDFmMC05Njg1LWZmNWJiMjYwZGYyZScgPSAnQmFsYW5jZWQnDQogICAgICAgICAgICAgJzhjNWU3ZmRhLWU4YmYtNGE5Ni05YTg1LWE2ZTIzYThjNjM1YycgPSAnSGlnaCBwZXJmb3JtYW5jZScNCiAgICAgICAgICAgICAnYTE4NDEzMDgtMzU0MS00ZmFiLWJjODEtZjcxNTU2ZjIwYjRhJyA9ICdQb3dlciBzYXZlcid9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCiMNCiMgSW52b2tlIG1haW4NCiMNCmZ1bmN0aW9uIEludm9rZS1NYWluIHsNCiAgICAkZXhpdENvZGUgPSAwDQogICAgW2hhc2h0YWJsZV0kYmF0dGVyaWVzT3V0cHV0ID0gSW5pdGlhbGl6ZS1CYXR0ZXJpZXNPdXRwdXQNCg0KICAgIHRyeSB7DQogICAgICAgIEFkZC1OZXh0aGlua1JlbW90ZUFjdGlvbkRMTA0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtDQogICAgICAgIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uDQoNCiAgICAgICAgVGVzdC1CYXR0ZXJ5V21pDQogICAgICAgIFVwZGF0ZS1CYXR0ZXJpZXNPdXRwdXQgLU91dHB1dCAkYmF0dGVyaWVzT3V0cHV0DQogICAgfSBjYXRjaCB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJF8NCiAgICAgICAgJGV4aXRDb2RlID0gMQ0KICAgIH0gZmluYWxseSB7DQogICAgICAgIFVwZGF0ZS1FbmdpbmVPdXRwdXRWYXJpYWJsZXMgLU91dHB1dCAkYmF0dGVyaWVzT3V0cHV0DQogICAgfQ0KDQogICAgcmV0dXJuICRleGl0Q29kZQ0KfQ0KDQojDQojIFRlbXBsYXRlIGZ1bmN0aW9ucw0KIw0KZnVuY3Rpb24gQWRkLU5leHRoaW5rUmVtb3RlQWN0aW9uRExMIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAnTmV4dGhpbmsgUmVtb3RlIEFjdGlvbiBETEwgbm90IGZvdW5kLiAnDQogICAgfQ0KICAgIEFkZC1UeXBlIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUnVubmluZ0FzTG9jYWxTeXN0ZW0gew0KICAgICRjdXJyZW50SWRlbnRpdHkgPSBHZXQtQ3VycmVudElkZW50aXR5DQogICAgaWYgKCRjdXJyZW50SWRlbnRpdHkgLW5lICRMT0NBTF9TWVNURU1fSURFTlRJVFkpIHsNCiAgICAgICAgdGhyb3cgJ1RoaXMgc2NyaXB0IG11c3QgYmUgcnVuIGFzIExvY2FsU3lzdGVtLiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ3VycmVudElkZW50aXR5IHsNCiAgICByZXR1cm4gW3NlY3VyaXR5LnByaW5jaXBhbC53aW5kb3dzaWRlbnRpdHldOjpHZXRDdXJyZW50KCkuVXNlci5Ub1N0cmluZygpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uIHsNCiAgICAkT1NWZXJzaW9uID0gKEdldC1PU1ZlcnNpb24pIC1hcyBbdmVyc2lvbl0NCiAgICBpZiAoLW5vdCAoJE9TVmVyc2lvbikpIHsNCiAgICAgICAgdGhyb3cgJ1RoaXMgc2NyaXB0IGNvdWxkIG5vdCByZXR1cm4gT1MgdmVyc2lvbi4gJw0KICAgIH0NCiAgICBpZiAoKCRPU1ZlcnNpb24uTWFqb3IgLW5lIDYgLW9yICRPU1ZlcnNpb24uTWlub3IgLW5lIDEpIC1hbmQgYA0KICAgICAgICAoJE9TVmVyc2lvbi5NYWpvciAtbmUgMTApKSB7DQogICAgICAgIHRocm93ICdUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyA3IGFuZCAxMCBvbmx5LiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCiAgICByZXR1cm4gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfT3BlcmF0aW5nU3lzdGVtIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsdGVyICdQcm9kdWN0VHlwZSA9IDEnIC1FcnJvckFjdGlvbiBTdG9wIHwgYA0KICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgVmVyc2lvbg0KfQ0KDQpmdW5jdGlvbiBXcml0ZS1TdGF0dXNNZXNzYWdlIChbcHNvYmplY3RdJE1lc3NhZ2UpIHsNCiAgICAkZXhjZXB0aW9uID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJHZlcnNpb24gPSBHZXQtU2NyaXB0VmVyc2lvbg0KICAgICAgICBpZigtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCR2ZXJzaW9uKSkgew0KICAgICAgICAgICAgJHZlcnNpb24gPSAiVmVyc2lvbjogJHZlcnNpb24uICINCiAgICAgICAgfQ0KDQogICAgICAgICRlcnJvck1lc3NhZ2UgPSAkdmVyc2lvbiArICJMaW5lICckKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpJy4gIg0KICAgIH0NCg0KICAgICRob3N0LnVpLldyaXRlRXJyb3JMaW5lKCRlcnJvck1lc3NhZ2UgKyAkZXhjZXB0aW9uKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtU2NyaXB0VmVyc2lvbiB7DQogICAgJHNjcmlwdENvbnRlbnQgPSBHZXQtQ29udGVudCAkTXlJbnZvY2F0aW9uLlNjcmlwdE5hbWUgfCBPdXQtU3RyaW5nDQogICAgaWYgKCRzY3JpcHRDb250ZW50IC1ub3RtYXRjaCAnPCNbXHJcbl17Mn0uU1lOT1BTSVNbXlwjXD5dKiguTk9URVNbXlwjXD5dKilcIz4nKSB7IHJldHVybiB9DQoNCiAgICAkaGVscEJsb2NrID0gJE1hdGNoZXNbMV0uU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkNCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRoZWxwQmxvY2spIHsNCiAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCAnVmVyc2lvbjonKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpbmUuU3BsaXQoJzonKVsxXS5TcGxpdCgnLScpWzBdLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtRmlsZSAoW3N0cmluZ10kUGF0aCkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGF0aCkgLW9yIGANCiAgICAgICAgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCkpKSB7IHJldHVybiB9DQoNCiAgICBSZW1vdmUtSXRlbSAtUGF0aCAkUGF0aCAtUmVjdXJzZSAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCn0NCg0KZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MgKFtzdHJpbmddJEZpbGVQYXRoLCBbc3RyaW5nXSRBcmd1bWVudHMpIHsNCiAgICAkb3V0cHV0ID0gQHtFeGl0Q29kZSA9IC0xDQogICAgICAgICAgICAgICAgU3RkT3V0ID0gJG51bGwNCiAgICAgICAgICAgICAgICBTdGRFcnIgPSAkbnVsbH0NCiAgICAkcHJvY2Vzc0luZm8gPSBOZXctb2JqZWN0IC1UeXBlTmFtZSBkaWFnbm9zdGljcy5wcm9jZXNzc3RhcnRpbmZvDQogICAgJHByb2Nlc3NJbmZvLkNyZWF0ZU5vV2luZG93ID0gJHRydWUNCiAgICAkcHJvY2Vzc0luZm8uVXNlU2hlbGxFeGVjdXRlID0gJGZhbHNlDQogICAgJHByb2Nlc3NJbmZvLlJlZGlyZWN0U3RhbmRhcmRPdXRwdXQgPSAkdHJ1ZQ0KICAgICRwcm9jZXNzSW5mby5SZWRpcmVjdFN0YW5kYXJkRXJyb3IgPSAkdHJ1ZQ0KICAgICRwcm9jZXNzSW5mby5GaWxlTmFtZSA9ICRGaWxlUGF0aA0KICAgICRwcm9jZXNzSW5mby5Bcmd1bWVudHMgPSAkQXJndW1lbnRzDQogICAgJHByb2Nlc3NJbmZvLldvcmtpbmdEaXJlY3RvcnkgPSBTcGxpdC1QYXRoICRGaWxlUGF0aCAtUGFyZW50DQogICAgJHByb2Nlc3MgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBkaWFnbm9zdGljcy5wcm9jZXNzDQogICAgJHByb2Nlc3MuU3RhcnRJbmZvID0gJHByb2Nlc3NJbmZvDQoNCiAgICB0cnkgew0KICAgICAgICBbdm9pZF0kcHJvY2Vzcy5TdGFydCgpDQogICAgICAgICRvdXRwdXQuU3RkT3V0ID0gJHByb2Nlc3MuU3RhbmRhcmRPdXRwdXQuUmVhZFRvRW5kKCkNCiAgICAgICAgJG91dHB1dC5TdGRFcnIgPSAkcHJvY2Vzcy5TdGFuZGFyZEVycm9yLlJlYWRUb0VuZCgpDQogICAgICAgICRwcm9jZXNzLldhaXRGb3JFeGl0KCkNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIickRmlsZVBhdGgnIGV4ZWN1dGlvbiBmYWlsZWQuICINCiAgICB9IGZpbmFsbHkgew0KICAgICAgICAkb3V0cHV0LkV4aXRDb2RlID0gJHByb2Nlc3MuRXhpdENvZGUNCiAgICAgICAgJHByb2Nlc3MuRGlzcG9zZSgpDQogICAgfQ0KDQogICAgcmV0dXJuICRvdXRwdXQNCn0NCg0KIw0KIyBCYXR0ZXJpZXMgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gSW5pdGlhbGl6ZS1CYXR0ZXJpZXNPdXRwdXQgew0KICAgIHJldHVybiAgQHtCYXR0ZXJ5MUhlYWx0aCA9IFtmbG9hdF0wDQogICAgICAgICAgICAgIEJhdHRlcnkxRGVzaWduZWRDYXBhY2l0eSA9IDANCiAgICAgICAgICAgICAgQmF0dGVyeTFGdWxsQ2hhcmdlQ2FwYWNpdHkgPSAwDQogICAgICAgICAgICAgIEJhdHRlcnkxQ3ljbGVDb3VudCA9IDANCiAgICAgICAgICAgICAgQmF0dGVyeTJIZWFsdGggPSBbZmxvYXRdMA0KICAgICAgICAgICAgICBCYXR0ZXJ5MkRlc2lnbmVkQ2FwYWNpdHkgPSAwDQogICAgICAgICAgICAgIEJhdHRlcnkyRnVsbENoYXJnZUNhcGFjaXR5ID0gMA0KICAgICAgICAgICAgICBCYXR0ZXJ5MkN5Y2xlQ291bnQgPSAwDQogICAgICAgICAgICAgIEVzdGltYXRlZEJhdHRlcnlMaWZlID0gMCAtYXMgW3RpbWVzcGFuXQ0KICAgICAgICAgICAgICBQb3dlclBsYW4gPSAnLSd9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtQmF0dGVyeVdtaSB7DQogICAgaWYgKCRudWxsIC1lcSAoR2V0LVdtaU9iamVjdCAtQ2xhc3MgJ1dpbjMyX0JhdHRlcnknIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICB0aHJvdyAnVGhlIGJhdHRlcnkgb24gdGhpcyBkZXZpY2UgY2Fubm90IGJlIGRldGVjdGVkLiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBVcGRhdGUtQmF0dGVyaWVzT3V0cHV0IChbaGFzaHRhYmxlXSRPdXRwdXQpIHsNCiAgICBbaGFzaHRhYmxlW11dJGJhdHRlcmllc0RhdGEgPSBAKEdldC1CYXR0ZXJpZXNEYXRhKQ0KDQogICAgVXBkYXRlLUJhdHRlcnkgLU91dHB1dCAkT3V0cHV0IC1CYXR0ZXJpZXNEYXRhICRiYXR0ZXJpZXNEYXRhIC1CYXR0ZXJ5TnVtYmVyIDENCiAgICBpZiAoJGJhdHRlcmllc0RhdGEuTGVuZ3RoIC1ndCAxKSB7DQogICAgICAgIFVwZGF0ZS1CYXR0ZXJ5IC1PdXRwdXQgJE91dHB1dCAtQmF0dGVyaWVzRGF0YSAkYmF0dGVyaWVzRGF0YSAtQmF0dGVyeU51bWJlciAyDQogICAgfQ0KDQogICAgJE91dHB1dC5Qb3dlclBsYW4gPSBHZXQtQ3VycmVudFBvd2VyUGxhbg0KICAgICRPdXRwdXQuRXN0aW1hdGVkQmF0dGVyeUxpZmUgPSAkYmF0dGVyaWVzRGF0YVswXS5Fc3RpbWF0ZWRCYXR0ZXJ5TGlmZQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQmF0dGVyaWVzRGF0YSB7DQogICAgJG9zVmVyc2lvbiA9IChHZXQtT1NWZXJzaW9uKSAtYXMgW3ZlcnNpb25dDQogICAgaWYgKCRvc1ZlcnNpb24uTWFqb3IgLWVxIDEwKSB7IHJldHVybiBHZXQtQmF0dGVyaWVzRGF0YUZyb21Qb3dlckNmZyB9DQogICAgcmV0dXJuIEdldC1CYXR0ZXJpZXNEYXRhRnJvbVdtaQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQmF0dGVyaWVzRGF0YUZyb21Qb3dlckNmZyB7DQogICAgW2hhc2h0YWJsZVtdXSRiYXR0ZXJpZXNEYXRhID0gQCgpDQoNCiAgICB0cnkgew0KICAgICAgICBbeG1sXSRiYXR0ZXJ5UmVwb3J0WG1sID0gR2V0LUJhdHRlcnlSZXBvcnRDb250ZW50DQoNCiAgICAgICAgJGVzdGltYXRlZExpZmUgPSBHZXQtRXN0aW1hdGVkQmF0dGVyeUxpZmUgLUNvbnRlbnRYbWwgJGJhdHRlcnlSZXBvcnRYbWwNCg0KICAgICAgICBmb3JlYWNoICgkYmF0dGVyeU9iamVjdCBpbiAkYmF0dGVyeVJlcG9ydFhtbC5CYXR0ZXJ5UmVwb3J0LkJhdHRlcmllcy5CYXR0ZXJ5KSB7DQogICAgICAgICAgICAkYmF0dGVyaWVzRGF0YSArPSBAe0Rlc2lnbkNhcGFjaXR5ID0gJGJhdHRlcnlPYmplY3QuRGVzaWduQ2FwYWNpdHkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnVsbENoYXJnZUNhcGFjaXR5ID0gJGJhdHRlcnlPYmplY3QuRnVsbENoYXJnZUNhcGFjaXR5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5Y2xlQ291bnQgPSAkYmF0dGVyeU9iamVjdC5DeWNsZUNvdW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzdGltYXRlZEJhdHRlcnlMaWZlID0gJGVzdGltYXRlZExpZmV9DQogICAgICAgIH0NCiAgICB9IGZpbmFsbHkgew0KICAgICAgICBSZW1vdmUtRmlsZSAtUGF0aCAkUkVQT1JUX0ZJTEVfUEFUSA0KICAgIH0NCg0KICAgIHJldHVybiAkYmF0dGVyaWVzRGF0YQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQmF0dGVyeVJlcG9ydENvbnRlbnQgew0KICAgIFtoYXNodGFibGVdJG91dHB1dCA9IEludm9rZS1Qcm9jZXNzIC1GaWxlUGF0aCAkUE9XRVJDRkdfRVhFIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQXJndW1lbnRzICRQT1dFUkNGR19CQVRURVJZX0lORk9fQVJHVU1FTlRTDQogICAgaWYgKCRvdXRwdXQuRXhpdENvZGUgLW5lIDApIHsNCiAgICAgICAgdGhyb3cgIlRoZXJlIHdhcyBhbiBlcnJvciBleGVjdXRpbmcgJyRQT1dFUkNGR19FWEUnIHdpdGggYXJndW1lbnRzICckUE9XRVJDRkdfQkFUVEVSWV9JTkZPX0FSR1VNRU5UUycuICINCiAgICB9DQoNCiAgICByZXR1cm4gKEdldC1Db250ZW50IC1QYXRoICRSRVBPUlRfRklMRV9QQVRIKSAtYXMgW3htbF0NCn0NCg0KZnVuY3Rpb24gR2V0LUVzdGltYXRlZEJhdHRlcnlMaWZlIChbeG1sXSRDb250ZW50WG1sKSB7DQogICAgJGJhdHRlcnlMaWZlID0gJENvbnRlbnRYbWwuQmF0dGVyeVJlcG9ydC5SdW50aW1lRXN0aW1hdGVzLkZ1bGxDaGFyZ2VDYXBhY2l0eS5BY3RpdmVSdW50aW1lDQogICAgaWYgKCRiYXR0ZXJ5TGlmZSAtbWF0Y2ggJFJVTlRJTUVfUkVHRVgpIHsNCiAgICAgICAgJGhvdXIgPSAkTWF0Y2hlc1sxXQ0KICAgICAgICAkbWludXRlcyA9ICRNYXRjaGVzWzJdDQogICAgICAgICRzZWNvbmRzID0gJE1hdGNoZXNbM10NCiAgICAgICAgcmV0dXJuICIkaG91cmA6JG1pbnV0ZXNgOiRzZWNvbmRzIiAtYXMgW3RpbWVzcGFuXQ0KICAgIH0NCg0KICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgIkVzdGltYXRlZCBiYXR0ZXJ5IGxpZmUgbWF5IGJlIHVucmVsaWFibGUuIFJldHJpZXZlZCB2YWx1ZSAnJGJhdHRlcnlMaWZlJyBkb2VzIG5vdCBoYXZlIHRoZSBleHBlY3RlZCBmb3JtYXQuICINCiAgICByZXR1cm4gMCAtYXMgW3RpbWVzcGFuXQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQmF0dGVyaWVzRGF0YUZyb21XbWkgew0KICAgIFtoYXNodGFibGVbXV0kYmF0dGVyaWVzRGF0YSA9IEAoKQ0KDQogICAgW2ludFtdXSRkZXNpZ25DYXBhY2l0aWVzID0gQChHZXQtV21pQ2xhc3NQcm9wZXJ0eSAtTmFtZXNwYWNlICRST09UX1dNSV9OQU1FU1BBQ0UgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNsYXNzICdCYXR0ZXJ5U3RhdGljRGF0YScgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb3BlcnR5ICdEZXNpZ25lZENhcGFjaXR5JykNCiAgICBbaW50W11dJGZ1bGxDaGFyZ2VDYXBhY2l0aWVzID0gQChHZXQtV21pQ2xhc3NQcm9wZXJ0eSAtTmFtZXNwYWNlICRST09UX1dNSV9OQU1FU1BBQ0UgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1DbGFzcyAnQmF0dGVyeUZ1bGxDaGFyZ2VkQ2FwYWNpdHknIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUHJvcGVydHkgJ0Z1bGxDaGFyZ2VkQ2FwYWNpdHknKQ0KICAgIFtpbnRbXV0kY3ljbGVDb3VudHMgPSBAKEdldC1XbWlDbGFzc1Byb3BlcnR5IC1OYW1lc3BhY2UgJFJPT1RfV01JX05BTUVTUEFDRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNsYXNzICdCYXR0ZXJ5Q3ljbGVDb3VudCcgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Qcm9wZXJ0eSAnQ3ljbGVDb3VudCcpDQoNCiAgICAkY291bnQgPSAkZGVzaWduQ2FwYWNpdGllcy5MZW5ndGgNCiAgICBpZiAoJGNvdW50IC1uZSAkZnVsbENoYXJnZUNhcGFjaXRpZXMuTGVuZ3RoIC1vciAkY291bnQgLW5lICRjeWNsZUNvdW50cy5MZW5ndGgpIHsNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAtTWVzc2FnZSAnQmF0dGVyeSBkYXRhIG1heSBub3QgYmUgcmVsaWFibGUgZHVlIHRvIGxhY2sgb2YgaW5mb3JtYXRpb24gZnJvbSBXTUkuICcNCiAgICB9DQoNCiAgICBmb3IgKCRpID0gMDsgJGkgLWx0ICRjb3VudDsgJGkrKykgew0KICAgICAgICAkZGVzaWduQ2FwYWNpdHkgPSAkKGlmICgkaSAtbHQgJGRlc2lnbkNhcGFjaXRpZXMuTGVuZ3RoKSB7ICRkZXNpZ25DYXBhY2l0aWVzWyRpXSB9IGVsc2UgeyAwIH0pDQogICAgICAgICRmdWxsQ2hhcmdlQ2FwYWNpdHkgPSAkKGlmICgkaSAtbHQgJGZ1bGxDaGFyZ2VDYXBhY2l0aWVzLkxlbmd0aCkgeyAkZnVsbENoYXJnZUNhcGFjaXRpZXNbJGldIH0gZWxzZSB7IDAgfSkNCiAgICAgICAgJGN5Y2xlQ291bnQgPSAkKGlmICgkaSAtbHQgJGN5Y2xlQ291bnRzLkxlbmd0aCkgeyAkY3ljbGVDb3VudHNbJGldIH0gZWxzZSB7IDAgfSkNCg0KICAgICAgICAkYmF0dGVyaWVzRGF0YSArPSBAe0Rlc2lnbkNhcGFjaXR5ID0gJGRlc2lnbkNhcGFjaXR5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRnVsbENoYXJnZUNhcGFjaXR5ID0gJGZ1bGxDaGFyZ2VDYXBhY2l0eQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN5Y2xlQ291bnQgPSAkY3ljbGVDb3VudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVzdGltYXRlZEJhdHRlcnlMaWZlID0gMCAtYXMgW3RpbWVzcGFuXX0NCiAgICB9DQoNCiAgICByZXR1cm4gJGJhdHRlcmllc0RhdGENCn0NCg0KZnVuY3Rpb24gR2V0LVdtaUNsYXNzUHJvcGVydHkgKFtzdHJpbmddJE5hbWVzcGFjZSwgW3N0cmluZ10kQ2xhc3MsIFtzdHJpbmddJFByb3BlcnR5KSB7DQogICAgdHJ5IHsNCiAgICAgICAgcmV0dXJuIEdldC1XbWlPYmplY3QgLU5hbWVzcGFjZSAkTmFtZXNwYWNlIC1DbGFzcyAkQ2xhc3MgfA0KICAgICAgICAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICRQcm9wZXJ0eSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICJDb3VsZCBub3Qgb2J0YWluICRQcm9wZXJ0eSBwcm9wZXJ0eSBmcm9tICRDbGFzcyBjbGFzcyBhdCAkTmFtZXNwYWNlIE5hbWVzcGFjZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVXBkYXRlLUJhdHRlcnkgKFtoYXNodGFibGVdJE91dHB1dCwgW2hhc2h0YWJsZVtdXSRCYXR0ZXJpZXNEYXRhLCBbaW50XSRCYXR0ZXJ5TnVtYmVyKSB7DQogICAgJGJhdHRlcmllc0RhdGFJbmRleCA9ICRCYXR0ZXJ5TnVtYmVyIC0gMQ0KDQogICAgaWYgKCRCYXR0ZXJ5TnVtYmVyIC1sdCAxKSB7DQogICAgICAgIHRocm93ICdCYXR0ZXJ5TnVtYmVyIGNhbm5vdCBiZSAwIG5vciBuZWdhdGl2ZS4gJw0KICAgIH0NCg0KICAgIGlmICgkQmF0dGVyeU51bWJlciAtZ3QgJEJhdHRlcmllc0RhdGEuTGVuZ3RoKSB7DQogICAgICAgIHRocm93ICJJbmZvcm1hdGlvbiBhYm91dCBiYXR0ZXJ5ICRCYXR0ZXJ5TnVtYmVyIGlzIG5vdCBwcmVzZW50LiAiDQogICAgfQ0KDQogICAgJE91dHB1dFsiQmF0dGVyeSQoJEJhdHRlcnlOdW1iZXIpRGVzaWduZWRDYXBhY2l0eSJdID0gJEJhdHRlcmllc0RhdGFbJGJhdHRlcmllc0RhdGFJbmRleF0uRGVzaWduQ2FwYWNpdHkgLWFzIFtpbnRdDQogICAgJE91dHB1dFsiQmF0dGVyeSQoJEJhdHRlcnlOdW1iZXIpRnVsbENoYXJnZUNhcGFjaXR5Il0gPSAkQmF0dGVyaWVzRGF0YVskYmF0dGVyaWVzRGF0YUluZGV4XS5GdWxsQ2hhcmdlQ2FwYWNpdHkgLWFzIFtpbnRdDQogICAgJE91dHB1dFsiQmF0dGVyeSQoJEJhdHRlcnlOdW1iZXIpQ3ljbGVDb3VudCJdID0gJEJhdHRlcmllc0RhdGFbJGJhdHRlcmllc0RhdGFJbmRleF0uQ3ljbGVDb3VudCAtYXMgW2ludF0NCg0KICAgIFtmbG9hdF0kaGVhbHRoID0gR2V0LUJhdHRlcnlIZWFsdGggLURlc2lnbmVkQ2FwYWNpdHkgJE91dHB1dFsiQmF0dGVyeSQoJEJhdHRlcnlOdW1iZXIpRGVzaWduZWRDYXBhY2l0eSJdIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1GdWxsQ2hhcmdlZENhcGFjaXR5ICRPdXRwdXRbIkJhdHRlcnkkKCRCYXR0ZXJ5TnVtYmVyKUZ1bGxDaGFyZ2VDYXBhY2l0eSJdDQogICAgJE91dHB1dFsiQmF0dGVyeSQoJEJhdHRlcnlOdW1iZXIpSGVhbHRoIl0gPSAkaGVhbHRoDQp9DQoNCmZ1bmN0aW9uIEdldC1CYXR0ZXJ5SGVhbHRoIChbaW50XSREZXNpZ25lZENhcGFjaXR5LCBbaW50XSRGdWxsQ2hhcmdlZENhcGFjaXR5KSB7DQogICAgaWYgKCREZXNpZ25lZENhcGFjaXR5IC1lcSAwKSB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJ0JhdHRlcnkgaGVhbHRoIG1heSBiZSB1bnJlbGlhYmxlLiBEZXNpZ25lZCBjYXBhY2l0eSBkYXRhIGlzIG1pc3NpbmcuICcNCiAgICAgICAgcmV0dXJuIDANCiAgICB9DQoNCiAgICBpZiAoJEZ1bGxDaGFyZ2VkQ2FwYWNpdHkgLWd0ICREZXNpZ25lZENhcGFjaXR5KSB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJ0JhdHRlcnkgaGVhbHRoIG1heSBiZSB1bnJlbGlhYmxlLiBSZXRyaWV2ZWQgY2FwYWNpdHkgZXhjZWVkcyBtYXhpbXVtIGNhcGFjaXR5LiAnDQogICAgICAgIHJldHVybiAxLjANCiAgICB9DQoNCiAgICBbZmxvYXRdJGJhdHRlcnlIZWFsdGggPSAkRnVsbENoYXJnZWRDYXBhY2l0eSAvICREZXNpZ25lZENhcGFjaXR5DQogICAgaWYgKCRiYXR0ZXJ5SGVhbHRoIC1sdCAwKSB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJ0JhdHRlcnkgaGVhbHRoIG1heSBiZSB1bnJlbGlhYmxlLiBTb21lIHJldHJpZXZlZCBkYXRhIGlzIG5vdCBjb3JyZWN0LiAnDQogICAgICAgIHJldHVybiAwDQogICAgfQ0KDQogICAgcmV0dXJuICRiYXR0ZXJ5SGVhbHRoDQp9DQoNCmZ1bmN0aW9uIEdldC1DdXJyZW50UG93ZXJQbGFuIHsNCiAgICBbaGFzaHRhYmxlXSRvdXRwdXQgPSBJbnZva2UtUHJvY2VzcyAtRmlsZVBhdGggJFBPV0VSQ0ZHX0VYRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUFyZ3VtZW50cyAkUE9XRVJDRkdfUE9XRVJfUExBTl9BUkdVTUVOVA0KICAgIGlmICgkb3V0cHV0LlN0ZE91dCAtbWF0Y2ggJFBPV0VSX1BMQU5fR1VJRF9SRUdFWCkgew0KICAgICAgICBpZiAoJERFRkFVTFRfUE9XRVJfUExBTlMuQ29udGFpbnNLZXkoJE1hdGNoZXNbMF0pKSB7IHJldHVybiAkREVGQVVMVF9QT1dFUl9QTEFOUy4oJE1hdGNoZXNbMF0pIH0NCiAgICAgICAgcmV0dXJuICdDdXN0b20nDQogICAgfQ0KICAgIHJldHVybiAnVW5rbm93bicNCn0NCg0KIw0KIyBOZXh0aGluayBPdXRwdXQgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAoW2hhc2h0YWJsZV0kT3V0cHV0KSB7DQogICAgW254dF06OldyaXRlT3V0cHV0UmF0aW8oJ0JhdHRlcnkxSGVhbHRoJywgJE91dHB1dC5CYXR0ZXJ5MUhlYWx0aCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRVSW50MzIoJ0JhdHRlcnkxRGVzaWduZWRDYXBhY2l0eScsICRPdXRwdXQuQmF0dGVyeTFEZXNpZ25lZENhcGFjaXR5KQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignQmF0dGVyeTFGdWxsQ2hhcmdlQ2FwYWNpdHknLCAkT3V0cHV0LkJhdHRlcnkxRnVsbENoYXJnZUNhcGFjaXR5KQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignQmF0dGVyeTFDeWNsZUNvdW50JywgJE91dHB1dC5CYXR0ZXJ5MUN5Y2xlQ291bnQpDQoNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRSYXRpbygnQmF0dGVyeTJIZWFsdGgnLCAkT3V0cHV0LkJhdHRlcnkySGVhbHRoKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignQmF0dGVyeTJEZXNpZ25lZENhcGFjaXR5JywgJE91dHB1dC5CYXR0ZXJ5MkRlc2lnbmVkQ2FwYWNpdHkpDQogICAgW254dF06OldyaXRlT3V0cHV0VUludDMyKCdCYXR0ZXJ5MkZ1bGxDaGFyZ2VDYXBhY2l0eScsICRPdXRwdXQuQmF0dGVyeTJGdWxsQ2hhcmdlQ2FwYWNpdHkpDQogICAgW254dF06OldyaXRlT3V0cHV0VUludDMyKCdCYXR0ZXJ5MkN5Y2xlQ291bnQnLCAkT3V0cHV0LkJhdHRlcnkyQ3ljbGVDb3VudCkNCg0KICAgIFtueHRdOjpXcml0ZU91dHB1dER1cmF0aW9uKCdFc3RpbWF0ZWRCYXR0ZXJ5TGlmZScsICRPdXRwdXQuRXN0aW1hdGVkQmF0dGVyeUxpZmUpDQogICAgW254dF06OldyaXRlT3V0cHV0U3RyaW5nKCdQb3dlclBsYW4nLCAkT3V0cHV0LlBvd2VyUGxhbikNCn0NCg0KIw0KIyBNYWluIHNjcmlwdCBmbG93DQojDQpbZW52aXJvbm1lbnRdOjpFeGl0KChJbnZva2UtTWFpbikpDQojIFNJRyAjIEJlZ2luIHNpZ25hdHVyZSBibG9jaw0KIyBNSUlqNUFZSktvWklodmNOQVFjQ29JSWoxVENDSTlFQ0FRRXhEekFOQmdsZ2hrZ0JaUU1FQWdFRkFEQjVCZ29yDQojIEJnRUVBWUkzQWdFRW9Hc3dhVEEwQmdvckJnRUVBWUkzQWdFZU1DWUNBd0VBQUFRUUg4dzdZRmxMQ0U2M0pOTEcNCiMgS1g3elVRSUJBQUlCQUFJQkFBSUJBQUlCQURBeE1BMEdDV0NHU0FGbEF3UUNBUVVBQkNCUkszeHQvQnZHbWc5TA0KIyBGNUpBYTBEaFVHbjVPTjlGNVVKWncyeUxHR2lpUmFDQ0VUc3dnZ1BGTUlJQ3JhQURBZ0VDQWhBQ3JGd21hZ3RBDQojIG00OExlZkt1UmlWM01BMEdDU3FHU0liM0RRRUJCUVVBTUd3eEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUsNCiMgRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhLekFwQmdOVg0KIyBCQU1USWtScFoybERaWEowSUVocFoyZ2dRWE56ZFhKaGJtTmxJRVZXSUZKdmIzUWdRMEV3SGhjTk1EWXhNVEV3DQojIE1EQXdNREF3V2hjTk16RXhNVEV3TURBd01EQXdXakJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU0NCiMgUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRRA0KIyBFeUpFYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNSUlCSWpBTkJna3Foa2lHDQojIDl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4c3psYytiNzFMdmxMUzB5cHQvbGdUL0p6U1ZKdG5FcXc5V1UNCiMgTkdlaUNoeXdYMm1tUUxIRXQ3S1AwSmlrcVVGWk90UGNsTlk4MjNRNHBFck1UU1dDOTBxbFV4STQ3dk5KYlhHUg0KIyBmbU8ycTZaZnc2U0UrRTlpVWI3NHhlemJPSkxqQnVVSWtRekVLRUZWKzh0YWlSVitjZWcxdjAxeUNUMitPamhRDQojIFczY3hHNDJ6eHlSRm1xZXNiUUFVV2dTM3VoUHJVUXFZUVVFaVRtVmhoNEZCVUtaNVhJbmVHVXBYMVM3bVhSeFQNCiMgTEg2WXpSb0dGcVJvYzlBMEJCTmNvWEhUV254VjIxNWs0VGVITUZZRTVSRzBLWUFTOFhrNWlLSUNFWHduWnJlSQ0KIyB0M2p5eWdxb09Lc0taTUsvWmwyVmhNR2hKUjZIWFJwUUN5QVN6RUc3Ymd0Uk9MaEx5d0lEQVFBQm8yTXdZVEFPDQojIEJnTlZIUThCQWY4RUJBTUNBWVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVc1Q3RGFRUDQNCiMgdjBjQjFKZ21HZ2dDNzJOa0s4TXdId1lEVlIwakJCZ3dGb0FVc1Q3RGFRUDR2MGNCMUpnbUdnZ0M3Mk5rSzhNdw0KIyBEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQndhQnBmYzE1eWZQSWhtQmdoWElkc2hSL2dxWjZxL0dESjJRQkJYDQojIHdZcnpldGtSWlk0MStwNzhSYldlMlV3eFM3aVI2RU1zanJONHp0dmpVM2x4MXVVaGxBSGFWWWVhSkdUMmltYk0NCiMgM3B3M3phZzBzV21iSThpZWVDSXJjRVBqVlVjeFlSbnZXTVdGTDA0dzlxQXhGaVBJNStKbEZqUEx2eG9ib0QzNA0KIyB5bDZMTVl0Z0NJa3REQVpjVXJmRStRcVkwUlZmbnhLK2ZEWmpPTDFFcEgva0ppc0t4SmRwRGVtTTRzQVFWN2pJDQojIGRoS1JWZkpJYWRpOEtnSmJEMFRVSURIYjlMcHdKbDJRWUo2OFN4Y0pMN1RMSGtOb3lRY253ZEpjOStvaHVXZ1MNCiMgbkR5Y3Y1NzhnRnliWTgzc1I2b2xKMmVnTi9NQWduMVUxNm40NlM0VG8zZm9IMG93Z2dhdU1JSUZscUFEQWdFQw0KIyBBaEFLR2cwYmNvK1V1TGR3RkNCOEtnckVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Hd3hDekFKQmdOVkJBWVRBbFZUDQojIE1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWoNCiMgYjIweEt6QXBCZ05WQkFNVElrUnBaMmxEWlhKMElFVldJRU52WkdVZ1UybG5ibWx1WnlCRFFTQW9VMGhCTWlrdw0KIyBIaGNOTWpBd09ERTNNREF3TURBd1doY05Nak13T0RJeU1USXdNREF3V2pDQndERVRNQkVHQ3lzR0FRUUJnamM4DQojIEFnRURFd0pEU0RFVk1CTUdDeXNHQVFRQmdqYzhBZ0VDRXdSV1lYVmtNUjB3R3dZRFZRUVBEQlJRY21sMllYUmwNCiMgSUU5eVoyRnVhWHBoZEdsdmJqRVlNQllHQTFVRUJSTVBRMGhGTFRFeE1pNHdNREF1TlRjNU1Rc3dDUVlEVlFRRw0KIyBFd0pEU0RFUE1BMEdBMVVFQnhNR1VISnBiR3g1TVJZd0ZBWURWUVFLRXcxT1JWaFVhR2x1YXlCVExrRXVNUXN3DQojIENRWURWUVFMRXdKU1JERVdNQlFHQTFVRUF4TU5Ua1ZZVkdocGJtc2dVeTVCTGpDQ0FpSXdEUVlKS29aSWh2Y04NCiMgQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxNYnI4azVCNFVUN0U5KzZTa29hM0loeTh2NnZTSFdhNVRmcHRQbg0KIyBCMUpRN0Jnc3c2RURDSS9IcklsY1JSRitmZVhHWVBZYWtKNW5nMWNrTTIydS9GdEFtcmxoYjVWTEZPZU1pdWIvDQojIFI1Y1BRNkloamRDblRpVlByQmJZZXZDbXlIT1RkcWM3NEdGeWdCSytnL1pMWnFPV0pEa2h3VmltVE5UUDFSTy8NCiMgQmVjM0pJM3JyMEN1SXFxR3ZDdC9UdWNQc3pWeXVLUlZpdzVndk1rYXdRdmZ3VDhNbUxmRmtyOThsdDRCbFRaRw0KIyBTa29QdW1FUytiSmRXTVR0ZFRmWklrK0tRdjYwb1dtc1dsSS9MeGUrbTFxSW5DRURMRm5Tc1FJTitIR2thYlc1DQojIFVpRUo2YkRqWkNJQjVQaFFYanYwV1hMVEdacVRjYkJlQkxJQW4wNkw5VElINm9DRzg3UWxyWGR5c09EY2FxaVENCiMgU2tBSjdiWFFzY2ZXc1JIV1ByUnpVMzZBMm1PeERLRVJHeEgzaVBEeGZWOU5BRWI4aGRGVGZ4SlJNYStoRUFxdA0KIyA2cXg0UHVVWmJ1N204VHJoK2ZIS281Uzlid1hrWW1pMFRET05wWUVRbWI3K2xlZmNIcUxOYUlncGZkSzVoLzBWDQojIGxVbHBEd2xOR1hNZkUyYUJoTlI2TDVPOTlyMTFZMnFKQTFPbU1CY1BOb1k3bGpYbWRNSHUxVjkvREUwSks0T1kNCiMgVnhiblVWTXFUZjMvVmdaeEdlY1lNTWZhbWp2NDJzUEZ2TWRhQ2o4QzNONGMwZDRzV09sdEprakNtaTVmS3c5eQ0KIyBVR0x6VXpXT2Z4OXkwYVRRbjlTZC95NjhjQlAvSmwvMWt3czN4UDRPcnN6bDV2QUZlblRRd3RPSExnc29rMEVGDQojIEZ1YUxBZ01CQUFHamdnSDFNSUlCOFRBZkJnTlZIU01FR0RBV2dCU1A2SDd3YlRKcUFBVWp4M0NYYWpxUS8ydnENCiMgMURBZEJnTlZIUTRFRmdRVVVsdW96UENJb1lCeXVENGRWQmNDbGJ3NDYzOHdNZ1lEVlIwUkJDc3dLYUFuQmdncg0KIyBCZ0VGQlFjSUE2QWJNQmtNRjBOSUxWWkJWVVF0UTBoRkxURXhNaTR3TURBdU5UYzVNQTRHQTFVZER3RUIvd1FFDQojIEF3SUhnREFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQXpCN0JnTlZIUjhFZERCeU1EZWdOYUF6aGpGb2RIUncNCiMgT2k4dlkzSnNNeTVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdFp6RXVZM0pzTURlZw0KIyBOYUF6aGpGb2RIUndPaTh2WTNKc05DNWthV2RwWTJWeWRDNWpiMjB2UlZaRGIyUmxVMmxuYm1sdVoxTklRVEl0DQojIFp6RXVZM0pzTUVzR0ExVWRJQVJFTUVJd053WUpZSVpJQVliOWJBTUNNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDANCiMgZEhCek9pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13QndZRlo0RU1BUU13ZmdZSUt3WUJCUVVIQVFFRQ0KIyBjakJ3TUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3T2k4dmIyTnpjQzVrYVdkcFkyVnlkQzVqYjIwd1NBWUlLd1lCDQojIEJRVUhNQUtHUEdoMGRIQTZMeTlqWVdObGNuUnpMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVWV1EyOWsNCiMgWlZOcFoyNXBibWREUVMxVFNFRXlMbU55ZERBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWTZJQjRQbk5jemhkZW1WVmlkdFQ4WFQwUCsvRWo5YmJhTUltUjZIRUxUY1lYMTlnamtzRk5VclI2DQojIC9YVVBnYWovblNwbHI1T2ozREo1SkNQbzJBVkt3WTFtVVdTMnVZb1pSaW5FQW9kRGZFU3FmVGlSMTk4MnhwNzINCiMgZ28zNDdHVE1ucHBrMkVwZHVJaW9pK2Rjd2JidzFEZjJuRnpJM0ZjWDdIMVVJUGQ4TTRwM1VBdDVXQ2lWTVBIVw0KIyBYeHJRdDVuOGp4Z0xjdXN2T1JYWnFaT3NkVGw3SFpwc1ZIbkdVWTc4N091MElKeHVGc2lVTTY0YktHenZOcXF0DQojIFl5RnlSOTlFckNUcWRaNjZ1cmFGaWxBZ2pQd2FMRnpKVXc2K2FLL3dXeEtCN1EwcGlJQ3BlWDFYMElMWnU1NkcNCiMgUjIwNlZFY214V0lMWWpRRTJOWmNUKzd2YlV6bU1JSUd2RENDQmFTZ0F3SUJBZ0lRQS9HMDRWODZndkVVbG5peg0KIyAxOWhIWERBTkJna3Foa2lHOXcwQkFRc0ZBREJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuDQojIGFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRREV5SkUNCiMgYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNQjRYRFRFeU1EUXhPREV5TURBdw0KIyBNRm9YRFRJM01EUXhPREV5TURBd01Gb3diREVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEDQojIFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG4NCiMgYVVObGNuUWdSVllnUTI5a1pTQlRhV2R1YVc1bklFTkJJQ2hUU0VFeUtUQ0NBU0l3RFFZSktvWklodmNOQVFFQg0KIyBCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLZFQrZyt5dFJQeFpNK0VnUHl1Z0RYUnR0ZkhveXlzR2l5czhZU3NPalVTDQojIE9wS1J1bGZreE1uekw2aElQTGZXYnR5WElycFJlV0d2UXk4TnQ1dTBTVEd1UkZnK3BLR1dwNGRQSTM3RGJHVWsNCiMga0ZVK29jb2pmTVZDNmNSNllrV2JmZDVqZE11ZVl5WDRoSnFhclVWUHJuMGZ5QlBMZFp2SjRlR0srQXNNbVBUSw0KIyBQdEJGcW5vZXBWaVROalMrS3k0ck1WaG10RElRbjUzd1VxSHY2RDdUZHZKQVd0ejZhajBiUzYxMnNJeGM3amE2DQojIGcrb3dxRXplOFFzcVdFR0lyZ0NKcXdQUkZvSWdJbmJyWGxRNEVtTGgwbkFrMiswZmNOSmtDWUF0NHJhZHpoL3kNCiMgdXlIemJOdllzeGw3aWxDZjcrdzJDbHlhdDByVENLQTVlZjNkdnowNkNTVUNBd0VBQWFPQ0ExZ3dnZ05VTUJJRw0KIyBBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdEZ1lEVlIwUEFRSC9CQVFEQWdHR01CTUdBMVVkSlFRTU1Bb0dDQ3NHDQojIEFRVUZCd01ETUg4R0NDc0dBUVVGQndFQkJITXdjVEFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXUNCiMgWkdsbmFXTmxjblF1WTI5dE1Fa0dDQ3NHQVFVRkJ6QUNoajFvZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeQ0KIyBkQzVqYjIwdlJHbG5hVU5sY25SSWFXZG9RWE56ZFhKaGJtTmxSVlpTYjI5MFEwRXVZM0owTUlHUEJnTlZIUjhFDQojIGdZY3dnWVF3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXd6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHANCiMgWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dRS0Erb0R5R09taDBkSEE2THk5amNtdzBMbVJwWjJsag0KIyBaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHBaMmhCYzNOMWNtRnVZMlZGVmxKdmIzUkRRUzVqY213d2dnSEVCZ05WDQojIEhTQUVnZ0c3TUlJQnR6Q0NBYk1HQ1dDR1NBR0cvV3dEQWpDQ0FhUXdPZ1lJS3dZQkJRVUhBZ0VXTG1oMGRIQTYNCiMgTHk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDNOemJDMWpjSE10Y21Wd2IzTnBkRzl5ZVM1b2RHMHdnZ0ZrQmdncg0KIyBCZ0VGQlFjQ0FqQ0NBVlllZ2dGU0FFRUFiZ0I1QUNBQWRRQnpBR1VBSUFCdkFHWUFJQUIwQUdnQWFRQnpBQ0FBDQojIFF3QmxBSElBZEFCcEFHWUFhUUJqQUdFQWRBQmxBQ0FBWXdCdkFHNEFjd0IwQUdrQWRBQjFBSFFBWlFCekFDQUENCiMgWVFCakFHTUFaUUJ3QUhRQVlRQnVBR01BWlFBZ0FHOEFaZ0FnQUhRQWFBQmxBQ0FBUkFCcEFHY0FhUUJEQUdVQQ0KIyBjZ0IwQUNBQVF3QlFBQzhBUXdCUUFGTUFJQUJoQUc0QVpBQWdBSFFBYUFCbEFDQUFVZ0JsQUd3QWVRQnBBRzRBDQojIFp3QWdBRkFBWVFCeUFIUUFlUUFnQUVFQVp3QnlBR1VBWlFCdEFHVUFiZ0IwQUNBQWR3Qm9BR2tBWXdCb0FDQUENCiMgYkFCcEFHMEFhUUIwQUNBQWJBQnBBR0VBWWdCcEFHd0FhUUIwQUhrQUlBQmhBRzRBWkFBZ0FHRUFjZ0JsQUNBQQ0KIyBhUUJ1QUdNQWJ3QnlBSEFBYndCeUFHRUFkQUJsQUdRQUlBQm9BR1VBY2dCbEFHa0FiZ0FnQUdJQWVRQWdBSElBDQojIFpRQm1BR1VBY2dCbEFHNEFZd0JsQUM0d0hRWURWUjBPQkJZRUZJL29mdkJ0TW1vQUJTUEhjSmRxT3BEL2ErclUNCiMgTUI4R0ExVWRJd1FZTUJhQUZMRSt3MmtEK0w5SEFkU1lKaG9JQXU5alpDdkRNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWk0wb01nVE0zMjYwMnllVEpPcnUxR3k1Nm91TDBRMElYbnI5T29VM2hzZHZwZ2QyZkFmTGtpTlhwDQojIC9nbjlJY0hzWFlEUzhOYkJROEwrZHl2YitkZVJNODVzMWJJWk8rWXUxc21UVDRoQWpzM2g5WDd4RDhaWlZuTG8NCiMgNjJwQnZSelZSdFY4U2NwbU9CWEJ2K0NSY0hlSDNNbU5NY2tNS2FJejdZM2loODJKalQ4Yi85WGdHcGVMZk5wdA0KIyArNmpHc2pwbWEzc0JzODNZcGpUc0VnR3JsVmlseEZOWHFHRG01d0lTb0xralpLSk51M3lCSldRaHZzL3VRaGhEDQojIGw3dWxOd2F2VGY4bXBVMWhTK3hHUWJobHpyaDVuZ2lXQzRHTWlqdVB4NW1Nb3lwdW1HMWVZY2FXdDRxNVlTMlQNCiMgdU9zT0JFUFg5ZjZtOEdMVW1XcWx3Y0h3WkpTQU1ZSVIvekNDRWZzQ0FRRXdnWUF3YkRFTE1Ba0dBMVVFQmhNQw0KIyBWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowDQojIExtTnZiVEVyTUNrR0ExVUVBeE1pUkdsbmFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXkNCiMgS1FJUUNob05HM0tQbExpM2NCUWdmQ29LeERBTkJnbGdoa2dCWlFNRUFnRUZBS0NCaERBWUJnb3JCZ0VFQVlJMw0KIyBBZ0VNTVFvd0NLQUNnQUNoQW9BQU1Ca0dDU3FHU0liM0RRRUpBekVNQmdvckJnRUVBWUkzQWdFRU1Cd0dDaXNHDQojIEFRUUJnamNDQVFzeERqQU1CZ29yQmdFRUFZSTNBZ0VWTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0RzYkMwVm9saCsNCiMgMWU1cVdjK0NGYmxxUXZtR1hTZVNmdHllMEt3T1Zybm9uVEFOQmdrcWhraUc5dzBCQVFFRkFBU0NBZ0F2T2VmTA0KIyByQVBaN3BqSFhkK3JCWUY5RWNhcmxtUFlOWkcwV3pVUGVzU015c0ljU3hieVVDSFQySWs4NisrOTJHT1RYaHkwDQojIEFES0FFTWtUMmdmUHI5SVdkT2UwanRCZ0xTcUVZU3B0aUxET04ybllFSWVFaTRyUGV3aW9TU2lpWVBpWE9hNGcNCiMgM2JSMlNCYmFFZEpkTnZEN1BPaDRzMlVqL3M5ZXU4VUJEazZzL3djMXdRSmp6aFc0cW9mclpLdXRYR0syVDVqRA0KIyByU01SMk5kalBOeUdVZ3hCbXphcGQyZ3hTVDBRa0RQNm1oSktYdzR4Vks4Z0VocVZKRXU2VFNMZ1pZMzFuZktpDQojIFFFeUV1UlNkZVlIZWdQdmZ4TGIyNTlvT0N5TDJXaHZwVnNnT0VNTHM3MWY3NnFteGJPQlFIZ092RHNaaTl4MEUNCiMgbjJkQjNCK29qTVhwUGtBQ0FsbFM4SDNNRTBCcVE0V1JwbWNFZFErQ3VWYkpwUDF1SGxnSVNFNkFHMjZjQmRjLw0KIyAyaEtGVUsyL1REN3Y0bTB2OU9lTnJSMkFpN0hPRmdZOUFjYms4TlltTkcvKzdobngzVnoxeGMxeklVVmxZYlpIDQojIFlyZnE3WlZsRU9DUnFDaW9YOWtFNzE4TllhemVFWnh1OWE3VVQ4a1Rya1pvMUdwMnJONVBsS1BQNWlnbVJJemYNCiMgdWFjS204R045dnRRcDZxbUxBaUd6VEgrZmJqVXpEYUdvVlF2Mkk2WGZtTjRSTHhOUmJ0aHlJeTJjemRtVWpGOQ0KIyBNWWpDaWZXY21EcFFNYytaZTVYd0NIOGdVMHlCWW1haHBSY0ZodVBuS0NES0ZVenNyZXY2a25ja1RXRnE5bGowDQojIHlPN0tXNWlBUE95eW5ITUVEUlhYR09SZXRleXcwSFZnWlB3SlFhR0NEc2d3Z2c3RUJnb3JCZ0VFQVlJM0F3TUINCiMgTVlJT3REQ0NEckFHQ1NxR1NJYjNEUUVIQXFDQ0RxRXdnZzZkQWdFRE1ROHdEUVlKWUlaSUFXVURCQUlCQlFBdw0KIyBkd1lMS29aSWh2Y05BUWtRQVFTZ2FBUm1NR1FDQVFFR0NXQ0dTQUdHL1d3SEFUQXhNQTBHQ1dDR1NBRmxBd1FDDQojIEFRVUFCQ0NRakgxbWlxM2p0cExEVzBqUHdOcFFXM1pkd3BhRlUyZVdPZUNiWFZiUkhnSVFkakJEaW5qWFc0TG0NCiMgcDdMTWgreGtVUmdQTWpBeU1EQTRNVGt4TmpNM01qbGFvSUlMdXpDQ0JvSXdnZ1Zxb0FNQ0FRSUNFQVROUDRWbw0KIyBybmJHRzdEK2NXRE1wMjB3RFFZSktvWklodmNOQVFFTEJRQXdjakVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WDQojIEJBb1RERVJwWjJsRFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFeE1DOEcNCiMgQTFVRUF4TW9SR2xuYVVObGNuUWdVMGhCTWlCQmMzTjFjbVZrSUVsRUlGUnBiV1Z6ZEdGdGNHbHVaeUJEUVRBZQ0KIyBGdzB4T1RFd01ERXdNREF3TURCYUZ3MHpNREV3TVRjd01EQXdNREJhTUV3eEN6QUpCZ05WQkFZVEFsVlRNUmN3DQojIEZRWURWUVFLRXc1RWFXZHBRMlZ5ZEN3Z1NXNWpMakVrTUNJR0ExVUVBeE1iVkVsTlJWTlVRVTFRTFZOSVFUSTENCiMgTmkweU1ERTVMVEV3TFRFMU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNldRMQ0KIyBuUHFwbUdWa0crUVgzTGdwTnN4bkNWaUZUVERneWYvbE96d1JLRkN2QnpIaVhRa1l3dmFKakdrSUJDUGdkeTJkDQojIEZlVzQ2S0ZxanYvVXJ0SjZGdS80UWJVZE9YWEJ6eStuckVWK2xHMnNBd0daUEdJK2ZucjlSWmN4dFBxMzJVSSsNCiMgcDFXYjMxcFBXQUtvTW1raUU3NkxnaTNHbUt0cm03VEo4bVVSREhRTnN2QUlsblRFNkxKSW9xRVVwZmo2NFlsdw0KIyBSRHVONy91azlNTzV2UlFzNnd3b0p5V0FxeEJMRmhKZ0Mya2lqRTdOeHRXeVpWa2g0SHdzRW8xd0RvK0t5dURUDQojIDE3TTVkMURRUWl3dWVzNmNaM280ZDFSQS8wK1ZCQ0RVNjhqT2h4UUkvaDJBM2REbkszanF2eDl3eHU1Q0ZsTTINCiMgUlp0VEdVbGluWG9DbTVVVW93SURBUUFCbzRJRE9EQ0NBelF3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZA0KIyBFd0VCL3dRQ01BQXdGZ1lEVlIwbEFRSC9CQXd3Q2dZSUt3WUJCUVVIQXdnd2dnRy9CZ05WSFNBRWdnRzJNSUlCDQojIHNqQ0NBYUVHQ1dDR1NBR0cvV3dIQVRDQ0FaSXdLQVlJS3dZQkJRVUhBZ0VXSEdoMGRIQnpPaTh2ZDNkM0xtUnANCiMgWjJsalpYSjBMbU52YlM5RFVGTXdnZ0ZrQmdnckJnRUZCUWNDQWpDQ0FWWWVnZ0ZTQUVFQWJnQjVBQ0FBZFFCeg0KIyBBR1VBSUFCdkFHWUFJQUIwQUdnQWFRQnpBQ0FBUXdCbEFISUFkQUJwQUdZQWFRQmpBR0VBZEFCbEFDQUFZd0J2DQojIEFHNEFjd0IwQUdrQWRBQjFBSFFBWlFCekFDQUFZUUJqQUdNQVpRQndBSFFBWVFCdUFHTUFaUUFnQUc4QVpnQWcNCiMgQUhRQWFBQmxBQ0FBUkFCcEFHY0FhUUJEQUdVQWNnQjBBQ0FBUXdCUUFDOEFRd0JRQUZNQUlBQmhBRzRBWkFBZw0KIyBBSFFBYUFCbEFDQUFVZ0JsQUd3QWVRQnBBRzRBWndBZ0FGQUFZUUJ5QUhRQWVRQWdBRUVBWndCeUFHVUFaUUJ0DQojIEFHVUFiZ0IwQUNBQWR3Qm9BR2tBWXdCb0FDQUFiQUJwQUcwQWFRQjBBQ0FBYkFCcEFHRUFZZ0JwQUd3QWFRQjANCiMgQUhrQUlBQmhBRzRBWkFBZ0FHRUFjZ0JsQUNBQWFRQnVBR01BYndCeUFIQUFid0J5QUdFQWRBQmxBR1FBSUFCbw0KIyBBR1VBY2dCbEFHa0FiZ0FnQUdJQWVRQWdBSElBWlFCbUFHVUFjZ0JsQUc0QVl3QmxBQzR3Q3dZSllJWklBWWI5DQojIGJBTVZNQjhHQTFVZEl3UVlNQmFBRlBTMjRTQWQvaW11MHVSaHBiS2lKYkxJRnpWdU1CMEdBMVVkRGdRV0JCUlcNCiMgVXcvQnhnZW5UZGZZYmxkeWdGQk01T3lld1RCeEJnTlZIUjhFYWpCb01ES2dNS0F1aGl4b2RIUndPaTh2WTNKcw0KIyBNeTVrYVdkcFkyVnlkQzVqYjIwdmMyaGhNaTFoYzNOMWNtVmtMWFJ6TG1OeWJEQXlvRENnTG9Zc2FIUjBjRG92DQojIEwyTnliRFF1WkdsbmFXTmxjblF1WTI5dEwzTm9ZVEl0WVhOemRYSmxaQzEwY3k1amNtd3dnWVVHQ0NzR0FRVUYNCiMgQndFQkJIa3dkekFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXVaR2xuYVdObGNuUXVZMjl0TUU4Rw0KIyBDQ3NHQVFVRkJ6QUNoa05vZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmxjblJUDQojIFNFRXlRWE56ZFhKbFpFbEVWR2x0WlhOMFlXMXdhVzVuUTBFdVkzSjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUINCiMgQVFBdWc2RkVCVW9FNDdreVV2clpnZkFhdS9nSmpTTzVQZGlTb2VaR0hFb3Zibm84WTI0M0Y2TWF2MWdqc2tPYw0KIyBsSU5PT1Ftd0xPakg0ZUxNN2N0NWE4N2VJd0ZIN1pWVWdlQ0FleEt4cndLR3FUcHphdjc0bjhHTjBTR001Q21DDQojIHc0b0xZQUFDblI5SHhKKzBDbWhUZjFvUXB2Z2k1dmhUa2pGZjJJS0RMVzBUUXE2RHdSQk9wQ1QwUjV6ZUR5SnkNCiMgZDF4L1QrazVtQ3RYa2tUWDcyNlQyVVBIQkROalVUZFdua2NFRWNPaldGUWgyT0tPVnRkSlAxZjhDcDhqWG52MA0KIyBsSTNkblJxNzMzb3FwdEpGcGxVTWovWk1pdktXejRsRzNER3lrWkNqWHpNd1lGWDEvR3N3cktIdDVFZE9NNTVuDQojIGFpaTFUY0x0VzVlQytNdXBDR3hUQ2JUM01JSUZNVENDQkJtZ0F3SUJBZ0lRQ3FFbDF0WXlHMzVCNUFYYU5wZkMNCiMgRlRBTkJna3Foa2lHOXcwQkFRc0ZBREJsTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObA0KIyBjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1TUXdJZ1lEVlFRREV4dEVhV2RwDQojIFEyVnlkQ0JCYzNOMWNtVmtJRWxFSUZKdmIzUWdRMEV3SGhjTk1UWXdNVEEzTVRJd01EQXdXaGNOTXpFd01UQTMNCiMgTVRJd01EQXdXakJ5TVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrdw0KIyBGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1URXdMd1lEVlFRREV5aEVhV2RwUTJWeWRDQlRTRUV5DQojIElFRnpjM1Z5WldRZ1NVUWdWR2x0WlhOMFlXMXdhVzVuSUVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCiMgQVE4QU1JSUJDZ0tDQVFFQXZkQXk3a3ZOajMvZHFicUNtY1U1VkNoWHRpTkt4QTRIUlROUkVIM1ErWDFOYUg3bg0KIyB0cUQwamJPSTVKZS9ZeUdRbUw4VHZGZlR3K0YrQ05acUZBQTQ5eTRlTys3TXB2WXlXZjVmWlQvZ20rdmpSa2NHDQojIEdsVitDeWQrd0tMMW9PRGVJajhPLzM2VisvT2p1aUkrR0t3UjVQQ1pBMjA3aFh3SjArNWR5Sm9MVk9Pb0NYRnINCiMgNE04aUVBOTF6M0Z5VGdxdDMwQTZYTGRSNGFGNUZNWk5KQ013WGJ6c1BHQnFyQzhIelAzdzZrZlppRkJlL1dadQ0KIyBWbUVuS1ltRVVlYUM1MFpRL1pRcUxLZmtkVDY2bUErRWY1OHhGTmF0MWZKa3kzc2VCZENFR1hJWDhSY0c3ejNODQojIDFrM3ZCa0w5b2xNcVQ0VWR4QjA4cjgvYXJCRDEzYXlzNlZiL2t3SURBUUFCbzRJQnpqQ0NBY293SFFZRFZSME8NCiMgQkJZRUZQUzI0U0FkL2ltdTB1UmhwYktpSmJMSUZ6VnVNQjhHQTFVZEl3UVlNQmFBRkVYcm9xLzBrc3VDTVMxUg0KIyBpNmVuSVozemJjZ1BNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HDQojIEExVWRKUVFNTUFvR0NDc0dBUVVGQndNSU1Ia0dDQ3NHQVFVRkJ3RUJCRzB3YXpBa0JnZ3JCZ0VGQlFjd0FZWVkNCiMgYUhSMGNEb3ZMMjlqYzNBdVpHbG5hV05sY25RdVkyOXRNRU1HQ0NzR0FRVUZCekFDaGpkb2RIUndPaTh2WTJGag0KIyBaWEowY3k1a2FXZHBZMlZ5ZEM1amIyMHZSR2xuYVVObGNuUkJjM04xY21Wa1NVUlNiMjkwUTBFdVkzSjBNSUdCDQojIEJnTlZIUjhFZWpCNE1EcWdPS0EyaGpSb2RIUndPaTh2WTNKc05DNWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmwNCiMgY25SQmMzTjFjbVZrU1VSU2IyOTBRMEV1WTNKc01EcWdPS0EyaGpSb2RIUndPaTh2WTNKc015NWthV2RwWTJWeQ0KIyBkQzVqYjIwdlJHbG5hVU5sY25SQmMzTjFjbVZrU1VSU2IyOTBRMEV1WTNKc01GQUdBMVVkSUFSSk1FY3dPQVlLDQojIFlJWklBWWI5YkFBQ0JEQXFNQ2dHQ0NzR0FRVUZCd0lCRmh4b2RIUndjem92TDNkM2R5NWthV2RwWTJWeWRDNWoNCiMgYjIwdlExQlRNQXNHQ1dDR1NBR0cvV3dIQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWNaVVM2VkdIVm1uTg0KIyA3OTNhZktwamVyTjR6d1kzUUlUdlM0Uy95czhEQXYzRnA4TU9JRUlzcjNmekt4OE1JVm9xdHdVMEhXcXVtZmduDQojIG9tYS9DYXBnMzNha09wTVArTExSMkh3Wll1aGVnaVVleExvY2V5d2g0dFpiTEJRMVF3Um9zdHQxQXVCeXg1alcNCiMgUEdUbEgwZ1FHRitKT0dGTllrWWtoMk9Na1ZJc3J5bUo1WGdmMWdzVXBZRFhFa2R3czNYVms0V1RmcmFTWi90VA0KIyBZWW1vOVd1V3dQUllhUTE4eUFHeHVTaDF0NWxqaFNLTVljcDVsSDVaL0l3UDQyKzFBU2EyYktYdWgxRWg1RmhnDQojIG03b01MU3R0b3NSK3U4UWxLMGNDQ0h4SnJoTzI0WHhDUWlqR0dGYlBRVFMyWmwyMmRIdjFWak1pTHlJMnNrdWkNCiMgU3BYWTlhYU9VakdDQWswd2dnSkpBZ0VCTUlHR01ISXhDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLRXd4RQ0KIyBhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4TVRBdkJnTlZCQU1UDQojIEtFUnBaMmxEWlhKMElGTklRVElnUVhOemRYSmxaQ0JKUkNCVWFXMWxjM1JoYlhCcGJtY2dRMEVDRUFUTlA0Vm8NCiMgcm5iR0c3RCtjV0RNcDIwd0RRWUpZSVpJQVdVREJBSUJCUUNnZ1pnd0dnWUpLb1pJaHZjTkFRa0RNUTBHQ3lxRw0KIyBTSWIzRFFFSkVBRUVNQndHQ1NxR1NJYjNEUUVKQlRFUEZ3MHlNREE0TVRreE5qTTNNamxhTUNzR0N5cUdTSWIzDQojIERRRUpFQUlNTVJ3d0dqQVlNQllFRkFNbHZWQmUycFl3TGNJdlQ2QWVUQ2krS0RURk1DOEdDU3FHU0liM0RRRUoNCiMgQkRFaUJDQXkvd3Z0WDV1U2tPVXdIR0lDU3lhb3JSZDc2S0x4NXhLMFU3RjIrd0l2ampBTkJna3Foa2lHOXcwQg0KIyBBUUVGQUFTQ0FRQjZNTnZpQnRQbXVXWW1QYjZkSlFTU0cvYzlxWUtCWnNKNjNwdi8zK1VGaXF0R01ROWtubE5ODQojIEZqTFhsS1k3VUYzUmdUOVpKUzhHQy92TCtPZTRxNkpXZHd5UlRBMTVkU2VMd2tuVUhGNlczUHJodlhwd1hPaGsNCiMgTjlSYTV4YjV4S3d0WDd3emJIS0RxMTYzMmpzQ2VLdTB0d1ZhYUNabjBEdTQvQXp0dngvR0pzYUNZY241S1Rlaw0KIyBLbVNjQ2JaRHEzR1lMcGR4blVlSzJySTliYmZCYVFva3JkK215cDB3K2N5Mk50ei9qRUx5OWxIUGFyQUljeHhpDQojIDIycDh1cVVyd05BRCtUT1p5SlgvZ1NpeXpZdEhYU1pWemdjWVo3VzZzcXZCTys2ckNwTWZXWVZYVVBqcmxnRTUNCiMgRVBmSmhjVGF2N0hZL2g1UjJxNzNDMklLODNBRlJQaFQNCiMgU0lHICMgRW5kIHNpZ25hdHVyZSBibG9jaw0K"}}}