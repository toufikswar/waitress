{"id": "System_Cleanup_windows", "name": "System Cleanup", "description": "Performs cleanup of unused files in WinSxS folder using DISM Windows tool.\nDeletes SCCM cached files that are older than a certain numbers of days provided as input parameters.\n", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "File age threshold to delete Configuration Manager cache older or equal age. Provide 0 to ignore", "id": "SCCMCacheFilesCreationAgeInDays", "name": "SCCMCacheFilesCreationAgeInDays", "options": ["0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "File age threshold to remove older or equal age. Provide 0 to ignore", "id": "DumpFilesOlderThanDays", "name": "DumpFilesOlderThanDays", "options": ["0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Space freed", "id": "CleanupSpace", "name": "CleanupSpace", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Invoke-SystemCleanup.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KQ2xlYW5zIHRoZSB1bnVzZWQgZmlsZXMgaW4gV2luU3hTLCBTQ0NNIGNhY2hlIGZvbGRlcnMsIGFuZCBtZW1vcnkgZHVtcCBmaWxlcyB1bnVzZWQgZm9yIGEgcHJvdmlkZWQgbnVtYmVyIG9mIGRheXMuDQoNCi5ERVNDUklQVElPTg0KUGVyZm9ybXMgY2xlYW51cCBvZiB1bnVzZWQgZmlsZXMgaW4gV2luU3hTIGZvbGRlciB1c2luZyBESVNNIFdpbmRvd3MgdG9vbC4NCkRlbGV0ZXMgU0NDTSBjYWNoZWQgZmlsZXMgdGhhdCBhcmUgb2xkZXIgdGhhbiBhIGNlcnRhaW4gbnVtYmVycyBvZiBkYXlzIHByb3ZpZGVkIGFzIGlucHV0IHBhcmFtZXRlcnMuDQoNCg0KLkZVTkNUSU9OQUxJVFkNClJlbWVkaWF0aW9uDQoNCi5JTlBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uDQoxICAgTWF4aW11bURlbGF5SW5TZWNvbmRzICAgICAgICAgICBNYXhpbXVtIHJhbmRvbSBkZWxheSBzZXQgdG8gYXZvaWQgb3ZlcmxvYWRpbmcgc2VydmVyIGhvc3RpbmcgdmlydHVhbCBtYWNoaW5lcy4gUHJvdmlkZSBudW1iZXIgb2Ygc2Vjb25kcyBsZXNzIHRoYW4gNjAwDQoyICAgU0NDTUNhY2hlRmlsZXNDcmVhdGlvbkFnZUluRGF5cyBGaWxlIGFnZSB0aHJlc2hvbGQgdG8gZGVsZXRlIENvbmZpZ3VyYXRpb24gTWFuYWdlciBjYWNoZSBvbGRlciBvciBlcXVhbCBhZ2UuIFByb3ZpZGUgMCB0byBpZ25vcmUNCjMgICBEdW1wRmlsZXNPbGRlclRoYW5EYXlzICAgICAgICAgIEZpbGUgYWdlIHRocmVzaG9sZCB0byByZW1vdmUgb2xkZXIgb3IgZXF1YWwgYWdlLiBQcm92aWRlIDAgdG8gaWdub3JlDQoNCi5PVVRQVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlICAgICAgICAgICAgRGVzY3JpcHRpb24NCjEgICBDbGVhbnVwU3BhY2UgICAgICAgICAgICAgICAgICAgIFNpemUgICAgICAgICAgICBTcGFjZSBmcmVlZA0KDQouRlVSVEhFUiBJTkZPUk1BVElPTg0KUGFyYW1ldGVyICdNYXhpbXVtRGVsYXlJblNlY29uZHMnIGNhbiBiZSB1c2VkIHRvIGFkZCByYW5kb20gc2NyaXB0IGV4ZWN1dGlvbiBkZWxheS4gSXQgc2hvdWxkIGJlIHVzZWQgaW4gdmlydHVhbGl6ZWQgZW52aXJvbm1lbnRzIHRvIHNwcmVhZCBvdmVyIHRpbWUgbnVtYmVyIG9mIEkvTyByZXF1ZXN0cyBvbiBzZXJ2ZXIgaG9zdGluZyB2aXJ0dWFsIG1hY2hpbmVzLg0KU0NDTSBjYWNoZSBjbGVhbnVwIGRvZXMgbm90IHdvcmsgd2l0aCBDb25maWd1cmF0aW9uIE1hbmFnZXIgb2xkZXIgdGhhbiAyMDEyLg0KVGhlIGZyZWVkIHNwYWNlIHNob3duIGluIENsZWFudXBTcGFjZSBvdXRwdXQgaXMgY2FsY3VsYXRlZCBieSBhY2Nlc3NpbmcgdGhlICdGcmVlU3BhY2UnIHByb3BlcnR5IG9mIHRoZSBbaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcHJldmlvdXMtdmVyc2lvbnMvd2luZG93cy9kZXNrdG9wL3Zkc3dtaS93aW4zMi12b2x1bWUgV2luMzJfVm9sdW1lIFdNSSBDbGFzc10gYmVmb3JlIGFuZCBhZnRlciB0aGUgZXhlY3V0aW9uLg0KUGxlYXNlIGNvbnNpZGVyIHRoaXMgb3V0cHV0IGFzIGFuIG9yaWVudGF0aW9uLiBJdCBtYXkgYmUgaW5hY2N1cmF0ZSBvciByZXBvcnQgMCBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgZHVlIHRvIHRoZSBmYWN0IHRoYXQgZXh0ZXJuYWwgYXBwbGljYXRpb25zIG9yIHNlcnZpY2VzIGNvdWxkIGJlIG9jY3VweWluZyB0aGUgZnJlZSBzcGFjZSBieSBkb3dubG9hZGluZywgY3JlYXRpbmcgb3IgdW56aXBwaW5nIGZpbGVzLg0KDQouUkVTVFJJQ1RJT05TDQotIFRoZSBzY3JpcHQgaXMgZGVzaWduZWQgdG8gcmVtb3ZlIG1lbW9yeSBkdW1wcyBvbmx5IGZyb20gZGVmYXVsdCBsb2NhdGlvbnMgKCVTeXN0ZW1Sb290JVxNRU1PUlkuRE1QIGFuZCAlU3lzdGVtUm9vdCVcTWluaWR1bXApLg0KLSBUaGUgZGVsZXRpb24gb2Ygb2xkIHVzZXIgcHJvZmlsZXMgaXMgb25seSBzdXBwb3J0ZWQgb24gV2luZG93cyAxMC4NCg0KLk5PVEVTDQpDb250ZXh0OiAgICAgICAgICAgIExvY2FsU3lzdGVtDQpWZXJzaW9uOiAgICAgICAgICAgIDQuMC4xLjAgLSBGaXhlZCBQQVRIIHZ1bG5lcmFiaWxpdHkgYW5kIGNoYW5nZWQgZG9jdW1lbnRhdGlvbg0KICAgICAgICAgICAgICAgICAgICA0LjAuMC4wIC0gUmVtb3ZlZCB1bnVzZWQgcHJvZmlsZSByZW1vdmFsDQogICAgICAgICAgICAgICAgICAgIDMuMS40LjAgLSBGaXhlZCBlbXB0eSBmb2xkZXJzIHJlbW92YWwNCiAgICAgICAgICAgICAgICAgICAgMy4xLjMuMCAtIEZpeGVkIHVzZXIgcHJvZmlsZSBkZWxldGlvbg0KICAgICAgICAgICAgICAgICAgICAzLjEuMi4wIC0gRml4ZWQgc3lzdGVtIGRyaXZlIGZyZWUgc3BhY2UgaW5hY2N1cmFjeSBhbmQgaW1wcm92ZWQgbWVzc2FnaW5nDQogICAgICAgICAgICAgICAgICAgIDMuMS4xLjAgLSBGaXhlZCBkb2N1bWVudGF0aW9uIGFib3V0IHNwYWNlIGZyZWVkDQogICAgICAgICAgICAgICAgICAgIDMuMS4wLjEgLSBVcGRhdGVkIHRlbXBsYXRlIGZ1bmN0aW9ucw0KICAgICAgICAgICAgICAgICAgICAzLjEuMC4wIC0gRml4ZWQgdGhlIGRlbGV0aW9uIG9mIGZpbGVzIGluc2lkZSBmb2xkZXJzIGFuZCBlbXB0eSBmb2xkZXJzICsgbWlub3IgcmVmYWN0b3JpbmcNCiAgICAgICAgICAgICAgICAgICAgMy4wLjAuMCAtIEFkZGVkICdSZW1vdmUgTWVtb3J5IER1bXAgRmlsZXMnIGZ1bmN0aW9uYWxpdHkNCiAgICAgICAgICAgICAgICAgICAgMi4wLjIuMCAtIEZpeGVkIHdyb25nIFNDQ00gY2FjaGUgcGF0aA0KICAgICAgICAgICAgICAgICAgICAyLjAuMS4wIC0gRml4ZWQgdXNlciBwcm9maWxlcyB3aXRoIG51bGwgTGFzdFVzZVRpbWUgcHJvcGVydHkNCiAgICAgICAgICAgICAgICAgICAgMi4wLjAuMCAtIEFkZGVkIFNDQ00gY2FjaGUgY2xlYW51cCBhbmQgcmVtb3ZhbCBvZiB1bnVzZWQgdXNlciBwcm9maWxlcw0KICAgICAgICAgICAgICAgICAgICAxLjAuMC4wIC0gSW5pdGlhbCByZWxlYXNlDQpMYXN0IEdlbmVyYXRlZDogICAgIDI1IE1hciAyMDIyIC0gMTE6MTI6MTINCkNvcHlyaWdodCAoQykgMjAyMiBOZXh0aGluayBTQSwgU3dpdHplcmxhbmQNCiM+DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVycyBkZWZpbml0aW9uDQojDQpwYXJhbSAoDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTWF4aW11bURlbGF5SW5TZWNvbmRzLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFNDQ01DYWNoZUZpbGVzQ3JlYXRpb25BZ2VJbkRheXMsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kRHVtcEZpbGVzT2xkZXJUaGFuRGF5cw0KKQ0KIyBFbmQgb2YgcGFyYW1ldGVycyBkZWZpbml0aW9uDQoNCiRlbnY6UGF0aCA9ICIkZW52OlN5c3RlbVJvb3Rcc3lzdGVtMzI7JGVudjpTeXN0ZW1Sb290OyRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxXYmVtOyRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxXaW5kb3dzUG93ZXJTaGVsbFx2MS4wXCINCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdFUlJPUl9FWENFUFRJT05fVFlQRScgYA0KICAgIC1WYWx1ZSBAe0Vudmlyb25tZW50ID0gJ1tFbnZpcm9ubWVudCBlcnJvcl0nDQogICAgICAgICAgICAgSW5wdXQgPSAnW0lucHV0IGVycm9yXScNCiAgICAgICAgICAgICBJbnRlcm5hbCA9ICdbSW50ZXJuYWwgZXJyb3JdJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTUFYX1NDUklQVF9ERUxBWV9TRUMnIGANCiAgICAtVmFsdWUgNjAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVNT1RFX0FDVElPTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dHJlbW90ZWFjdGlvbnMuZGxsIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQUxQSEFfTlVNRVJJQ19DT01NQV9SRUdFWCcgYA0KICAgIC1WYWx1ZSAnXltcdyxdKygoLFxzfC0pW1x3LF0rKSpbXHcsXSskJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RJU01fRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3RcU3lzdGVtMzJcRGlzbS5leGUiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RJU01fRVhFX1BBUkFNUycgYA0KICAgIC1WYWx1ZSBAKCcvT25saW5lJywgJy9DbGVhbnVwLUltYWdlJywgJy9TdGFydENvbXBvbmVudENsZWFudXAnKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ1NDQ01fQ0FDSEVfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpTeXN0ZW1Sb290XGNjbWNhY2hlIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ01FTU9SWV9EVU1QX0ZJTEVTX0xPQ0FUSU9OUycgYA0KICAgIC1WYWx1ZSBAKCIkZW52OlN5c3RlbVJvb3RcbWVtb3J5LmRtcCIsDQogICAgICAgICAgICAgIiRlbnY6U3lzdGVtUm9vdFxNaW5pZHVtcCIpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCiMNCiMgSW52b2tlIE1haW4NCiMNCmZ1bmN0aW9uIEludm9rZS1NYWluIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBbaW50XSRleGl0Q29kZSA9IDANCiAgICBbbG9uZ10kY2xlYW51cFNwYWNlID0gMA0KICAgIHRyeSB7DQogICAgICAgIEFkZC1OZXh0aGlua1JlbW90ZUFjdGlvbkRMTA0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtDQogICAgICAgIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uDQogICAgICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KDQogICAgICAgIFdhaXQtUmFuZG9tVGltZSAtTWF4aW11bURlbGF5SW5TZWNvbmRzICRJbnB1dFBhcmFtZXRlcnMuTWF4aW11bURlbGF5SW5TZWNvbmRzDQogICAgICAgICRjbGVhbnVwU3BhY2UgPSBJbnZva2UtU3lzdGVtQ2xlYW51cCAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCg0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICdEaXNrIGNsZWFudXAgc3VjY2Vzc2Z1bGx5IHBlcmZvcm1lZC4gJw0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9IGZpbmFsbHkgew0KICAgICAgICBVcGRhdGUtRW5naW5lT3V0cHV0VmFyaWFibGVzIC1DbGVhbnVwU3BhY2UgJGNsZWFudXBTcGFjZQ0KICAgIH0NCg0KICAgIHJldHVybiAkZXhpdENvZGUNCn0NCg0KIw0KIyBUZW1wbGF0ZSBmdW5jdGlvbnMNCiMNCmZ1bmN0aW9uIEFkZC1OZXh0aGlua1JlbW90ZUFjdGlvbkRMTCB7DQoNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIE5leHRoaW5rIFJlbW90ZSBBY3Rpb24gRExMIG5vdCBmb3VuZC4gIg0KICAgIH0NCiAgICBBZGQtVHlwZSAtUGF0aCAkUkVNT1RFX0FDVElPTl9ETExfUEFUSA0KfQ0KDQpmdW5jdGlvbiBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtIHsNCg0KICAgIGlmICgtbm90IChDb25maXJtLUN1cnJlbnRVc2VySXNMb2NhbFN5c3RlbSkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBhcyBMb2NhbFN5c3RlbS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlybS1DdXJyZW50VXNlcklzTG9jYWxTeXN0ZW0gew0KDQogICAgJGN1cnJlbnRJZGVudGl0eSA9IEdldC1DdXJyZW50SWRlbnRpdHkNCiAgICByZXR1cm4gJGN1cnJlbnRJZGVudGl0eSAtZXEgJExPQ0FMX1NZU1RFTV9JREVOVElUWQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ3VycmVudElkZW50aXR5IHsNCg0KICAgIHJldHVybiBbc2VjdXJpdHkucHJpbmNpcGFsLndpbmRvd3NpZGVudGl0eV06OkdldEN1cnJlbnQoKS5Vc2VyLlRvU3RyaW5nKCkNCn0NCg0KZnVuY3Rpb24gVGVzdC1TdXBwb3J0ZWRPU1ZlcnNpb24gew0KDQogICAgJE9TVmVyc2lvbiA9IChHZXQtT1NWZXJzaW9uKSAtYXMgW3ZlcnNpb25dDQogICAgaWYgKC1ub3QgKCRPU1ZlcnNpb24pKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgY291bGQgbm90IHJldHVybiBPUyB2ZXJzaW9uLiAiDQogICAgfQ0KICAgIGlmICgoJE9TVmVyc2lvbi5NYWpvciAtbmUgNiAtb3IgJE9TVmVyc2lvbi5NaW5vciAtbmUgMSkgLWFuZCBgDQogICAgICAgICgkT1NWZXJzaW9uLk1ham9yIC1uZSAxMCkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyA3IGFuZCAxMCBvbmx5LiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCg0KICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgIC1GaWx0ZXIgJ1Byb2R1Y3RUeXBlID0gMScgLUVycm9yQWN0aW9uIFN0b3AgfCBgDQogICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBWZXJzaW9uDQp9DQoNCmZ1bmN0aW9uIFdhaXQtUmFuZG9tVGltZSAoW2ludF0kTWF4aW11bURlbGF5SW5TZWNvbmRzKSB7DQogICAgaWYgKCRNYXhpbXVtRGVsYXlJblNlY29uZHMgLWd0IDApIHsNCiAgICAgICAgJHNlY29uZHMgPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDAgLU1heGltdW0gJE1heGltdW1EZWxheUluU2Vjb25kcw0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkc2Vjb25kcw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gV3JpdGUtU3RhdHVzTWVzc2FnZSAoW3Bzb2JqZWN0XSRNZXNzYWdlKSB7DQogICAgJGV4Y2VwdGlvbk1lc3NhZ2UgPSAkTWVzc2FnZS5Ub1N0cmluZygpDQoNCiAgICBpZiAoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlcikgew0KICAgICAgICAkdmVyc2lvbiA9IEdldC1TY3JpcHRWZXJzaW9uDQogICAgICAgIGlmICgtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCR2ZXJzaW9uKSkgew0KICAgICAgICAgICAgJHNjcmlwdFZlcnNpb24gPSAiVmVyc2lvbjogJHZlcnNpb24uICINCiAgICAgICAgfQ0KDQogICAgICAgICRlcnJvck1lc3NhZ2VMaW5lID0gJHNjcmlwdFZlcnNpb24gKyAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKSc6ICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JNZXNzYWdlTGluZSArICRleGNlcHRpb25NZXNzYWdlKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtU2NyaXB0VmVyc2lvbiB7DQoNCiAgICAkc2NyaXB0Q29udGVudCA9IEdldC1Db250ZW50ICRNeUludm9jYXRpb24uU2NyaXB0TmFtZSB8IE91dC1TdHJpbmcNCiAgICBpZiAoJHNjcmlwdENvbnRlbnQgLW5vdG1hdGNoICc8I1tcclxuXXsyfS5TWU5PUFNJU1teXCNcPl0qKC5OT1RFU1teXCNcPl0qKVwjPicpIHsgcmV0dXJuIH0NCg0KICAgICRoZWxwQmxvY2sgPSAkTWF0Y2hlc1sxXS5TcGxpdChbZW52aXJvbm1lbnRdOjpOZXdMaW5lKQ0KDQogICAgZm9yZWFjaCAoJGxpbmUgaW4gJGhlbHBCbG9jaykgew0KICAgICAgICBpZiAoJGxpbmUgLW1hdGNoICdWZXJzaW9uOicpIHsNCiAgICAgICAgICAgIHJldHVybiAkbGluZS5TcGxpdCgnOicpWzFdLlNwbGl0KCctJylbMF0uVHJpbSgpDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1JbkFsbG93ZWRSYW5nZSAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlLCBbaW50XSRMb3dlckxpbWl0LCBbaW50XSRVcHBlckxpbWl0KSB7DQogICAgVGVzdC1QYXJhbUlzSW50ZWdlciAtUGFyYW1OYW1lICRQYXJhbU5hbWUgLVBhcmFtVmFsdWUgJFBhcmFtVmFsdWUNCiAgICAkaW50VmFsdWUgPSAkUGFyYW1WYWx1ZSAtYXMgW2ludF0NCiAgICBpZiAoJGludFZhbHVlIC1sdCAkTG93ZXJMaW1pdCAtb3IgJGludFZhbHVlIC1ndCAkVXBwZXJMaW1pdCkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIEVycm9yIGluIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuIEl0IG11c3QgYmUgYmV0d2VlbiBbJExvd2VyTGltaXQsICRVcHBlckxpbWl0XS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1QYXJhbUlzSW50ZWdlciAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgJGludFZhbHVlID0gJFBhcmFtVmFsdWUgLWFzIFtpbnRdDQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRQYXJhbVZhbHVlKSAtb3IgJG51bGwgLWVxICRpbnRWYWx1ZSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIEVycm9yIGluIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuICckUGFyYW1WYWx1ZScgaXMgbm90IGFuIGludGVnZXIuICINCiAgICB9DQp9DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVycyB2YWxpZGF0aW9uDQojDQpmdW5jdGlvbiBUZXN0LUlucHV0UGFyYW1ldGVycyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgW2ludF0kZGF5c1RocmVzaG9sZCA9IFttYXRoXTo6dHJ1bmNhdGUoKChHZXQtRGF0ZSkgLSBbZGF0ZXRpbWVdOjpNaW5WYWx1ZSkuVG90YWxEYXlzKQ0KDQogICAgVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIGANCiAgICAgICAgLVBhcmFtTmFtZSAnTWF4aW11bURlbGF5SW5TZWNvbmRzJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuTWF4aW11bURlbGF5SW5TZWNvbmRzIGANCiAgICAgICAgLUxvd2VyTGltaXQgMCBgDQogICAgICAgIC1VcHBlckxpbWl0ICRNQVhfU0NSSVBUX0RFTEFZX1NFQw0KICAgIFRlc3QtUGFyYW1JbkFsbG93ZWRSYW5nZSBgDQogICAgICAgIC1QYXJhbU5hbWUgJ1NDQ01DYWNoZUZpbGVzQ3JlYXRpb25BZ2VJbkRheXMnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5TQ0NNQ2FjaGVGaWxlc0NyZWF0aW9uQWdlSW5EYXlzIGANCiAgICAgICAgLUxvd2VyTGltaXQgMCBgDQogICAgICAgIC1VcHBlckxpbWl0ICRkYXlzVGhyZXNob2xkDQogICAgVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIGANCiAgICAgICAgLVBhcmFtTmFtZSAnRHVtcEZpbGVzT2xkZXJUaGFuRGF5cycgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkR1bXBGaWxlc09sZGVyVGhhbkRheXMgYA0KICAgICAgICAtTG93ZXJMaW1pdCAwIGANCiAgICAgICAgLVVwcGVyTGltaXQgJGRheXNUaHJlc2hvbGQNCn0NCg0KIw0KIyBEaXNrIGNsZWFuaW5nIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIEludm9rZS1TeXN0ZW1DbGVhbnVwIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBbbG9uZ10kZnJlZVNwYWNlQmVmb3JlID0gR2V0LUZyZWVTcGFjZQ0KDQogICAgSW52b2tlLURpc21Ub29sDQogICAgUmVtb3ZlLVNDQ01DYWNoZUZpbGVzT2xkZXJUaGFuRGF5cyAtRGF5cyAkSW5wdXRQYXJhbWV0ZXJzLlNDQ01DYWNoZUZpbGVzQ3JlYXRpb25BZ2VJbkRheXMNCiAgICBSZW1vdmUtTWVtb3J5RHVtcEZpbGVzIC1EYXlzICRJbnB1dFBhcmFtZXRlcnMuRHVtcEZpbGVzT2xkZXJUaGFuRGF5cw0KDQogICAgcmV0dXJuIEdldC1GcmVlU3BhY2VBZnRlciAtRnJlZVNwYWNlQmVmb3JlICRmcmVlU3BhY2VCZWZvcmUNCn0NCg0KZnVuY3Rpb24gSW52b2tlLURpc21Ub29sIHsNCiAgICB0cnkgeyBbdm9pZF0oU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJERJU01fRVhFIC1Bcmd1bWVudExpc3QgJERJU01fRVhFX1BBUkFNUyAtTm9OZXdXaW5kb3cpIH0NCiAgICBjYXRjaCB7IHRocm93ICdESVNNIHRvb2wgZXhlY3V0aW9uIGZhaWxlZC4gJyB9DQp9DQoNCmZ1bmN0aW9uIFJlbW92ZS1TQ0NNQ2FjaGVGaWxlc09sZGVyVGhhbkRheXMgKFtpbnRdJERheXMpIHsNCiAgICBpZiAoJERheXMgLWVxIDAgLW9yIC1ub3QgKFRlc3QtU0NDTUNhY2hlUGF0aCkpIHsgcmV0dXJuIH0NCg0KICAgIFJlbW92ZS1MZWdhY3lGaWxlcyAtUGF0aCAkU0NDTV9DQUNIRV9QQVRIIC1GaWxlQWdlVGhyZXNob2xkICREYXlzDQogICAgUmVtb3ZlLUVtcHR5Rm9sZGVycyAtUGF0aCAkU0NDTV9DQUNIRV9QQVRIDQp9DQoNCmZ1bmN0aW9uIFRlc3QtU0NDTUNhY2hlUGF0aCB7DQogICAgcmV0dXJuIFRlc3QtUGF0aCAtUGF0aCAkU0NDTV9DQUNIRV9QQVRIDQp9DQoNCmZ1bmN0aW9uIFJlbW92ZS1MZWdhY3lGaWxlcyAoW3N0cmluZ10kUGF0aCwgW2ludF0kRmlsZUFnZVRocmVzaG9sZCkgew0KICAgIFtkYXRldGltZV0kY3V0b2ZmRGF0ZSA9IEdldC1DdXRvZmZEYXRlIC1GaWxlQWdlVGhyZXNob2xkICRGaWxlQWdlVGhyZXNob2xkDQoNCiAgICBpZiAoLW5vdCAoVGVzdC1Gb2xkZXJJc0VtcHR5IC1QYXRoICRQYXRoKSkgew0KICAgICAgICBHZXQtQ2hpbGRJdGVtIC1QYXRoICRQYXRoIC1SZWN1cnNlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IGANCiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7IC1ub3QgJF8uUFNJc0NvbnRhaW5lciAtYW5kICRfLkxhc3RXcml0ZVRpbWUgLWxlICRjdXRPZmZEYXRlIH0gfCBgDQogICAgICAgICAgICBSZW1vdmUtSXRlbSAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1DdXRvZmZEYXRlIChbaW50XSRGaWxlQWdlVGhyZXNob2xkKSB7DQogICAgcmV0dXJuIChHZXQtRGF0ZSkuQWRkRGF5cygtJEZpbGVBZ2VUaHJlc2hvbGQpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtRm9sZGVySXNFbXB0eSAoW3N0cmluZ10kUGF0aCkgew0KICAgIHJldHVybiAkbnVsbCAtZXEgKEdldC1DaGlsZEl0ZW0gLVBhdGggJFBhdGggLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtRW1wdHlGb2xkZXJzIChbc3RyaW5nXSRQYXRoKSB7DQogICAgW3N0cmluZ1tdXSRmb2xkZXJzUGF0aHNDb2xsZWN0aW9uID0gR2V0LUNoaWxkSXRlbSAtTGl0ZXJhbFBhdGggJFBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUZvcmNlIC1SZWN1cnNlIHwgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVyZS1PYmplY3QgeyAkXy5QU0lzQ29udGFpbmVyIH0gfCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IEZ1bGxOYW1lIHwgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3J0LU9iamVjdCAtUHJvcGVydHkgRnVsbE5hbWUgLURlc2NlbmRpbmcNCg0KICAgIGlmICgkbnVsbCAtZXEgJGZvbGRlcnNQYXRoc0NvbGxlY3Rpb24gKSB7IHJldHVybiB9DQoNCiAgICBmb3JlYWNoICgkZm9sZGVyUGF0aCBpbiAkZm9sZGVyc1BhdGhzQ29sbGVjdGlvbikgew0KICAgICAgICBpZiAoVGVzdC1Gb2xkZXJJc0VtcHR5IC1QYXRoICRmb2xkZXJQYXRoKSB7DQogICAgICAgICAgICBSZW1vdmUtSXRlbSAtTGl0ZXJhbFBhdGggJGZvbGRlclBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgLUZvcmNlIC1SZWN1cnNlIGANCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gUmVtb3ZlLU1lbW9yeUR1bXBGaWxlcyAoW2ludF0kRGF5cykgew0KICAgIGlmICgkRGF5cyAtZXEgMCkgeyByZXR1cm4gfQ0KDQogICAgZm9yZWFjaCAoJGxvY2F0aW9uIGluICRNRU1PUllfRFVNUF9GSUxFU19MT0NBVElPTlMpIHsNCiAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkbG9jYXRpb24pIHsNCiAgICAgICAgICAgIFJlbW92ZS1MZWdhY3lGaWxlcyAtUGF0aCAkbG9jYXRpb24gLUZpbGVBZ2VUaHJlc2hvbGQgJERheXMNCiAgICAgICAgICAgIFJlbW92ZS1FbXB0eUZvbGRlcnMgLVBhdGggJGxvY2F0aW9uDQogICAgICAgIH0NCiAgICB9DQp9DQoNCiMNCiMgRnJlZSBzcGFjZSBtYW5hZ2VtZW50DQojDQpmdW5jdGlvbiBHZXQtRnJlZVNwYWNlIHsNCiAgICAkZnJlZSA9IChHZXQtV21pT2JqZWN0IC1DbGFzcyAnV2luMzJfVm9sdW1lJyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsdGVyICJEcml2ZUxldHRlcj0nJGVudjpTeXN0ZW1Ecml2ZSciIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwNCiAgICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgRnJlZVNwYWNlKQ0KDQogICAgaWYgKCRudWxsIC1lcSAkZnJlZSkgew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICdVbmFibGUgdG8gZ2V0IGZyZWUgc3BhY2UgZnJvbSBzeXN0ZW0gZHJpdmUuICcNCiAgICB9DQogICAgcmV0dXJuICgkZnJlZSAtYXMgW2xvbmddKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRnJlZVNwYWNlQWZ0ZXIgKFtsb25nXSRGcmVlU3BhY2VCZWZvcmUpIHsNCiAgICBbbG9uZ10kY2xlYW51cFNwYWNlID0gKEdldC1GcmVlU3BhY2UpIC0gJEZyZWVTcGFjZUJlZm9yZQ0KICAgIHJldHVybiAkKGlmICgkY2xlYW51cFNwYWNlIC1sZSAwKSB7IDAgLWFzIFtsb25nXSB9IGVsc2UgeyAkY2xlYW51cFNwYWNlIH0pDQp9DQoNCiMNCiMgTmV4dGhpbmsgRW5naW5lIHVwZGF0ZQ0KIw0KZnVuY3Rpb24gVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAoW2xvbmddJENsZWFudXBTcGFjZSkgew0KICAgIFtueHRdOjpXcml0ZU91dHB1dFNpemUoJ0NsZWFudXBTcGFjZScsICRDbGVhbnVwU3BhY2UpDQp9DQoNCiMNCiMgTWFpbiBzY3JpcHQgZmxvdw0KIw0KW2Vudmlyb25tZW50XTo6RXhpdCgoSW52b2tlLU1haW4gLUlucHV0UGFyYW1ldGVycyAkTXlJbnZvY2F0aW9uLkJvdW5kUGFyYW1ldGVycykpDQoNCiMgU0lHICMgQmVnaW4gc2lnbmF0dXJlIGJsb2NrDQojIE1JSWltZ1lKS29aSWh2Y05BUWNDb0lJaWl6Q0NJb2NDQVFFeER6QU5CZ2xnaGtnQlpRTUVBZ0VGQURCNUJnb3INCiMgQmdFRUFZSTNBZ0VFb0dzd2FUQTBCZ29yQmdFRUFZSTNBZ0VlTUNZQ0F3RUFBQVFRSDh3N1lGbExDRTYzSk5MRw0KIyBLWDd6VVFJQkFBSUJBQUlCQUFJQkFBSUJBREF4TUEwR0NXQ0dTQUZsQXdRQ0FRVUFCQ0NyZnhFWW5xTEhuZ25hDQojIDBUYzNhblpHZ0V3RlA4UGVQbjBQTEl5TUNqeExpNkNDRVRzd2dnUEZNSUlDcmFBREFnRUNBaEFDckZ3bWFndEENCiMgbTQ4TGVmS3VSaVYzTUEwR0NTcUdTSWIzRFFFQkJRVUFNR3d4Q3pBSkJnTlZCQVlUQWxWVE1SVXdFd1lEVlFRSw0KIyBFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweEt6QXBCZ05WDQojIEJBTVRJa1JwWjJsRFpYSjBJRWhwWjJnZ1FYTnpkWEpoYm1ObElFVldJRkp2YjNRZ1EwRXdIaGNOTURZeE1URXcNCiMgTURBd01EQXdXaGNOTXpFeE1URXdNREF3TURBd1dqQnNNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTQ0KIyBSR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVNzd0tRWURWUVFEDQojIEV5SkVhV2RwUTJWeWRDQklhV2RvSUVGemMzVnlZVzVqWlNCRlZpQlNiMjkwSUVOQk1JSUJJakFOQmdrcWhraUcNCiMgOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXhzemxjK2I3MUx2bExTMHlwdC9sZ1QvSnpTVkp0bkVxdzlXVQ0KIyBOR2VpQ2h5d1gybW1RTEhFdDdLUDBKaWtxVUZaT3RQY2xOWTgyM1E0cEVyTVRTV0M5MHFsVXhJNDd2TkpiWEdSDQojIGZtTzJxNlpmdzZTRStFOWlVYjc0eGV6Yk9KTGpCdVVJa1F6RUtFRlYrOHRhaVJWK2NlZzF2MDF5Q1QyK09qaFENCiMgVzNjeEc0Mnp4eVJGbXFlc2JRQVVXZ1MzdWhQclVRcVlRVUVpVG1WaGg0RkJVS1o1WEluZUdVcFgxUzdtWFJ4VA0KIyBMSDZZelJvR0ZxUm9jOUEwQkJOY29YSFRXbnhWMjE1azRUZUhNRllFNVJHMEtZQVM4WGs1aUtJQ0VYd25acmVJDQojIHQzanl5Z3FvT0tzS1pNSy9abDJWaE1HaEpSNkhYUnBRQ3lBU3pFRzdiZ3RST0xoTHl3SURBUUFCbzJNd1lUQU8NCiMgQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVzVDdEYVFQNA0KIyB2MGNCMUpnbUdnZ0M3Mk5rSzhNd0h3WURWUjBqQkJnd0ZvQVVzVDdEYVFQNHYwY0IxSmdtR2dnQzcyTmtLOE13DQojIERRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFCd2FCcGZjMTV5ZlBJaG1CZ2hYSWRzaFIvZ3FaNnEvR0RKMlFCQlgNCiMgd1lyemV0a1JaWTQxK3A3OFJiV2UyVXd4UzdpUjZFTXNqck40enR2alUzbHgxdVVobEFIYVZZZWFKR1QyaW1iTQ0KIyAzcHczemFnMHNXbWJJOGllZUNJcmNFUGpWVWN4WVJudldNV0ZMMDR3OXFBeEZpUEk1K0psRmpQTHZ4b2JvRDM0DQojIHlsNkxNWXRnQ0lrdERBWmNVcmZFK1FxWTBSVmZueEsrZkRaak9MMUVwSC9rSmlzS3hKZHBEZW1NNHNBUVY3akkNCiMgZGhLUlZmSklhZGk4S2dKYkQwVFVJREhiOUxwd0psMlFZSjY4U3hjSkw3VExIa05veVFjbndkSmM5K29odVdnUw0KIyBuRHljdjU3OGdGeWJZODNzUjZvbEoyZWdOL01BZ24xVTE2bjQ2UzRUbzNmb0gwb3dnZ2F1TUlJRmxxQURBZ0VDDQojIEFoQUtHZzBiY28rVXVMZHdGQ0I4S2dyRU1BMEdDU3FHU0liM0RRRUJDd1VBTUd3eEN6QUpCZ05WQkFZVEFsVlQNCiMgTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1ag0KIyBiMjB4S3pBcEJnTlZCQU1USWtScFoybERaWEowSUVWV0lFTnZaR1VnVTJsbmJtbHVaeUJEUVNBb1UwaEJNaWt3DQojIEhoY05NakF3T0RFM01EQXdNREF3V2hjTk1qTXdPREl5TVRJd01EQXdXakNCd0RFVE1CRUdDeXNHQVFRQmdqYzgNCiMgQWdFREV3SkRTREVWTUJNR0N5c0dBUVFCZ2pjOEFnRUNFd1JXWVhWa01SMHdHd1lEVlFRUERCUlFjbWwyWVhSbA0KIyBJRTl5WjJGdWFYcGhkR2x2YmpFWU1CWUdBMVVFQlJNUFEwaEZMVEV4TWk0d01EQXVOVGM1TVFzd0NRWURWUVFHDQojIEV3SkRTREVQTUEwR0ExVUVCeE1HVUhKcGJHeDVNUll3RkFZRFZRUUtFdzFPUlZoVWFHbHVheUJUTGtFdU1Rc3cNCiMgQ1FZRFZRUUxFd0pTUkRFV01CUUdBMVVFQXhNTlRrVllWR2hwYm1zZ1V5NUJMakNDQWlJd0RRWUpLb1pJaHZjTg0KIyBBUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTE1icjhrNUI0VVQ3RTkrNlNrb2EzSWh5OHY2dlNIV2E1VGZwdFBuDQojIEIxSlE3QmdzdzZFRENJL0hySWxjUlJGK2ZlWEdZUFlha0o1bmcxY2tNMjJ1L0Z0QW1ybGhiNVZMRk9lTWl1Yi8NCiMgUjVjUFE2SWhqZENuVGlWUHJCYllldkNteUhPVGRxYzc0R0Z5Z0JLK2cvWkxacU9XSkRraHdWaW1UTlRQMVJPLw0KIyBCZWMzSkkzcnIwQ3VJcXFHdkN0L1R1Y1BzelZ5dUtSVml3NWd2TWthd1F2ZndUOE1tTGZGa3I5OGx0NEJsVFpHDQojIFNrb1B1bUVTK2JKZFdNVHRkVGZaSWsrS1F2NjBvV21zV2xJL0x4ZSttMXFJbkNFRExGblNzUUlOK0hHa2FiVzUNCiMgVWlFSjZiRGpaQ0lCNVBoUVhqdjBXWExUR1pxVGNiQmVCTElBbjA2TDlUSUg2b0NHODdRbHJYZHlzT0RjYXFpUQ0KIyBTa0FKN2JYUXNjZldzUkhXUHJSelUzNkEybU94REtFUkd4SDNpUER4ZlY5TkFFYjhoZEZUZnhKUk1hK2hFQXF0DQojIDZxeDRQdVVaYnU3bThUcmgrZkhLbzVTOWJ3WGtZbWkwVERPTnBZRVFtYjcrbGVmY0hxTE5hSWdwZmRLNWgvMFYNCiMgbFVscER3bE5HWE1mRTJhQmhOUjZMNU85OXIxMVkycUpBMU9tTUJjUE5vWTdsalhtZE1IdTFWOS9ERTBKSzRPWQ0KIyBWeGJuVVZNcVRmMy9WZ1p4R2VjWU1NZmFtanY0MnNQRnZNZGFDajhDM040YzBkNHNXT2x0SmtqQ21pNWZLdzl5DQojIFVHTHpVeldPZng5eTBhVFFuOVNkL3k2OGNCUC9KbC8xa3dzM3hQNE9yc3psNXZBRmVuVFF3dE9ITGdzb2swRUYNCiMgRnVhTEFnTUJBQUdqZ2dIMU1JSUI4VEFmQmdOVkhTTUVHREFXZ0JTUDZIN3diVEpxQUFVangzQ1hhanFRLzJ2cQ0KIyAxREFkQmdOVkhRNEVGZ1FVVWx1b3pQQ0lvWUJ5dUQ0ZFZCY0NsYnc0NjM4d01nWURWUjBSQkNzd0thQW5CZ2dyDQojIEJnRUZCUWNJQTZBYk1Ca01GME5JTFZaQlZVUXRRMGhGTFRFeE1pNHdNREF1TlRjNU1BNEdBMVVkRHdFQi93UUUNCiMgQXdJSGdEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBekI3QmdOVkhSOEVkREJ5TURlZ05hQXpoakZvZEhSdw0KIyBPaTh2WTNKc015NWthV2RwWTJWeWRDNWpiMjB2UlZaRGIyUmxVMmxuYm1sdVoxTklRVEl0WnpFdVkzSnNNRGVnDQojIE5hQXpoakZvZEhSd09pOHZZM0pzTkM1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXQNCiMgWnpFdVkzSnNNRXNHQTFVZElBUkVNRUl3TndZSllJWklBWWI5YkFNQ01Db3dLQVlJS3dZQkJRVUhBZ0VXSEdoMA0KIyBkSEJ6T2k4dmQzZDNMbVJwWjJsalpYSjBMbU52YlM5RFVGTXdCd1lGWjRFTUFRTXdmZ1lJS3dZQkJRVUhBUUVFDQojIGNqQndNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUndPaTh2YjJOemNDNWthV2RwWTJWeWRDNWpiMjB3U0FZSUt3WUINCiMgQlFVSE1BS0dQR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRVZXUTI5aw0KIyBaVk5wWjI1cGJtZERRUzFUU0VFeUxtTnlkREFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBDQojIEE0SUJBUUFZNklCNFBuTmN6aGRlbVZWaWR0VDhYVDBQKy9FajliYmFNSW1SNkhFTFRjWVgxOWdqa3NGTlVyUjYNCiMgL1hVUGdhai9uU3BscjVPajNESjVKQ1BvMkFWS3dZMW1VV1MydVlvWlJpbkVBb2REZkVTcWZUaVIxOTgyeHA3Mg0KIyBnbzM0N0dUTW5wcGsyRXBkdUlpb2krZGN3YmJ3MURmMm5GekkzRmNYN0gxVUlQZDhNNHAzVUF0NVdDaVZNUEhXDQojIFh4clF0NW44anhnTGN1c3ZPUlhacVpPc2RUbDdIWnBzVkhuR1VZNzg3T3UwSUp4dUZzaVVNNjRiS0d6dk5xcXQNCiMgWXlGeVI5OUVyQ1RxZFo2NnVyYUZpbEFnalB3YUxGekpVdzYrYUsvd1d4S0I3UTBwaUlDcGVYMVgwSUxadTU2Rw0KIyBSMjA2VkVjbXhXSUxZalFFMk5aY1QrN3ZiVXptTUlJR3ZEQ0NCYVNnQXdJQkFnSVFBL0cwNFY4Nmd2RVVsbml6DQojIDE5aEhYREFOQmdrcWhraUc5dzBCQVFzRkFEQnNNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG4NCiMgYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVNzd0tRWURWUVFERXlKRQ0KIyBhV2RwUTJWeWRDQklhV2RvSUVGemMzVnlZVzVqWlNCRlZpQlNiMjkwSUVOQk1CNFhEVEV5TURReE9ERXlNREF3DQojIE1Gb1hEVEkzTURReE9ERXlNREF3TUZvd2JERUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybEQNCiMgWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEVyTUNrR0ExVUVBeE1pUkdsbg0KIyBhVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5S1RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCDQojIEJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtkVCtnK3l0UlB4Wk0rRWdQeXVnRFhSdHRmSG95eXNHaXlzOFlTc09qVVMNCiMgT3BLUnVsZmt4TW56TDZoSVBMZldidHlYSXJwUmVXR3ZReThOdDV1MFNUR3VSRmcrcEtHV3A0ZFBJMzdEYkdVaw0KIyBrRlUrb2NvamZNVkM2Y1I2WWtXYmZkNWpkTXVlWXlYNGhKcWFyVVZQcm4wZnlCUExkWnZKNGVHSytBc01tUFRLDQojIFB0QkZxbm9lcFZpVE5qUytLeTRyTVZobXRESVFuNTN3VXFIdjZEN1RkdkpBV3R6NmFqMGJTNjEyc0l4YzdqYTYNCiMgZytvd3FFemU4UXNxV0VHSXJnQ0pxd1BSRm9JZ0luYnJYbFE0RW1MaDBuQWsyKzBmY05Ka0NZQXQ0cmFkemgveQ0KIyB1eUh6Yk52WXN4bDdpbENmNyt3MkNseWF0MHJUQ0tBNWVmM2R2ejA2Q1NVQ0F3RUFBYU9DQTFnd2dnTlVNQklHDQojIEExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd0RnWURWUjBQQVFIL0JBUURBZ0dHTUJNR0ExVWRKUVFNTUFvR0NDc0cNCiMgQVFVRkJ3TURNSDhHQ0NzR0FRVUZCd0VCQkhNd2NUQWtCZ2dyQmdFRkJRY3dBWVlZYUhSMGNEb3ZMMjlqYzNBdQ0KIyBaR2xuYVdObGNuUXVZMjl0TUVrR0NDc0dBUVVGQnpBQ2hqMW9kSFJ3T2k4dlkyRmpaWEowY3k1a2FXZHBZMlZ5DQojIGRDNWpiMjB2UkdsbmFVTmxjblJJYVdkb1FYTnpkWEpoYm1ObFJWWlNiMjkwUTBFdVkzSjBNSUdQQmdOVkhSOEUNCiMgZ1ljd2dZUXdRS0Erb0R5R09taDBkSEE2THk5amNtd3pMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVocA0KIyBaMmhCYzNOMWNtRnVZMlZGVmxKdmIzUkRRUzVqY213d1FLQStvRHlHT21oMGRIQTZMeTlqY213MExtUnBaMmxqDQojIFpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVocFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3Z2dIRUJnTlYNCiMgSFNBRWdnRzdNSUlCdHpDQ0FiTUdDV0NHU0FHRy9Xd0RBakNDQWFRd09nWUlLd1lCQlFVSEFnRVdMbWgwZEhBNg0KIyBMeTkzZDNjdVpHbG5hV05sY25RdVkyOXRMM056YkMxamNITXRjbVZ3YjNOcGRHOXllUzVvZEcwd2dnRmtCZ2dyDQojIEJnRUZCUWNDQWpDQ0FWWWVnZ0ZTQUVFQWJnQjVBQ0FBZFFCekFHVUFJQUJ2QUdZQUlBQjBBR2dBYVFCekFDQUENCiMgUXdCbEFISUFkQUJwQUdZQWFRQmpBR0VBZEFCbEFDQUFZd0J2QUc0QWN3QjBBR2tBZEFCMUFIUUFaUUJ6QUNBQQ0KIyBZUUJqQUdNQVpRQndBSFFBWVFCdUFHTUFaUUFnQUc4QVpnQWdBSFFBYUFCbEFDQUFSQUJwQUdjQWFRQkRBR1VBDQojIGNnQjBBQ0FBUXdCUUFDOEFRd0JRQUZNQUlBQmhBRzRBWkFBZ0FIUUFhQUJsQUNBQVVnQmxBR3dBZVFCcEFHNEENCiMgWndBZ0FGQUFZUUJ5QUhRQWVRQWdBRUVBWndCeUFHVUFaUUJ0QUdVQWJnQjBBQ0FBZHdCb0FHa0FZd0JvQUNBQQ0KIyBiQUJwQUcwQWFRQjBBQ0FBYkFCcEFHRUFZZ0JwQUd3QWFRQjBBSGtBSUFCaEFHNEFaQUFnQUdFQWNnQmxBQ0FBDQojIGFRQnVBR01BYndCeUFIQUFid0J5QUdFQWRBQmxBR1FBSUFCb0FHVUFjZ0JsQUdrQWJnQWdBR0lBZVFBZ0FISUENCiMgWlFCbUFHVUFjZ0JsQUc0QVl3QmxBQzR3SFFZRFZSME9CQllFRkkvb2Z2QnRNbW9BQlNQSGNKZHFPcEQvYStyVQ0KIyBNQjhHQTFVZEl3UVlNQmFBRkxFK3cya0QrTDlIQWRTWUpob0lBdTlqWkN2RE1BMEdDU3FHU0liM0RRRUJDd1VBDQojIEE0SUJBUUFaTTBvTWdUTTMyNjAyeWVUSk9ydTFHeTU2b3VMMFEwSVhucjlPb1UzaHNkdnBnZDJmQWZMa2lOWHANCiMgL2duOUljSHNYWURTOE5iQlE4TCtkeXZiK2RlUk04NXMxYklaTytZdTFzbVRUNGhBanMzaDlYN3hEOFpaVm5Mbw0KIyA2MnBCdlJ6VlJ0VjhTY3BtT0JYQnYrQ1JjSGVIM01tTk1ja01LYUl6N1kzaWg4MkpqVDhiLzlYZ0dwZUxmTnB0DQojICs2akdzanBtYTNzQnM4M1lwalRzRWdHcmxWaWx4Rk5YcUdEbTV3SVNvTGtqWktKTnUzeUJKV1FodnMvdVFoaEQNCiMgbDd1bE53YXZUZjhtcFUxaFMreEdRYmhsenJoNW5naVdDNEdNaWp1UHg1bU1veXB1bUcxZVljYVd0NHE1WVMyVA0KIyB1T3NPQkVQWDlmNm04R0xVbVdxbHdjSHdaSlNBTVlJUXRUQ0NFTEVDQVFFd2dZQXdiREVMTUFrR0ExVUVCaE1DDQojIFZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjANCiMgTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuYVVObGNuUWdSVllnUTI5a1pTQlRhV2R1YVc1bklFTkJJQ2hUU0VFeQ0KIyBLUUlRQ2hvTkczS1BsTGkzY0JRZ2ZDb0t4REFOQmdsZ2hrZ0JaUU1FQWdFRkFLQ0JoREFZQmdvckJnRUVBWUkzDQojIEFnRU1NUW93Q0tBQ2dBQ2hBb0FBTUJrR0NTcUdTSWIzRFFFSkF6RU1CZ29yQmdFRUFZSTNBZ0VFTUJ3R0Npc0cNCiMgQVFRQmdqY0NBUXN4RGpBTUJnb3JCZ0VFQVlJM0FnRVZNQzhHQ1NxR1NJYjNEUUVKQkRFaUJDQzZHN24zdHRTVA0KIyBmZ3lYdFhmTithMlZxbytLWkY4a3djNm9QUWcrNmVvZjVUQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0FnQnhqOHBwDQojIGpvVkRMd1BqMHpiaWdDdnpsejE2Z2I5cnB3Y05XaitzVDVhRFFJT2dIbktlb3Arc20rWHNKTXVXYlFUZElDc3YNCiMgOGdEUmhHbUdERXk0ZC9xbVc5dnpiVGZvOThlSFgxTEkyU0duY2E5QW01dzlEYk14Nkh3bEU1NjZpRjZ5S2h2dQ0KIyB4VzZjQ2RkWDkzVDlWTTBhR2p5cVVIMkFzY1VzWllGby9BbzFYQ3NabkFOYzdvMk4yRUd3V1IwUzB1aEk1UUhhDQojIHhjR0xoUTUyaWFCNWJ5MUhDMTFEMFlEY2JkS3cyUW8vTGczNGUwNy9JQmdrbndGallkZXRyeHRIQnMzZ2owZnYNCiMgNW9TNGNZY3VsaXppSi8xQkYxWkFOeU9CZlNSMlIvM09kSTBESUVyMU40cEtKYUhmdEZpc1pzcWpJQm54UlNXYw0KIyBHcm1KTjY1ZlFsQllKL1hRSExwYjlTWXoveUtlZEpHOERpQzZDaXp5eTlVYzJRZlJqNWFheCs1TzZUQ1poRnQ2DQojIDNKOEJHVjR2SEFFNHUwTU5WYUsyWDF3dFphcFdiNVNvSm9NdEtXSHJ3Ny9EQ0ZucG4rWXV1N3gwMElqUzk5SloNCiMgTVFrSFJhendOT1ZJMEMvYzdrTTdBckJvdDVGUXA1OGd6VGVVWlFiQVlQeS9hNEZIelcwdCtXVG9yY0wrYXN1VA0KIyBxZmhPcVQzS3h4NGx4Q3ZIVXJ1TTJjdW1CY2xmdkYxWHZDL2xNRlIvaWhsNHhEU1ozSE5MbU5CeUtDS2xOTDZyDQojICtJOUxvdHhPSWRNcHJhZ3V6OEkydWJmKzhtUis3b0Fxa0FwVWhOUm15K0M5b1ZYVFN3R2RHSC9QQ2tKTndCOWwNCiMgZkRvNlk5QnBzVytLa2E3dkRIT0lEUDFBQXErdlZjbEhUV3RUREtHQ0RYNHdnZzE2QmdvckJnRUVBWUkzQXdNQg0KIyBNWUlOYWpDQ0RXWUdDU3FHU0liM0RRRUhBcUNDRFZjd2dnMVRBZ0VETVE4d0RRWUpZSVpJQVdVREJBSUJCUUF3DQojIGVBWUxLb1pJaHZjTkFRa1FBUVNnYVFSbk1HVUNBUUVHQ1dDR1NBR0cvV3dIQVRBeE1BMEdDV0NHU0FGbEF3UUMNCiMgQVFVQUJDRGd3eEFEOTAvZlB3ZmhiYWtEWU5NdmVEUWV5aWJ5WW44RTZoUmsreXhVTXdJUkFKd0pWYUlzZERUZw0KIyBuTXhMb21RWUVva1lEekl3TWpJd016STFNVEF4TWpFMldxQ0NDamN3Z2dUK01JSUQ1cUFEQWdFQ0FoQU5Ra3JnDQojIHZqcUkvMkJBSWM0VUFQRGRNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1ISXhDekFKQmdOVkJBWVRBbFZUTVJVd0V3WUQNCiMgVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4TVRBdg0KIyBCZ05WQkFNVEtFUnBaMmxEWlhKMElGTklRVElnUVhOemRYSmxaQ0JKUkNCVWFXMWxjM1JoYlhCcGJtY2dRMEV3DQojIEhoY05NakV3TVRBeE1EQXdNREF3V2hjTk16RXdNVEEyTURBd01EQXdXakJJTVFzd0NRWURWUVFHRXdKVlV6RVgNCiMgTUJVR0ExVUVDaE1PUkdsbmFVTmxjblFzSUVsdVl5NHhJREFlQmdOVkJBTVRGMFJwWjJsRFpYSjBJRlJwYldWeg0KIyBkR0Z0Y0NBeU1ESXhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXd1WmhoR2ZGDQojIGl2VU5DS1JGeW1OclVkYzZFVUs5Q25WMVRaUzBERkMxSmhEK0hjaHZrV3NNbHVjYVhFanZST1cvbTJITkZaRmkNCiMgV3JqL1p3dWNZLzAyYW9INktmamRLM0NGM2dJWTgzaHR2SDM1eDIwSlBiNXFkb2ZwaXIzNGhGMGVkc25reG5aMg0KIyBPbFBSMGROYU5vL0dvK0V2R3pxM1lkWno3RTV0TTRwOFhVVXRTN0ZRNWtFNk4xYUczSk1qamZkUUplaGs1dDNUDQojIGp5OVh0WWNnNnc2T0xOVWoydlJOZUViakE0TXhLVXBjRERHS1NveUl4ZmN3V3ZrVXJ4VmZiRU5KQ2YwbUkxUDINCiMgaldQb0dxdGJzUjB3d3B0cGdyVGIvRlpVdkIraGg2dStlbHNLSUM5TENjbVZwNDJ5K3RaamkwNmxjaHp1bjNvQg0KIyBjL2daMXY0TlNZUzlBUUlEQVFBQm80SUJ1RENDQWJRd0RnWURWUjBQQVFIL0JBUURBZ2VBTUF3R0ExVWRFd0VCDQojIC93UUNNQUF3RmdZRFZSMGxBUUgvQkF3d0NnWUlLd1lCQlFVSEF3Z3dRUVlEVlIwZ0JEb3dPREEyQmdsZ2hrZ0INCiMgaHYxc0J3RXdLVEFuQmdnckJnRUZCUWNDQVJZYmFIUjBjRG92TDNkM2R5NWthV2RwWTJWeWRDNWpiMjB2UTFCVA0KIyBNQjhHQTFVZEl3UVlNQmFBRlBTMjRTQWQvaW11MHVSaHBiS2lKYkxJRnpWdU1CMEdBMVVkRGdRV0JCUTJSSWFPDQojIHBMcXdacjY4S0MwZFJEYmQ0MnA2dkRCeEJnTlZIUjhFYWpCb01ES2dNS0F1aGl4b2RIUndPaTh2WTNKc015NWsNCiMgYVdkcFkyVnlkQzVqYjIwdmMyaGhNaTFoYzNOMWNtVmtMWFJ6TG1OeWJEQXlvRENnTG9Zc2FIUjBjRG92TDJOeQ0KIyBiRFF1WkdsbmFXTmxjblF1WTI5dEwzTm9ZVEl0WVhOemRYSmxaQzEwY3k1amNtd3dnWVVHQ0NzR0FRVUZCd0VCDQojIEJIa3dkekFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXVaR2xuYVdObGNuUXVZMjl0TUU4R0NDc0cNCiMgQVFVRkJ6QUNoa05vZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmxjblJUU0VFeQ0KIyBRWE56ZFhKbFpFbEVWR2x0WlhOMFlXMXdhVzVuUTBFdVkzSjBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJJDQojIEhOeTE2Wm9qdk9jYTV5QU9qbWRHL1VKeVVYUUtJMGVqcTVMU0pjUndXYjRVb09VbmdhVk5GQlVaQjNudzBRVEQNCiMgaHRrN3ZmNUVBbVpON1dta0QvYTRjTTlpNlBWUlNuaDVObm9udC9QblVwK1RwKzFEbm52bnROMUJJb243aDZKRw0KIyBBMDc4OVA2M1pIZGpYeU5TYVlPQytocFQ3WkRNamFFWGN3MzA4MlU1Y0V2em5OWjZlOW9NdkQweTBCdkw5V0g4DQojIGRRZ0FkcnlCRHZqQTRWelB4QkZ5NXh0a1NkZ2ltblVWUXZVdE1qaUIydlJnb3JxMFV2dGM0R0VrSlUreTM4a3ANCiMgcUhORFVkcTlZOVlmVzV2M0xodFBFeDMzU2cxeGZwZTM5RCtFNjhIam8wbWgrczZudjFiUHVsbDJZWWxmZnFlMA0KIyBqbWQ0K1RhWTRjc28ybHVIcG9vdk1JSUZNVENDQkJtZ0F3SUJBZ0lRQ3FFbDF0WXlHMzVCNUFYYU5wZkNGVEFODQojIEJna3Foa2lHOXcwQkFRc0ZBREJsTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWcNCiMgU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1TUXdJZ1lEVlFRREV4dEVhV2RwUTJWeQ0KIyBkQ0JCYzNOMWNtVmtJRWxFSUZKdmIzUWdRMEV3SGhjTk1UWXdNVEEzTVRJd01EQXdXaGNOTXpFd01UQTNNVEl3DQojIE1EQXdXakJ5TVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WUQNCiMgVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1URXdMd1lEVlFRREV5aEVhV2RwUTJWeWRDQlRTRUV5SUVGeg0KIyBjM1Z5WldRZ1NVUWdWR2x0WlhOMFlXMXdhVzVuSUVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBDQojIE1JSUJDZ0tDQVFFQXZkQXk3a3ZOajMvZHFicUNtY1U1VkNoWHRpTkt4QTRIUlROUkVIM1ErWDFOYUg3bnRxRDANCiMgamJPSTVKZS9ZeUdRbUw4VHZGZlR3K0YrQ05acUZBQTQ5eTRlTys3TXB2WXlXZjVmWlQvZ20rdmpSa2NHR2xWKw0KIyBDeWQrd0tMMW9PRGVJajhPLzM2VisvT2p1aUkrR0t3UjVQQ1pBMjA3aFh3SjArNWR5Sm9MVk9Pb0NYRnI0TThpDQojIEVBOTF6M0Z5VGdxdDMwQTZYTGRSNGFGNUZNWk5KQ013WGJ6c1BHQnFyQzhIelAzdzZrZlppRkJlL1dadVZtRW4NCiMgS1ltRVVlYUM1MFpRL1pRcUxLZmtkVDY2bUErRWY1OHhGTmF0MWZKa3kzc2VCZENFR1hJWDhSY0c3ejNOMWszdg0KIyBCa0w5b2xNcVQ0VWR4QjA4cjgvYXJCRDEzYXlzNlZiL2t3SURBUUFCbzRJQnpqQ0NBY293SFFZRFZSME9CQllFDQojIEZQUzI0U0FkL2ltdTB1UmhwYktpSmJMSUZ6VnVNQjhHQTFVZEl3UVlNQmFBRkVYcm9xLzBrc3VDTVMxUmk2ZW4NCiMgSVozemJjZ1BNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZA0KIyBKUVFNTUFvR0NDc0dBUVVGQndNSU1Ia0dDQ3NHQVFVRkJ3RUJCRzB3YXpBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwDQojIGNEb3ZMMjlqYzNBdVpHbG5hV05sY25RdVkyOXRNRU1HQ0NzR0FRVUZCekFDaGpkb2RIUndPaTh2WTJGalpYSjANCiMgY3k1a2FXZHBZMlZ5ZEM1amIyMHZSR2xuYVVObGNuUkJjM04xY21Wa1NVUlNiMjkwUTBFdVkzSjBNSUdCQmdOVg0KIyBIUjhFZWpCNE1EcWdPS0EyaGpSb2RIUndPaTh2WTNKc05DNWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmxjblJCDQojIGMzTjFjbVZrU1VSU2IyOTBRMEV1WTNKc01EcWdPS0EyaGpSb2RIUndPaTh2WTNKc015NWthV2RwWTJWeWRDNWoNCiMgYjIwdlJHbG5hVU5sY25SQmMzTjFjbVZrU1VSU2IyOTBRMEV1WTNKc01GQUdBMVVkSUFSSk1FY3dPQVlLWUlaSQ0KIyBBWWI5YkFBQ0JEQXFNQ2dHQ0NzR0FRVUZCd0lCRmh4b2RIUndjem92TDNkM2R5NWthV2RwWTJWeWRDNWpiMjB2DQojIFExQlRNQXNHQ1dDR1NBR0cvV3dIQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWNaVVM2VkdIVm1uTjc5M2ENCiMgZktwamVyTjR6d1kzUUlUdlM0Uy95czhEQXYzRnA4TU9JRUlzcjNmekt4OE1JVm9xdHdVMEhXcXVtZmdub21hLw0KIyBDYXBnMzNha09wTVArTExSMkh3Wll1aGVnaVVleExvY2V5d2g0dFpiTEJRMVF3Um9zdHQxQXVCeXg1aldQR1RsDQojIEgwZ1FHRitKT0dGTllrWWtoMk9Na1ZJc3J5bUo1WGdmMWdzVXBZRFhFa2R3czNYVms0V1RmcmFTWi90VFlZbW8NCiMgOVd1V3dQUllhUTE4eUFHeHVTaDF0NWxqaFNLTVljcDVsSDVaL0l3UDQyKzFBU2EyYktYdWgxRWg1RmhnbTdvTQ0KIyBMU3R0b3NSK3U4UWxLMGNDQ0h4SnJoTzI0WHhDUWlqR0dGYlBRVFMyWmwyMmRIdjFWak1pTHlJMnNrdWlTcFhZDQojIDlhYU9VakdDQW9Zd2dnS0NBZ0VCTUlHR01ISXhDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLRXd4RWFXZHANCiMgUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4TVRBdkJnTlZCQU1US0VScA0KIyBaMmxEWlhKMElGTklRVElnUVhOemRYSmxaQ0JKUkNCVWFXMWxjM1JoYlhCcGJtY2dRMEVDRUExQ1N1QytPb2ovDQojIFlFQWh6aFFBOE4wd0RRWUpZSVpJQVdVREJBSUJCUUNnZ2RFd0dnWUpLb1pJaHZjTkFRa0RNUTBHQ3lxR1NJYjMNCiMgRFFFSkVBRUVNQndHQ1NxR1NJYjNEUUVKQlRFUEZ3MHlNakF6TWpVeE1ERXlNVFphTUNzR0N5cUdTSWIzRFFFSg0KIyBFQUlNTVJ3d0dqQVlNQllFRk9IWGdxamhrYjd2YThvV2tiV3F0SlNtSkp2ek1DOEdDU3FHU0liM0RRRUpCREVpDQojIEJDQ2lBS1U4ZjJudGYxV0Z6QThPREtvWFRXY1V4d0U0bUFVNyt1cGFWSlF4SmpBM0Jnc3Foa2lHOXcwQkNSQUMNCiMgTHpFb01DWXdKREFpQkNDekVKQUd2QXJaZ3dlUlZ5bmdSQU5CWElQaktTdGhUeWFXVEkwMWNlejFxVEFOQmdrcQ0KIyBoa2lHOXcwQkFRRUZBQVNDQVFCV0NPb3A2TCtpamxoRW95UEJTNTlpVlNIQTFycXVXQmIrMGFMMm40czhJY201DQojIHIwdjJiZHJ1QmNxbENqK2FJdndsejQrSXJvazVNVzR5OXJ3ankrMHdTYi9TZytRZG9XYWU0a3pzRG5zVnZ1VHkNCiMgY3BieU00NjRYS0dza0pHeHRzdVZsalZlemhtck1obFA5bmtjUkg2d0l3T3hvSHJLL2E3VFhKc1hFMnB2OXNZZA0KIyBBYkRSL3NsZVBSY240YzVzbUdVMkdDY0hUaVVtSVpwR1g2VVBXYkRwbGJOUFFUZk1NSkFtZ1Uwd21iY2x2Z3JMDQojIEM1am5OWXA3WFUzc1VPRlhxL0YzYTFhcllQUW94ZjZuaHdaVTFneXB6QWxEWGJhS3hHTWtSVG84RkJyOFBkdnMNCiMgY0V5azVjSlAxcEhxdUhVanNKZStTM29STTFSN3FWQnBjMzBmK1Zicg0KIyBTSUcgIyBFbmQgc2lnbmF0dXJlIGJsb2NrDQo="}}}