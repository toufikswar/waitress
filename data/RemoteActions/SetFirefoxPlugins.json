{"id": "Set_Firefox_Plugins_windows", "name": "Set Firefox Plugins", "description": "Enforces a set of plugins to be present by both installing the provided plugins and removing the unwanted ones. If needed the previous policies can be completely removed.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Campaign Id to invoke when Firefox is needed to be closed", "id": "CampaignId", "name": "CampaignId", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of pairs (urls to the proper .xpi files) + a colon (:) + Id. Type \"\" to not change this policy", "id": "MandatoryPlugins", "name": "MandatoryPlugins", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Plugin Id, or a comma-separated list of plugins Ids to be removed on the device. Type \"\" to not change this policy", "id": "RemovePlugins", "name": "RemovePlugins", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Set if the previous Firefox policies have to be removed before applying the new ones stated in the previous parameters. Set it to \"true\" for deletion, \"false\" otherwise", "id": "RemovePreviousPolicies", "name": "RemovePreviousPolicies", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "True if you want to skip any user notification and install / remove the extensions in the background. The changes will be applied the next time the user starts Firefox. If false, the RA will try to close the Firefox application either using the campaign mentioned before or forcing a closure", "id": "SkipFirefoxClosure", "name": "SkipFirefoxClosure", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-FirefoxPlugins.ps1", "script": ""}}}