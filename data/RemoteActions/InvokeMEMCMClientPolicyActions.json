{"id": "Invoke_MEMCM_Client_Policy_Actions_windows", "name": "Invoke MEMCM Client Policy Actions", "description": "Triggers the execution of the desired MEMCM execution policy on the device.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "MEMCM policy which the user wishes to trigger", "id": "PolicyToTrigger", "name": "PolicyToTrigger", "allowCustomValue": false, "options": ["AppDeployment", "DiscoveryData", "FileCollection", "HardwareInventory", "MachinePolicy", "SoftwareInventory", "SoftwareMetering", "UpdatesDeployment", "UpdatesScan"], "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Invoke-MEMCMClientPolicyActions.ps1", "script": ""}}}