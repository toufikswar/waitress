{"id": "Invoke_Collector_Cloud_Migration_windows", "name": "Invoke Collector Cloud Migration", "description": ". Verifies if target device can connect to the Nexthink Cloud instance via the given address and TCP port. \n- If connection succeeded, the remote action will configure target device's Collector to connect to the given destination Engine in the 'EnginesMapping' input parameter (based on the currently configured Engine). \nOnce destination Engine has been changed, the remote action will test connectivity again", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading of the Engine. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of Engines addresses (either IPv4 addresses or DNS names) and their respective Cloud Engine for the migration. The mapping must have the following format\"\":\"\" old_engine_address:cloud_engine_address. Example\"\":\"\" \"on-premise-engine1.acme.local:cloud-engine1.acme.com, 10.6.6.4:cloud-engine.acme.com, 172.24.10.2:34.16.98.56\"", "id": "EnginesMapping", "name": "EnginesMapping", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Optional parameter to change the TCP port of the connection", "id": "TCPPort", "name": "TCPPort", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Indicates if the connection test to the Nexthink Cloud instance was successful or not", "id": "ConnectionEstablished", "name": "ConnectionEstablished", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates if the Collector is configured to send data over TCP", "id": "CollectorDataOverTCP", "name": "CollectorDataOverTCP", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether the new configuration was set and the scheduled task (to restart Collector) was created correctly. If false, it means that no change is necessary (value already set)", "id": "DestinationChangedSchedule", "name": "DestinationChangedSchedule", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates if Collector has been correctly reconfigured to communicate with the corresponding Cloud Nexthink instance", "id": "DestinationChanged", "name": "DestinationChanged", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates if a rollback was needed. If true, it means Collector will still communicate with the original Engine (configuration was reverted back)", "id": "Rollback", "name": "Rollback", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Invoke-CollectorCloudMigration.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KQ29uZmlndXJlcyB0YXJnZXQgZGV2aWNlIHRvIGNvbm5lY3QgdG8gYSBOZXh0aGluayBDbG91ZCBpbnN0YW5jZSBmb3IgbWlncmF0aW9uIHB1cnBvc2VzLg0KDQouREVTQ1JJUFRJT04NClZlcmlmaWVzIGlmIHRhcmdldCBkZXZpY2UgY2FuIGNvbm5lY3QgdG8gdGhlIE5leHRoaW5rIENsb3VkIGluc3RhbmNlIHZpYSB0aGUgZ2l2ZW4gYWRkcmVzcyBhbmQgVENQIHBvcnQuDQotIElmIGNvbm5lY3Rpb24gc3VjY2VlZGVkLCB0aGUgcmVtb3RlIGFjdGlvbiB3aWxsIGNvbmZpZ3VyZSB0YXJnZXQgZGV2aWNlJ3MgQ29sbGVjdG9yIHRvIGNvbm5lY3QgdG8gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIEVuZ2luZSBpbiB0aGUgJ0VuZ2luZXNNYXBwaW5nJyBpbnB1dCBwYXJhbWV0ZXIgKGJhc2VkIG9uIHRoZSBjdXJyZW50bHkgY29uZmlndXJlZCBFbmdpbmUpLg0KT25jZSBkZXN0aW5hdGlvbiBFbmdpbmUgaGFzIGJlZW4gY2hhbmdlZCwgdGhlIHJlbW90ZSBhY3Rpb24gd2lsbCB0ZXN0IGNvbm5lY3Rpdml0eSBhZ2Fpbi4NCi0gSWYgdGhlIGNvbm5lY3Rpb24gaXMgdW5zdWNjZXNzZnVsLCBhIHJvbGxiYWNrIHNjaGVkdWxlZCB0YXNrIHdpbGwgYmUgZXhlY3V0ZWQgbG9jYWxseSBvbiB0aGUgdGFyZ2V0IGRldmljZSwgdG8gcmVjb25maWd1cmUgQ29sbGVjdG9yIHdpdGggdGhlIHByZXZpb3VzIEVuZ2luZS4NCg0KLkZVTkNUSU9OQUxJVFkNClJlbWVkaWF0aW9uDQoNCi5JTlBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uDQoxICAgTWF4aW11bURlbGF5SW5TZWNvbmRzICAgICAgICAgICBNYXhpbXVtIHJhbmRvbSBkZWxheSBzZXQgdG8gYXZvaWQgb3ZlcmxvYWRpbmcgb2YgdGhlIEVuZ2luZS4gUHJvdmlkZSBudW1iZXIgb2Ygc2Vjb25kcyBsZXNzIHRoYW4gNjAwDQoyICAgRW5naW5lc01hcHBpbmcgICAgICAgICAgICAgICAgICBDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBFbmdpbmVzIGFkZHJlc3NlcyAoZWl0aGVyIElQdjQgYWRkcmVzc2VzIG9yIEROUyBuYW1lcykgYW5kIHRoZWlyIHJlc3BlY3RpdmUgQ2xvdWQgRW5naW5lIGZvciB0aGUgbWlncmF0aW9uLiBUaGUgbWFwcGluZyBtdXN0IGhhdmUgdGhlIGZvbGxvd2luZyBmb3JtYXQiIjoiIiBvbGRfZW5naW5lX2FkZHJlc3M6Y2xvdWRfZW5naW5lX2FkZHJlc3MuIEV4YW1wbGUiIjoiIiAib24tcHJlbWlzZS1lbmdpbmUxLmFjbWUubG9jYWw6Y2xvdWQtZW5naW5lMS5hY21lLmNvbSwgMTAuNi42LjQ6Y2xvdWQtZW5naW5lLmFjbWUuY29tLCAxNzIuMjQuMTAuMjozNC4xNi45OC41NiINCjMgICBUQ1BQb3J0ICAgICAgICAgICAgICAgICAgICAgICAgIE9wdGlvbmFsIHBhcmFtZXRlciB0byBjaGFuZ2UgdGhlIFRDUCBwb3J0IG9mIHRoZSBjb25uZWN0aW9uDQoNCi5PVVRQVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlICAgICAgICAgICAgRGVzY3JpcHRpb24NCjEgICBDb25uZWN0aW9uRXN0YWJsaXNoZWQgICAgICAgICAgIEJvb2wgICAgICAgICAgICBJbmRpY2F0ZXMgaWYgdGhlIGNvbm5lY3Rpb24gdGVzdCB0byB0aGUgTmV4dGhpbmsgQ2xvdWQgaW5zdGFuY2Ugd2FzIHN1Y2Nlc3NmdWwgb3Igbm90DQoyICAgQ29sbGVjdG9yRGF0YU92ZXJUQ1AgICAgICAgICAgICBCb29sICAgICAgICAgICAgSW5kaWNhdGVzIGlmIHRoZSBDb2xsZWN0b3IgaXMgY29uZmlndXJlZCB0byBzZW5kIGRhdGEgb3ZlciBUQ1ANCjMgICBEZXN0aW5hdGlvbkNoYW5nZWRTY2hlZHVsZSAgICAgIEJvb2wgICAgICAgICAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgbmV3IGNvbmZpZ3VyYXRpb24gd2FzIHNldCBhbmQgdGhlIHNjaGVkdWxlZCB0YXNrICh0byByZXN0YXJ0IENvbGxlY3Rvcikgd2FzIGNyZWF0ZWQgY29ycmVjdGx5LiBJZiBmYWxzZSwgaXQgbWVhbnMgdGhhdCBubyBjaGFuZ2UgaXMgbmVjZXNzYXJ5ICh2YWx1ZSBhbHJlYWR5IHNldCkNCjQgICBEZXN0aW5hdGlvbkNoYW5nZWQgICAgICAgICAgICAgIEJvb2wgICAgICAgICAgICBJbmRpY2F0ZXMgaWYgQ29sbGVjdG9yIGhhcyBiZWVuIGNvcnJlY3RseSByZWNvbmZpZ3VyZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBDbG91ZCBOZXh0aGluayBpbnN0YW5jZQ0KNSAgIFJvbGxiYWNrICAgICAgICAgICAgICAgICAgICAgICAgQm9vbCAgICAgICAgICAgIEluZGljYXRlcyBpZiBhIHJvbGxiYWNrIHdhcyBuZWVkZWQuIElmIHRydWUsIGl0IG1lYW5zIENvbGxlY3RvciB3aWxsIHN0aWxsIGNvbW11bmljYXRlIHdpdGggdGhlIG9yaWdpbmFsIEVuZ2luZSAoY29uZmlndXJhdGlvbiB3YXMgcmV2ZXJ0ZWQgYmFjaykNCg0KLlJFU1RSSUNUSU9OUw0KLSBUaGlzIFJlbW90ZSBBY3Rpb24gb25seSBzdXBwb3J0cyBJUHY0IGFzIGlucHV0IHBhcmFtZXRlciB3aGVuIHVzaW5nIElQcy4NCg0KLk5PVEVTDQpDb250ZXh0OiAgICAgICAgICAgIExvY2FsU3lzdGVtDQpWZXJzaW9uOiAgICAgICAgICAgIDEuMC4yLjAgLSBDaGFuZ2VkIFNjaGVkdWxlZCBUYXNrcyBtYW5hZ2VtZW50DQogICAgICAgICAgICAgICAgICAgIDEuMC4xLjAgLSBGaXhlZCBkb2N1bWVudGF0aW9uIHByb2JsZW0NCiAgICAgICAgICAgICAgICAgICAgMS4wLjAuMCAtIEluaXRpYWwgcmVsZWFzZQ0KTGFzdCBHZW5lcmF0ZWQ6ICAgICAyOSBKdW4gMjAyMCAtIDE0OjUzOjE2DQpDb3B5cmlnaHQgKEMpIDIwMjAgTmV4dGhpbmsgU0EsIFN3aXR6ZXJsYW5kDQojPg0KDQojDQojIElucHV0IHBhcmFtZXRlcnMgZGVmaW5pdGlvbg0KIw0KcGFyYW0oDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTWF4aW11bURlbGF5SW5TZWNvbmRzLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJEVuZ2luZXNNYXBwaW5nLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFRDUFBvcnQNCikNCiMgRW5kIG9mIHBhcmFtZXRlcnMgZGVmaW5pdGlvbg0KDQojDQojIENvbnN0YW50cyBkZWZpbml0aW9uDQojDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NVTFRVUkUnIGANCiAgICAtVmFsdWUgKEdldC1DdWx0dXJlKS5EYXRlVGltZUZvcm1hdCBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0xPQ0FMX1NZU1RFTV9JREVOVElUWScgYA0KICAgIC1WYWx1ZSAnUy0xLTUtMTgnIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdNQVhfU0NSSVBUX0RFTEFZX1NFQycgYA0KICAgIC1WYWx1ZSA2MDAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ1BPV0VSU0hFTExfRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3RcU3lzdGVtMzJcV2luZG93c1Bvd2VyU2hlbGxcdjEuMFxwb3dlcnNoZWxsLmV4ZSIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdSRU1PVEVfQUNUSU9OX0RMTF9QQVRIJyBgDQogICAgLVZhbHVlICIkZW52Ok5FWFRISU5LXFJlbW90ZUFjdGlvbnNcbnh0cmVtb3RlYWN0aW9ucy5kbGwiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVEFTS19TQ0hFRFVMRVJfRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3Rcc3lzdGVtMzJcc2NodGFza3MuZXhlIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ0xUX1BST0NFU1NfTkFNRScgYA0KICAgIC1WYWx1ZSAnbnh0Y29kJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NMVF9TRVRfRVhJVENPREUnIGANCiAgICAtVmFsdWUgNCAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTlhUQ0ZHX0VYRScgYA0KICAgIC1WYWx1ZSAiJGVudjpTeXN0ZW1Sb290XFN5c3RlbTMyXG54dGNmZy5leGUiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1BPV0VSU0hFTExfRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3RcU3lzdGVtMzJcV2luZG93c1Bvd2VyU2hlbGxcdjEuMFxwb3dlcnNoZWxsLmV4ZSIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVEFTS19TQ0hFRFVMRVJfRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3Rcc3lzdGVtMzJcc2NodGFza3MuZXhlIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdDVUxUVVJFJyBgDQogICAgLVZhbHVlIChHZXQtQ3VsdHVyZSkuRGF0ZVRpbWVGb3JtYXQgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVTVEFSVF9DT0xMRUNUT1JfVEFTS19QUk9QRVJUSUVTJyBgDQogICAgLVZhbHVlIEB7TmFtZSA9ICdOZXh0aGluayBDb29yZGluYXRvciBzZXJ2aWNlIG1vZGlmaWNhdGlvbicNCiAgICAgICAgICAgICBEZWxheUluU2Vjb25kcyA9IDYwfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdST0xMQkFDS19UQVNLX1BST1BFUlRJRVMnIGANCiAgICAtVmFsdWUgQHtOYW1lID0gJ05leHRoaW5rIENsb3VkIE1pZ3JhdGlvbiBjb25uZWN0aW9uIGNoZWNrJw0KICAgICAgICAgICAgIERlbGF5SW5TZWNvbmRzID0gMTgwfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdTQ1JJUFRfQ09OVEVOVCcgYA0KICAgIC1WYWx1ZSAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5TY3JpcHRCbG9jay5Ub1N0cmluZygpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1BST0dSQU1fREFUQV9GT0xERVJfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpQcm9ncmFtRGF0YVxOZXh0aGlua1xDbG91ZF9NaWdyYXRpb24iIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1JPTExCQUNLX1NDUklQVF9QQVRIJyBgDQogICAgLVZhbHVlIChKb2luLVBhdGggLVBhdGggJFBST0dSQU1fREFUQV9GT0xERVJfUEFUSCBgDQogICAgICAgICAgICAgICAgICAgICAgLUNoaWxkUGF0aCAiSW52b2tlLUNsb3VkTWlncmF0aW9uUm9sbGJhY2sucHMxIikgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUk9MTEJBQ0tfRklMRV9QQVRIJyBgDQogICAgLVZhbHVlIChKb2luLVBhdGggLVBhdGggJFBST0dSQU1fREFUQV9GT0xERVJfUEFUSCBgDQogICAgICAgICAgICAgICAgICAgICAgLUNoaWxkUGF0aCAiUm9sbEJhY2tGaWxlLnR4dCIpIGANCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdDTFRfUkVHX0tFWScgYA0KICAgIC1WYWx1ZSAnSEtMTTpcU09GVFdBUkVcTmV4dGhpbmsnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NMVF9SRUdfVkVSU0lPTicgYA0KICAgIC1WYWx1ZSAnUHJvZHVjdFZlcnNpb24nIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NMVF9NSU5JTVVNX1ZFUlNJT04nIGANCiAgICAtVmFsdWUgKFt2ZXJzaW9uXSc2LjIwJykgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdDTFRfUFJPUEVSVElFUycgYA0KICAgIC1WYWx1ZSBAe0lwID0gJ2lwJw0KICAgICAgICAgICAgIFRDUFBvcnQgPSAndGNwX3BvcnQnDQogICAgICAgICAgICAgVGNwU3RhdHVzID0gJ3RjcF9zdGF0dXMnDQogICAgICAgICAgICAgRGF0YU92ZXJUQ1AgPSAnZGF0YV9vdmVyX3RjcCd9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnU0VUX0NPTExFQ1RPUl9ERUxBWScgYA0KICAgIC1WYWx1ZSAzMCBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdUSU1FT1VUX0lOX01JTExJU0VDT05EUycgYA0KICAgIC1WYWx1ZSA1MDAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCiMNCiMgSW52b2tlIE1haW4NCiMNCmZ1bmN0aW9uIEludm9rZS1NYWluIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICAkZXhpdENvZGUgPSAwDQoNCiAgICB0cnkgew0KICAgICAgICBJbnZva2UtRXhlY3V0aW9uTW9kZSAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAtTWVzc2FnZSAkXw0KICAgICAgICAkZXhpdENvZGUgPSAxDQogICAgfQ0KDQogICAgcmV0dXJuICRleGl0Q29kZQ0KfQ0KDQojDQojIFRlbXBsYXRlIGZ1bmN0aW9ucw0KIw0KZnVuY3Rpb24gV3JpdGUtU3RhdHVzTWVzc2FnZSAoW3Bzb2JqZWN0XSRNZXNzYWdlKSB7DQogICAgJGV4Y2VwdGlvbiA9ICRNZXNzYWdlLlRvU3RyaW5nKCkNCg0KICAgIGlmICgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKSB7DQogICAgICAgICR2ZXJzaW9uID0gR2V0LVNjcmlwdFZlcnNpb24NCiAgICAgICAgaWYoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICR2ZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlID0gJHZlcnNpb24gKyAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKScuICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JNZXNzYWdlICsgJGV4Y2VwdGlvbikNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KICAgICRzY3JpcHRDb250ZW50ID0gR2V0LUNvbnRlbnQgJE15SW52b2NhdGlvbi5TY3JpcHROYW1lIHwgT3V0LVN0cmluZw0KICAgIGlmICgkc2NyaXB0Q29udGVudCAtbm90bWF0Y2ggJzwjW1xyXG5dezJ9LlNZTk9QU0lTW15cI1w+XSooLk5PVEVTW15cI1w+XSopXCM+JykgeyByZXR1cm4gfQ0KDQogICAgJGhlbHBCbG9jayA9ICRNYXRjaGVzWzFdLlNwbGl0KFtlbnZpcm9ubWVudF06Ok5ld0xpbmUpDQoNCiAgICBmb3JlYWNoICgkbGluZSBpbiAkaGVscEJsb2NrKSB7DQogICAgICAgIGlmICgkbGluZSAtbWF0Y2ggJ1ZlcnNpb246Jykgew0KICAgICAgICAgICAgcmV0dXJuICRsaW5lLlNwbGl0KCc6JylbMV0uU3BsaXQoJy0nKVswXS5UcmltKCkNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUsIFtpbnRdJExvd2VyTGltaXQsIFtpbnRdJFVwcGVyTGltaXQpIHsNCiAgICBUZXN0LVBhcmFtSXNJbnRlZ2VyIC1QYXJhbU5hbWUgJFBhcmFtTmFtZSAtUGFyYW1WYWx1ZSAkUGFyYW1WYWx1ZQ0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmICgkaW50VmFsdWUgLWx0ICRMb3dlckxpbWl0IC1vciAkaW50VmFsdWUgLWd0ICRVcHBlckxpbWl0KSB7DQogICAgICAgIHRocm93ICJFcnJvciBvbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBtdXN0IGJlIGJldHdlZW4gWyRMb3dlckxpbWl0LCAkVXBwZXJMaW1pdF0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1Jc0ludGVnZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yICRudWxsIC1lcSAkaW50VmFsdWUpIHsNCiAgICAgICAgdGhyb3cgIkVycm9yIG9uIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuICckUGFyYW1WYWx1ZScgaXMgbm90IGFuIGludGVnZXIuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFNwbGl0LVNlcGFyYXRlZFZhbHVlIChbc3RyaW5nXSRWYWx1ZSwgW3N0cmluZ10kU2VwYXJhdG9yKSB7DQogICAgW3N0cmluZ10kZm9ybWF0dGVkU3RyaW5nID0gRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkVmFsdWUNCiAgICAkdmFsdWVMaXN0ID0gJGZvcm1hdHRlZFN0cmluZy5TcGxpdCgkU2VwYXJhdG9yLCBbc3RyaW5nc3BsaXRvcHRpb25zXTo6UmVtb3ZlRW1wdHlFbnRyaWVzKQ0KICAgIFtzdHJpbmdbXV0kcmVzdWx0ID0gQCgpDQoNCiAgICBpZiAoVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgLUNvbGxlY3Rpb24gJHZhbHVlTGlzdCkgeyByZXR1cm4gJHJlc3VsdCB9DQoNCiAgICBmb3JlYWNoICgkdmFsdWUgaW4gJHZhbHVlTGlzdCkgew0KICAgICAgICAkcmVzdWx0ICs9ICR2YWx1ZS5UcmltKCkNCiAgICB9DQoNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtU3RyaW5nVmFsdWUgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgcmV0dXJuICRWYWx1ZS5SZXBsYWNlKCciJywgJycpLlJlcGxhY2UoIiciLCAnJykuVHJpbSgpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IChbcHNvYmplY3RbXV0kQ29sbGVjdGlvbikgew0KICAgIHJldHVybiAkbnVsbCAtZXEgJENvbGxlY3Rpb24gLW9yICgkQ29sbGVjdGlvbiB8IE1lYXN1cmUtT2JqZWN0KS5Db3VudCAtZXEgMA0KfQ0KDQpmdW5jdGlvbiBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwgew0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgpKSB7DQogICAgICAgIHRocm93ICdOZXh0aGluayBSZW1vdGUgQWN0aW9uIERMTCBub3QgZm91bmQuICcNCiAgICB9DQogICAgQWRkLVR5cGUgLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgNCn0NCg0KZnVuY3Rpb24gVGVzdC1SdW5uaW5nQXNMb2NhbFN5c3RlbSB7DQogICAgaWYgKC1ub3QgKENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtKSkgew0KICAgICAgICB0aHJvdyAnVGhpcyBzY3JpcHQgbXVzdCBiZSBydW4gYXMgTG9jYWxTeXN0ZW0uICcNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtIHsNCiAgICAkY3VycmVudElkZW50aXR5ID0gR2V0LUN1cnJlbnRJZGVudGl0eQ0KICAgIHJldHVybiAkY3VycmVudElkZW50aXR5IC1lcSAkTE9DQUxfU1lTVEVNX0lERU5USVRZDQp9DQoNCmZ1bmN0aW9uIEdldC1DdXJyZW50SWRlbnRpdHkgew0KICAgIHJldHVybiBbc2VjdXJpdHkucHJpbmNpcGFsLndpbmRvd3NpZGVudGl0eV06OkdldEN1cnJlbnQoKS5Vc2VyLlRvU3RyaW5nKCkNCn0NCg0KZnVuY3Rpb24gVGVzdC1TdXBwb3J0ZWRPU1ZlcnNpb24gew0KICAgICRPU1ZlcnNpb24gPSAoR2V0LU9TVmVyc2lvbikgLWFzIFt2ZXJzaW9uXQ0KICAgIGlmICgtbm90ICgkT1NWZXJzaW9uKSkgew0KICAgICAgICB0aHJvdyAnVGhpcyBzY3JpcHQgY291bGQgbm90IHJldHVybiBPUyB2ZXJzaW9uLiAnDQogICAgfQ0KICAgIGlmICgoJE9TVmVyc2lvbi5NYWpvciAtbmUgNiAtb3IgJE9TVmVyc2lvbi5NaW5vciAtbmUgMSkgLWFuZCBgDQogICAgICAgICgkT1NWZXJzaW9uLk1ham9yIC1uZSAxMCkpIHsNCiAgICAgICAgdGhyb3cgJ1RoaXMgc2NyaXB0IGlzIGNvbXBhdGlibGUgd2l0aCBXaW5kb3dzIDcgYW5kIDEwIG9ubHkuICcNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1PU1ZlcnNpb24gew0KICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgIC1GaWx0ZXIgJ1Byb2R1Y3RUeXBlID0gMScgLUVycm9yQWN0aW9uIFN0b3AgfCBgDQogICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBWZXJzaW9uDQp9DQoNCmZ1bmN0aW9uIFdhaXQtUmFuZG9tVGltZSAoW2ludF0kTWF4aW11bURlbGF5SW5TZWNvbmRzKSB7DQogICAgaWYgKCRNYXhpbXVtRGVsYXlJblNlY29uZHMgLWd0IDApIHsNCiAgICAgICAgJHNlY29uZHMgPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDAgLU1heGltdW0gJE1heGltdW1EZWxheUluU2Vjb25kcw0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkc2Vjb25kcw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1SZWdpc3RyeUtleSAoW3N0cmluZ10kS2V5LCBbc3RyaW5nXSRQcm9wZXJ0eSkgew0KICAgIHJldHVybiAkbnVsbCAtbmUgKEdldC1JdGVtUHJvcGVydHkgLVBhdGggJEtleSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTmFtZSAkUHJvcGVydHkgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpDQp9DQoNCmZ1bmN0aW9uIEdldC1SZWdpc3RyeUtleSAoW3N0cmluZ10kS2V5LCBbc3RyaW5nXSRQcm9wZXJ0eSkgew0KICAgIHJldHVybiAoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkS2V5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU5hbWUgJFByb3BlcnR5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpLiRQcm9wZXJ0eQ0KfQ0KDQpmdW5jdGlvbiBJbnZva2UtUHJvY2VzcyAoW3N0cmluZ10kRmlsZVBhdGgsIFtzdHJpbmddJEFyZ3VtZW50cykgew0KICAgICRvdXRwdXQgPSBAe0V4aXRDb2RlID0gLTENCiAgICAgICAgICAgICAgICBTdGRPdXQgPSAkbnVsbA0KICAgICAgICAgICAgICAgIFN0ZEVyciA9ICRudWxsfQ0KICAgICRwcm9jZXNzSW5mbyA9IE5ldy1vYmplY3QgLVR5cGVOYW1lIGRpYWdub3N0aWNzLnByb2Nlc3NzdGFydGluZm8NCiAgICAkcHJvY2Vzc0luZm8uQ3JlYXRlTm9XaW5kb3cgPSAkdHJ1ZQ0KICAgICRwcm9jZXNzSW5mby5Vc2VTaGVsbEV4ZWN1dGUgPSAkZmFsc2UNCiAgICAkcHJvY2Vzc0luZm8uUmVkaXJlY3RTdGFuZGFyZE91dHB1dCA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLlJlZGlyZWN0U3RhbmRhcmRFcnJvciA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLkZpbGVOYW1lID0gJEZpbGVQYXRoDQogICAgJHByb2Nlc3NJbmZvLkFyZ3VtZW50cyA9ICRBcmd1bWVudHMNCiAgICAkcHJvY2Vzc0luZm8uV29ya2luZ0RpcmVjdG9yeSA9IFNwbGl0LVBhdGggJEZpbGVQYXRoIC1QYXJlbnQNCiAgICAkcHJvY2VzcyA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIGRpYWdub3N0aWNzLnByb2Nlc3MNCiAgICAkcHJvY2Vzcy5TdGFydEluZm8gPSAkcHJvY2Vzc0luZm8NCg0KICAgIHRyeSB7DQogICAgICAgIFt2b2lkXSRwcm9jZXNzLlN0YXJ0KCkNCiAgICAgICAgJG91dHB1dC5TdGRPdXQgPSAkcHJvY2Vzcy5TdGFuZGFyZE91dHB1dC5SZWFkVG9FbmQoKQ0KICAgICAgICAkb3V0cHV0LlN0ZEVyciA9ICRwcm9jZXNzLlN0YW5kYXJkRXJyb3IuUmVhZFRvRW5kKCkNCiAgICAgICAgJHByb2Nlc3MuV2FpdEZvckV4aXQoKQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJyRGaWxlUGF0aCcgZXhlY3V0aW9uIGZhaWxlZC4gIg0KICAgIH0gZmluYWxseSB7DQogICAgICAgICRvdXRwdXQuRXhpdENvZGUgPSAkcHJvY2Vzcy5FeGl0Q29kZQ0KICAgICAgICAkcHJvY2Vzcy5EaXNwb3NlKCkNCiAgICB9DQoNCiAgICByZXR1cm4gJG91dHB1dA0KfQ0KDQpmdW5jdGlvbiBHZXQtU2NoZWR1bGVkVGFza0FyZ3VtZW50cyAoW3N0cmluZ10kTmFtZSwgW2ludF0kRGVsYXksIFtzdHJpbmddJEFjdGlvbikgew0KICAgICRkYXRlUHJvcGVydGllcyA9IEdldC1TY2hlZHVsZWRUYXNrUHJvcGVydGllcyAtRGVsYXkgJERlbGF5DQogICAgcmV0dXJuIEAoJy9DcmVhdGUnDQogICAgICAgICAgICAgJy9TQyBPbmNlJw0KICAgICAgICAgICAgICcvUlUgIlNZU1RFTSInDQogICAgICAgICAgICAgIi9UTiBgIiQoJE5hbWUpYCIiDQogICAgICAgICAgICAgJy9aJw0KICAgICAgICAgICAgICcvVjEnDQogICAgICAgICAgICAgIi9UUiBgIiQoJEFjdGlvbilgIiINCiAgICAgICAgICAgICAiL1NEIGAiJCgkZGF0ZVByb3BlcnRpZXMuU3RhcnREYXRlKWAiIg0KICAgICAgICAgICAgICIvU1QgYCIkKCRkYXRlUHJvcGVydGllcy5TdGFydFRpbWUpYCIiDQogICAgICAgICAgICAgJy9GJw0KICAgICAgICAgICAgKSAtam9pbiAnICcNCn0NCg0KZnVuY3Rpb24gR2V0LVNjaGVkdWxlZFRhc2tQcm9wZXJ0aWVzIChbaW50XSREZWxheSkgew0KICAgICRjdXJyZW50RGF0ZSA9IEdldC1EYXRlDQogICAgJGRhdGVGb3JtYXQgPSBHZXQtRGF0ZUZvcm1hdA0KICAgICR0aW1lRm9ybWF0ID0gJ0hIezB9bW17MH1zcycgLWYgJENVTFRVUkUuVGltZVNlcGFyYXRvcg0KDQogICAgJGRhdGUgPSAkY3VycmVudERhdGUuQWRkU2Vjb25kcygkRGVsYXkpDQogICAgJGZvcm1hdHRlZERhdGUgPSAkZGF0ZS5Ub1N0cmluZygkZGF0ZUZvcm1hdCkNCiAgICAkZm9ybWF0dGVkVGltZSA9ICRkYXRlLlRvU3RyaW5nKCR0aW1lRm9ybWF0KQ0KDQogICAgcmV0dXJuIEB7U3RhcnREYXRlID0gJGZvcm1hdHRlZERhdGUNCiAgICAgICAgICAgICBTdGFydFRpbWUgPSAkZm9ybWF0dGVkVGltZX0NCn0NCg0KZnVuY3Rpb24gR2V0LURhdGVGb3JtYXQgew0KICAgICRkYXRlX2FycmF5ID0gJENVTFRVUkUuU2hvcnREYXRlUGF0dGVybi5TcGxpdCgkQ1VMVFVSRS5EYXRlU2VwYXJhdG9yKQ0KICAgICRmaW5hbF9kYXRlX2Zvcm1hdCA9IEAoKQ0KDQogICAgZm9yZWFjaCAoJGl0ZW0gaW4gJGRhdGVfYXJyYXkpIHsNCiAgICAgICAgaWYgKCRpdGVtLmxlbmd0aCAtZXEgMSkgew0KICAgICAgICAgICAgJGZpbmFsX2RhdGVfZm9ybWF0ICs9ICRpdGVtICsgJGl0ZW0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRmaW5hbF9kYXRlX2Zvcm1hdCArPSAkaXRlbQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRmaW5hbF9kYXRlX2Zvcm1hdCAtam9pbiAkQ1VMVFVSRS5EYXRlU2VwYXJhdG9yDQp9DQoNCmZ1bmN0aW9uIFJlbW92ZS1GaWxlIChbc3RyaW5nXSRQYXRoKSB7DQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRQYXRoKSAtb3IgYA0KICAgICAgICAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRQYXRoKSkpIHsgcmV0dXJuIH0NCg0KICAgIFJlbW92ZS1JdGVtIC1QYXRoICRQYXRoIC1SZWN1cnNlIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KfQ0KDQojDQojIElucHV0IHBhcmFtZXRlciB2YWxpZGF0aW9uDQojDQpmdW5jdGlvbiBUZXN0LUlucHV0UGFyYW1ldGVycyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIGANCiAgICAgICAgLVBhcmFtTmFtZSAnTWF4aW11bURlbGF5SW5TZWNvbmRzJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuTWF4aW11bURlbGF5SW5TZWNvbmRzIGANCiAgICAgICAgLUxvd2VyTGltaXQgMCBgDQogICAgICAgIC1VcHBlckxpbWl0ICRNQVhfU0NSSVBUX0RFTEFZX1NFQw0KICAgIFRlc3QtUGFyYW1JbkFsbG93ZWRSYW5nZSBgDQogICAgICAgIC1QYXJhbU5hbWUgJ1RDUFBvcnQnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5UQ1BQb3J0IGANCiAgICAgICAgLUxvd2VyTGltaXQgMSBgDQogICAgICAgIC1VcHBlckxpbWl0IDY1NTM1DQogICAgVGVzdC1Eb21haW5MaXN0UGFyYW1ldGVyIGANCiAgICAgICAgLVBhcmFtTmFtZSAnRW5naW5lc01hcHBpbmcnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5FbmdpbmVzTWFwcGluZw0KfQ0KDQpmdW5jdGlvbiBUZXN0LURvbWFpbkxpc3RQYXJhbWV0ZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpcExpc3QgPSBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAtVmFsdWUgJFBhcmFtVmFsdWUgLVNlcGFyYXRvciAnLDonDQoNCiAgICBpZiAoVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgLUNvbGxlY3Rpb24gJGlwTGlzdCkgew0KICAgICAgICB0aHJvdyAiRXJyb3Igb24gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gQ2Fubm90IGJlIG51bGwgb3IgZW1wdHkuICINCiAgICB9DQoNCiAgICBmb3JlYWNoICgkaXRlbSBpbiAkaXBMaXN0KSB7DQogICAgICAgIFRlc3QtSXNWYWxpZElwT3JEb21haW4gLUl0ZW0gJGl0ZW0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtSXNWYWxpZElwT3JEb21haW4oW3N0cmluZ10kSXRlbSkgew0KICAgIGlmICgtbm90IChUZXN0LUlQQWRkcmVzc0luUmFuZ2UgLVZhbHVlICRJdGVtKSAtYW5kIGANCiAgICAgICAgLW5vdCAoVGVzdC1Eb21haW5OYW1lU3RyaW5nIC1WYWx1ZSAkSXRlbSkpIHsNCiAgICAgICAgdGhyb3cgIlByb3ZpZGVkIHZhbHVlICckSXRlbScgaXMgaXMgbm90IGEgdmFsaWQgSVAgb3IgRG9tYWluLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUlQQWRkcmVzc0luUmFuZ2UgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgJGlwRm9ybWF0UmVnZXggPSAnXihcLT8oXGQpezEsM31cLil7M31cLT8oXGQpezEsM30kJw0KICAgICRpcHY0UmFuZ2VSZWdleCA9ICdeKCg/OjI1WzAtNV18MlswLTRdXGR8WzAxXT9cZHsxLDJ9KVwuKXszfSg/OjI1WzAtNV18MlswLTRdXGR8WzAxXT9cZHsxLDJ9KSQnDQoNCiAgICBpZiAoJFZhbHVlIC1ub3RtYXRjaCAkaXBGb3JtYXRSZWdleCAtb3IgYA0KICAgICAgICAkVmFsdWUgLW5vdG1hdGNoICRpcHY0UmFuZ2VSZWdleCkgeyByZXR1cm4gJGZhbHNlIH0NCg0KICAgIHJldHVybiAkdHJ1ZQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LURvbWFpbk5hbWVTdHJpbmcgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgJGRvbWFpbkZvcm1hdFJlZ2V4ID0gJ15bXHdcZFwuXC1fXXszLH0kJw0KICAgICRkb21haW5OYW1lUmVnZXggPSAnXltcd1xkXVtcd1xkXC5cLV9dezEsfVtcd1xkXC1fXSQnDQoNCiAgICBpZiAoJFZhbHVlIC1ub3RtYXRjaCAkZG9tYWluRm9ybWF0UmVnZXggLW9yIGANCiAgICAgICAgJFZhbHVlIC1ub3RtYXRjaCAkZG9tYWluTmFtZVJlZ2V4KSB7IHJldHVybiAkZmFsc2UgfQ0KDQogICAgcmV0dXJuICR0cnVlDQp9DQoNCiMNCiMgRXhlY3V0aW9uIG1vZGUNCiMNCmZ1bmN0aW9uIEludm9rZS1FeGVjdXRpb25Nb2RlIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBpZiAoKEdldC1QYXJlbnRQcm9jZXNzTmFtZSkgLWVxICRDTFRfUFJPQ0VTU19OQU1FKSB7DQogICAgICAgIEludm9rZS1Ob3JtYWxNb2RlIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgIH0gZWxzZSB7DQogICAgICAgIEludm9rZS1Sb2xsYmFja01vZGUgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFyZW50UHJvY2Vzc05hbWUgew0KICAgICRwYXJlbnRQcm9jZXNzSWQgPSAoR2V0LVdtaU9iamVjdCAtQ2xhc3MgJ1dpbjMyX1Byb2Nlc3MnIC1GaWx0ZXIgIlByb2Nlc3NJZCA9ICRQSUQiKS5QYXJlbnRQcm9jZXNzSWQNCiAgICByZXR1cm4gR2V0LVByb2Nlc3MgLUlkICRwYXJlbnRQcm9jZXNzSWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBOYW1lDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1Ob3JtYWxNb2RlIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBbaGFzaHRhYmxlXSRtaWdyYXRpb25SZXN1bHRzID0gSW5pdGlhbGl6ZS1NaWdyYXRpb25SZXN1bHRzDQoNCiAgICB0cnkgew0KICAgICAgICBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwNCiAgICAgICAgVGVzdC1SdW5uaW5nQXNMb2NhbFN5c3RlbQ0KICAgICAgICBUZXN0LVN1cHBvcnRlZE9TVmVyc2lvbg0KICAgICAgICBUZXN0LUlucHV0UGFyYW1ldGVycyAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCg0KICAgICAgICBJbnZva2UtQ29sbGVjdG9yQ2xvdWRNaWdyYXRpb24gLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzIC1NaWdyYXRpb25SZXN1bHRzICRtaWdyYXRpb25SZXN1bHRzDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAtTWlncmF0aW9uUmVzdWx0cyAkbWlncmF0aW9uUmVzdWx0cw0KICAgIH0NCn0NCg0KIw0KIyBNaWdyYXRpb24gTWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gSW5pdGlhbGl6ZS1NaWdyYXRpb25SZXN1bHRzIHsNCiAgICByZXR1cm4gQHtDb25uZWN0aW9uRXN0YWJsaXNoZWQgPSAkZmFsc2UNCiAgICAgICAgICAgICBDb2xsZWN0b3JEYXRhT3ZlclRDUCA9ICRmYWxzZQ0KICAgICAgICAgICAgIERlc3RpbmF0aW9uQ2hhbmdlZFNjaGVkdWxlID0gJGZhbHNlDQogICAgICAgICAgICAgRGVzdGluYXRpb25DaGFuZ2VkID0gJGZhbHNlDQogICAgICAgICAgICAgUm9sbGJhY2sgPSAkZmFsc2V9DQp9DQoNCmZ1bmN0aW9uIEludm9rZS1Db2xsZWN0b3JDbG91ZE1pZ3JhdGlvbiAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGFzaHRhYmxlXSRNaWdyYXRpb25SZXN1bHRzKSB7DQogICAgVGVzdC1Db2xsZWN0b3JWZXJzaW9uDQoNCiAgICAkTWlncmF0aW9uUmVzdWx0cy5Sb2xsYmFjayA9IFRlc3QtUGF0aCAtUGF0aCAkUk9MTEJBQ0tfRklMRV9QQVRIDQogICAgJGNvbGxlY3RvckNvbmZpZyA9IEdldC1Db2xsZWN0b3JDb25maWd1cmF0aW9uDQoNCiAgICAkTWlncmF0aW9uUmVzdWx0cy5Db2xsZWN0b3JEYXRhT3ZlclRDUCA9IFRlc3QtRGF0YU92ZXJUQ1AgLURhdGFPdmVyVENQICRjb2xsZWN0b3JDb25maWcuRGF0YU92ZXJUQ1ANCiAgICBpZiAoLW5vdCAkTWlncmF0aW9uUmVzdWx0cy5Db2xsZWN0b3JEYXRhT3ZlclRDUCkgeyByZXR1cm4gfQ0KDQogICAgJGRlc2lyZWRDb25maWcgPSBHZXQtRGVzaXJlZENvbGxlY3RvckNvbmZpZ3VyYXRpb24gLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ29sbGVjdG9ySXAgJGNvbGxlY3RvckNvbmZpZy5JcA0KICAgIGlmICgtbm90IChUZXN0LU1pZ3JhdGlvbklzTmVlZGVkIC1Db2xsZWN0b3JDb25maWcgJGNvbGxlY3RvckNvbmZpZyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLURlc2lyZWRDb25maWcgJGRlc2lyZWRDb25maWcgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1NaWdyYXRpb25SZXN1bHRzICRNaWdyYXRpb25SZXN1bHRzKSkgeyByZXR1cm4gfQ0KDQogICAgV2FpdC1SYW5kb21UaW1lIC1NYXhpbXVtRGVsYXlJblNlY29uZHMgJElucHV0UGFyYW1ldGVycy5NYXhpbXVtRGVsYXlJblNlY29uZHMNCg0KICAgIFRlc3QtRGVzaXJlZENvbm5lY3Rpb24gLURlc2lyZWRDb25maWcgJGRlc2lyZWRDb25maWcNCiAgICAkTWlncmF0aW9uUmVzdWx0cy5Db25uZWN0aW9uRXN0YWJsaXNoZWQgPSAkdHJ1ZQ0KDQogICAgSW52b2tlLURlbGF5ZWRNaWdyYXRpb24gLUNvbGxlY3RvckNvbmZpZyAkY29sbGVjdG9yQ29uZmlnIC1EZXNpcmVkQ29uZmlnICRkZXNpcmVkQ29uZmlnDQogICAgJE1pZ3JhdGlvblJlc3VsdHMuRGVzdGluYXRpb25DaGFuZ2VkU2NoZWR1bGUgPSAkdHJ1ZQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LURhdGFPdmVyVENQKFtzdHJpbmddJERhdGFPdmVyVENQKSB7DQogICAgaWYgKCREYXRhT3ZlclRDUCAtZXEgJ2Rpc2FibGUnKSB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJ01pZ3JhdGlvbiB3YXMgbm90IHN0YXJ0ZWQgYmVjYXVzZSBkYXRhX292ZXJfdGNwIGlzIGRpc2FibGVkLiAnDQogICAgICAgIHJldHVybiAkZmFsc2UNCiAgICB9DQogICAgcmV0dXJuICR0cnVlDQp9DQoNCmZ1bmN0aW9uIEdldC1EZXNpcmVkQ29sbGVjdG9yQ29uZmlndXJhdGlvbiAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzLCBbc3RyaW5nXSRDb2xsZWN0b3JJcCkgew0KICAgIHJldHVybiBAe0lwID0gR2V0LURlc2lyZWRFbmdpbmVJcCAtRW5naW5lc01hcHBpbmcgJElucHV0UGFyYW1ldGVycy5FbmdpbmVzTWFwcGluZyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1DdXJyZW50SXAgJENvbGxlY3RvcklwDQogICAgICAgICAgICAgVENQUG9ydCA9ICRJbnB1dFBhcmFtZXRlcnMuVENQUG9ydH0NCn0NCg0KZnVuY3Rpb24gR2V0LURlc2lyZWRFbmdpbmVJcCAoW3N0cmluZ10kRW5naW5lc01hcHBpbmcsIFtzdHJpbmddJEN1cnJlbnRJcCkgew0KICAgICRlbmdpbmVzTGlzdCA9IEAoU3BsaXQtU2VwYXJhdGVkVmFsdWUgLVZhbHVlICRFbmdpbmVzTWFwcGluZyAtU2VwYXJhdG9yICcsJykNCiAgICAkZW5naW5lRGVzaXJlZCA9ICgkZW5naW5lc0xpc3QgLW1hdGNoICRDdXJyZW50SXApWzBdDQogICAgaWYgKCRudWxsIC1lcSAkZW5naW5lRGVzaXJlZCkgeyB0aHJvdyAiJ0VuZ2luZXNNYXBwaW5nJyBsaXN0IGRvZXMgbm90IGNvbnRhaW4gJyRDdXJyZW50SXAnLiAiIH0NCg0KICAgIHJldHVybiAoU3BsaXQtU2VwYXJhdGVkVmFsdWUgLVZhbHVlICRlbmdpbmVEZXNpcmVkIC1TZXBhcmF0b3IgJzonKVsxXQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LU1pZ3JhdGlvbklzTmVlZGVkIChbaGFzaHRhYmxlXSRDb2xsZWN0b3JDb25maWcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGFzaHRhYmxlXSREZXNpcmVkQ29uZmlnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2hhc2h0YWJsZV0kTWlncmF0aW9uUmVzdWx0cykgew0KICAgIGlmICgoVGVzdC1Db2xsZWN0b3JDb25maWd1cmF0aW9uIC1Db25maWcgJENvbGxlY3RvckNvbmZpZyAtRGVzaXJlZENvbmZpZyAkRGVzaXJlZENvbmZpZykgLWFuZCBgDQogICAgICAgIC1ub3QgJE1pZ3JhdGlvblJlc3VsdHMuUm9sbGJhY2spIHsNCiAgICAgICAgJE1pZ3JhdGlvblJlc3VsdHMuRGVzdGluYXRpb25DaGFuZ2VkID0gJHRydWUNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAtTWVzc2FnZSAnTWlncmF0aW9uIHdhcyBub3Qgc3RhcnRlZCBiZWNhdXNlIHRoZSBjb2xsZWN0b3IgaGFzIGFscmVhZHkgdGhlIGNvcnJlY3QgY29uZmlndXJhdGlvbi4gJw0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KICAgIHJldHVybiAkdHJ1ZQ0KfQ0KDQpmdW5jdGlvbiBJbnZva2UtRGVsYXllZE1pZ3JhdGlvbiAoW2hhc2h0YWJsZV0kQ29sbGVjdG9yQ29uZmlnLCBbaGFzaHRhYmxlXSREZXNpcmVkQ29uZmlnKSB7DQogICAgTmV3LVJvbGxiYWNrU2NoZWR1bGVkVGFzayAtT3JpZ2luYWxDb2xsZWN0b3JEYXRhICRDb2xsZWN0b3JDb25maWcNCiAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIGANCiAgICAgICAgLU1lc3NhZ2UgIlNjaGVkdWxlZCB0YXNrIHdpdGggJCgkUkVTVEFSVF9DT0xMRUNUT1JfVEFTS19QUk9QRVJUSUVTLkRlbGF5SW5TZWNvbmRzKXMgZGVsYXkgd2FzIGNyZWF0ZWQgdG8gc2V0IG5ldyBDb2xsZWN0b3IgY29uZmlndXJhdGlvbiBhbmQgcmVzdGFydCBpdC4gIg0KICAgIE5ldy1Db2xsZWN0b3JTZXR0ZXJUYXNrIC1JcCAkRGVzaXJlZENvbmZpZy5JcCAtVENQUG9ydCAkRGVzaXJlZENvbmZpZy5UQ1BQb3J0DQp9DQoNCiMNCiMgQ29sbGVjdG9yIE1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIFRlc3QtQ29sbGVjdG9yVmVyc2lvbiB7DQogICAgaWYgKC1ub3QgKFRlc3QtUmVnaXN0cnlLZXkgLUtleSAkQ0xUX1JFR19LRVkgLVByb3BlcnR5ICRDTFRfUkVHX1ZFUlNJT04pKSB7DQogICAgICAgIHRocm93ICdDb2xsZWN0b3IgaXMgbm90IGluc3RhbGxlZC4gJw0KICAgIH0NCg0KICAgICRjbHRWZXJzaW9uVmFsdWUgPSBHZXQtUmVnaXN0cnlLZXkgLUtleSAkQ0xUX1JFR19LRVkgLVByb3BlcnR5ICRDTFRfUkVHX1ZFUlNJT04NCiAgICAkY2x0VmVyc2lvbiA9ICRjbHRWZXJzaW9uVmFsdWUgLWFzIFt2ZXJzaW9uXQ0KICAgIGlmICgkbnVsbCAtZXEgJGNsdFZlcnNpb24pIHsNCiAgICAgICAgdGhyb3cgIldyb25nIHZhbHVlIG9mIENvbGxlY3RvciB2ZXJzaW9uLiBGb3VuZCAkY2x0VmVyc2lvblZhbHVlLiAiDQogICAgfQ0KDQogICAgaWYgKCRjbHRWZXJzaW9uIC1sdCAkQ0xUX01JTklNVU1fVkVSU0lPTikgew0KICAgICAgICB0aHJvdyAiQ29sbGVjdG9yIHZlcnNpb24gZG9lcyBub3QgbWVldCBtaW5pbXVtIHJlcXVpcmVtZW50cyAoJENMVF9NSU5JTVVNX1ZFUlNJT04pLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ29sbGVjdG9yQ29uZmlndXJhdGlvbiB7DQogICAgJGV4ZWN1dGlvbk91dHB1dCA9IChJbnZva2UtUHJvY2VzcyAtRmlsZVBhdGggJE5YVENGR19FWEUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUFyZ3VtZW50cyAnL2wnKS5TdGRPdXQNCg0KICAgICRjb2xsZWN0b3JDb25maWcgPSBHZXQtQ29sbGVjdG9yQ29uZmlnRGF0YSAtQ29sbGVjdG9yT3V0cHV0ICRleGVjdXRpb25PdXRwdXQNCg0KICAgIHJldHVybiBAe0lwID0gR2V0LUNvbGxlY3RvckVuZ2luZUFkZHJlc3MgLUNvbmZpZ1ZhbHVlICRjb2xsZWN0b3JDb25maWdbJENMVF9QUk9QRVJUSUVTLklwXQ0KICAgICAgICAgICAgIFRDUFBvcnQgPSAkY29sbGVjdG9yQ29uZmlnWyRDTFRfUFJPUEVSVElFUy5UQ1BQb3J0XQ0KICAgICAgICAgICAgIFRjcFN0YXR1cyA9ICAkY29sbGVjdG9yQ29uZmlnWyRDTFRfUFJPUEVSVElFUy5UY3BTdGF0dXNdDQogICAgICAgICAgICAgRGF0YU92ZXJUQ1AgPSAgJGNvbGxlY3RvckNvbmZpZ1skQ0xUX1BST1BFUlRJRVMuRGF0YU92ZXJUQ1BdfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ29sbGVjdG9yQ29uZmlnRGF0YSAoW3N0cmluZ10kQ29sbGVjdG9yT3V0cHV0KSB7DQogICAgJGFycmF5ID0gJENvbGxlY3Rvck91dHB1dC5TcGxpdChbZW52aXJvbm1lbnRdOjpOZXdMaW5lKQ0KICAgICRjb2xsZWN0b3JQcm9wZXJ0aWVzID0gQHt9DQoNCiAgICBmb3JlYWNoICgkaXRlbSBpbiAkYXJyYXkpIHsNCiAgICAgICAgaWYgKCRpdGVtIC1jbWF0Y2ggJ14uKj0nKSB7DQogICAgICAgICAgICAkc3BsaXRJdGVtID0gJGl0ZW0uU3BsaXQoJz0nKQ0KICAgICAgICAgICAgJGNvbGxlY3RvclByb3BlcnRpZXNbJHNwbGl0SXRlbVswXS5UcmltKCldID0gJHNwbGl0SXRlbVsxXS5UcmltKCkNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkY29sbGVjdG9yUHJvcGVydGllcw0KfQ0KDQpmdW5jdGlvbiBHZXQtQ29sbGVjdG9yRW5naW5lQWRkcmVzcyAoW3N0cmluZ10kQ29uZmlnVmFsdWUpIHsNCiAgICAkc2VwYXJhdG9yID0gJygnDQogICAgaWYgKCRDb25maWdWYWx1ZSAtbWF0Y2ggIlwkc2VwYXJhdG9yIikgew0KICAgICAgICByZXR1cm4gKFNwbGl0LVNlcGFyYXRlZFZhbHVlIC1WYWx1ZSAkQ29uZmlnVmFsdWUgLVNlcGFyYXRvciAkc2VwYXJhdG9yKVswXS5UcmltKCkNCiAgICB9DQogICAgcmV0dXJuICRDb25maWdWYWx1ZQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUNvbGxlY3RvckNvbmZpZ3VyYXRpb24gKFtoYXNodGFibGVdJENvbmZpZywgW2hhc2h0YWJsZV0kRGVzaXJlZENvbmZpZykgew0KICAgIHJldHVybiAkQ29uZmlnLlRDUFBvcnQgLWVxICREZXNpcmVkQ29uZmlnLlRDUFBvcnQgLWFuZCBgDQogICAgICAgICRDb25maWcuSXAgLW1hdGNoICREZXNpcmVkQ29uZmlnLklwDQp9DQoNCmZ1bmN0aW9uIFNldC1Db2xsZWN0b3JDb25maWd1cmF0aW9uIChbc3RyaW5nXSRJcCwgW3N0cmluZ10kVENQUG9ydCkgew0KICAgICRzdWNjZXNzUGF0dGVybiA9ICdueHRjZmcgL3Jlc3RhcnQnDQogICAgJGV4ZWN1dGlvbk91dHB1dCA9IEludm9rZS1Qcm9jZXNzIC1GaWxlUGF0aCAkTlhUQ0ZHX0VYRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Bcmd1bWVudHMgIi9zIGlwPSRJcCB0Y3BfcG9ydD0kVENQUG9ydCINCiAgICBpZiAoJGV4ZWN1dGlvbk91dHB1dC5FeGl0Q29kZSAtbmUgJENMVF9TRVRfRVhJVENPREUgLW9yIGANCiAgICAgICAgLW5vdCAoJGV4ZWN1dGlvbk91dHB1dC5TdGRPdXQgLW1hdGNoICRzdWNjZXNzUGF0dGVybikpIHsNCiAgICAgICAgdGhyb3cgIk54dGNmZyBmaW5pc2hlZCB1bmV4cGVjdGVkbHkgd2l0aCBleGl0IGNvZGUgJCgkZXhlY3V0aW9uT3V0cHV0LkV4aXRDb2RlKSBhbmQgbWVzc2FnZSAkKCRleGVjdXRpb25PdXRwdXQuU3RkT3V0KS4gIg0KICAgIH0NCn0NCg0KIw0KIyBUZXN0IFRDUCBDb25uZWN0aW9uDQojDQpmdW5jdGlvbiBUZXN0LURlc2lyZWRDb25uZWN0aW9uIChbaGFzaHRhYmxlXSREZXNpcmVkQ29uZmlnKSB7DQogICAgVGVzdC1UQ1BDb25uZWN0aW9uIC1EZXN0aW5hdGlvbiAkRGVzaXJlZENvbmZpZy5JcCBgDQogICAgICAgICAgICAgICAgICAgICAgIC1Qb3J0ICREZXNpcmVkQ29uZmlnLlRDUFBvcnQNCn0NCg0KZnVuY3Rpb24gVGVzdC1UQ1BDb25uZWN0aW9uIChbc3RyaW5nXSREZXN0aW5hdGlvbiwgW2ludF0kUG9ydCkgew0KICAgIHRyeSB7DQogICAgICAgICR0Y3BDbGllbnQgPSBOZXctT2JqZWN0IHN5c3RlbS5uZXQuc29ja2V0cy50Y3BjbGllbnQNCiAgICAgICAgJGlhciA9ICR0Y3BDbGllbnQuQmVnaW5Db25uZWN0KCREZXN0aW5hdGlvbiwgJFBvcnQsICRudWxsLCAkbnVsbCkNCiAgICAgICAgW3ZvaWRdJGlhci5Bc3luY1dhaXRIYW5kbGUuV2FpdE9uZSgkVElNRU9VVF9JTl9NSUxMSVNFQ09ORFMpDQogICAgICAgIGlmICgkdGNwQ2xpZW50LkNvbm5lY3RlZCAtZXEgJGZhbHNlKSB7IHRocm93IH0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIlVuYWJsZSB0byBtYWtlIGEgY29ubmVjdGlvbiB0byAkKCREZXN0aW5hdGlvbik6JFBvcnQuICINCiAgICB9IGZpbmFsbHkgeyAkdGNwQ2xpZW50LkNsb3NlKCkgfQ0KfQ0KDQojDQojIFNjaGVkdWxlZCBUYXNrIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIE5ldy1Db2xsZWN0b3JTZXR0ZXJUYXNrIChbc3RyaW5nXSRJcCwgW3N0cmluZ10kVENQUG9ydCkgew0KICAgICRhcmd1bWVudHMgPSBHZXQtU2NoZWR1bGVkVGFza0FyZ3VtZW50cyAtTmFtZSAkUkVTVEFSVF9DT0xMRUNUT1JfVEFTS19QUk9QRVJUSUVTLk5hbWUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRGVsYXkgJFJFU1RBUlRfQ09MTEVDVE9SX1RBU0tfUFJPUEVSVElFUy5EZWxheUluU2Vjb25kcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1BY3Rpb24gIiRQT1dFUlNIRUxMX0VYRSAnJE5YVENGR19FWEUgL3MgaXA9JElwIHRjcF9wb3J0PSRUQ1BQb3J0OyAkTlhUQ0ZHX0VYRSAvcmVzdGFydCciDQogICAgW3ZvaWRdKEludm9rZS1Qcm9jZXNzIC1GaWxlUGF0aCAkVEFTS19TQ0hFRFVMRVJfRVhFIC1Bcmd1bWVudHMgJGFyZ3VtZW50cykNCn0NCmZ1bmN0aW9uIEdldC1EYXRlRm9ybWF0IHsNCiAgICAkZGF0ZV9hcnJheSA9ICRDVUxUVVJFLlNob3J0RGF0ZVBhdHRlcm4uU3BsaXQoJENVTFRVUkUuRGF0ZVNlcGFyYXRvcikNCiAgICAkZmluYWxfZGF0ZV9mb3JtYXQgPSBAKCkNCg0KICAgIGZvcmVhY2ggKCRpdGVtIGluICRkYXRlX2FycmF5KSB7DQogICAgICAgIGlmICgkaXRlbS5sZW5ndGggLWVxIDEpIHsNCiAgICAgICAgICAgICRmaW5hbF9kYXRlX2Zvcm1hdCArPSAkaXRlbSArICRpdGVtDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZmluYWxfZGF0ZV9mb3JtYXQgKz0gJGl0ZW0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkZmluYWxfZGF0ZV9mb3JtYXQgLWpvaW4gJENVTFRVUkUuRGF0ZVNlcGFyYXRvcg0KfQ0KDQpmdW5jdGlvbiBOZXctUm9sbGJhY2tTY2hlZHVsZWRUYXNrIChbaGFzaHRhYmxlXSRPcmlnaW5hbENvbGxlY3RvckRhdGEpIHsNCiAgICB0cnkgew0KICAgICAgICBOZXctU2NyaXB0RmlsZSAtUGF0aCAkUk9MTEJBQ0tfU0NSSVBUX1BBVEgNCg0KICAgICAgICAkYWN0aW9uID0gIiRQT1dFUlNIRUxMX0VYRSAtQ29tbWFuZCAnJFJPTExCQUNLX1NDUklQVF9QQVRIIC1NYXhpbXVtRGVsYXlJblNlY29uZHMgMCAtRW5naW5lc01hcHBpbmcgJCgkT3JpZ2luYWxDb2xsZWN0b3JEYXRhLklwKSAtVENQUG9ydCAkKCRPcmlnaW5hbENvbGxlY3RvckRhdGEuVENQUG9ydCknIg0KICAgICAgICAkYXJndW1lbnRzID0gR2V0LVNjaGVkdWxlZFRhc2tBcmd1bWVudHMgLU5hbWUgJFJPTExCQUNLX1RBU0tfUFJPUEVSVElFUy5OYW1lIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1EZWxheSAkUk9MTEJBQ0tfVEFTS19QUk9QRVJUSUVTLkRlbGF5SW5TZWNvbmRzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1BY3Rpb24gJGFjdGlvbg0KDQogICAgICAgIFt2b2lkXShJbnZva2UtUHJvY2VzcyAtRmlsZVBhdGggJFRBU0tfU0NIRURVTEVSX0VYRSAtQXJndW1lbnRzICRhcmd1bWVudHMpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICJNaWdyYXRpb24gd2FzIGFib3J0ZWQgYmVjYXVzZSByb2xsYmFjayBwcmVwYXJhdGlvbiBjb3VsZCBub3QgYmUgZmluaXNoZWQuIFJlYXNvbjogJF8uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIE5ldy1TY3JpcHRGaWxlIChbc3RyaW5nXSRQYXRoKSB7DQogICAgJGRpcmVjdG9yeVBhdGggPSBTcGxpdC1QYXRoIC1QYXRoICRQYXRoIC1QYXJlbnQNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRkaXJlY3RvcnlQYXRoKSkgew0KICAgICAgICBbdm9pZF0oTmV3LUl0ZW0gLVBhdGggJGRpcmVjdG9yeVBhdGggLUl0ZW1UeXBlICdEaXJlY3RvcnknIC1Gb3JjZSkNCiAgICB9DQoNCiAgICBbdm9pZF0oTmV3LUl0ZW0gLVBhdGggJFBhdGggLUl0ZW1UeXBlICdGaWxlJyAtVmFsdWUgJFNDUklQVF9DT05URU5UIC1Gb3JjZSkNCn0NCg0KIw0KIyBSb2xsYmFjaw0KIw0KZnVuY3Rpb24gSW52b2tlLVJvbGxiYWNrTW9kZSAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgUmVtb3ZlLUZpbGUgLVBhdGggJFJPTExCQUNLX1NDUklQVF9QQVRIDQogICAgJGNvbGxlY3RvckNvbmZpZyA9IEdldC1Db2xsZWN0b3JDb25maWd1cmF0aW9uDQoNCiAgICBpZiAoJGNvbGxlY3RvckNvbmZpZy5UY3BTdGF0dXMgLW1hdGNoICdDb25uZWN0ZWQnKSB7DQogICAgICAgIFJlbW92ZS1GaWxlIC1QYXRoICRST0xMQkFDS19GSUxFX1BBVEgNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgSW52b2tlLVJvbGxiYWNrIC1JcCAkSW5wdXRQYXJhbWV0ZXJzLkVuZ2luZXNNYXBwaW5nIC1UQ1BQb3J0ICRJbnB1dFBhcmFtZXRlcnMuVENQUG9ydA0KICAgIE5ldy1TY3JpcHRGaWxlIC1QYXRoICRST0xMQkFDS19GSUxFX1BBVEgNCn0NCg0KZnVuY3Rpb24gSW52b2tlLVJvbGxiYWNrIChbc3RyaW5nXSRJcCwgW3N0cmluZ10kVENQUG9ydCkgew0KICAgIFNldC1Db2xsZWN0b3JDb25maWd1cmF0aW9uIC1JcCAkSXAgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1UQ1BQb3J0ICRUQ1BQb3J0DQogICAgW3ZvaWRdKEludm9rZS1Qcm9jZXNzIC1GaWxlUGF0aCAkTlhUQ0ZHX0VYRSAtQXJndW1lbnRzICcvcmVzdGFydCcpDQp9DQoNCiMNCiMgTmV4dGhpbmsgT3V0cHV0IG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIFVwZGF0ZS1FbmdpbmVPdXRwdXRWYXJpYWJsZXMgKFtoYXNodGFibGVdJE1pZ3JhdGlvblJlc3VsdHMpIHsNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRCb29sKCdDb25uZWN0aW9uRXN0YWJsaXNoZWQnLCAkTWlncmF0aW9uUmVzdWx0cy5Db25uZWN0aW9uRXN0YWJsaXNoZWQpDQogICAgW254dF06OldyaXRlT3V0cHV0Qm9vbCgnQ29sbGVjdG9yRGF0YU92ZXJUQ1AnLCAkTWlncmF0aW9uUmVzdWx0cy5Db2xsZWN0b3JEYXRhT3ZlclRDUCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRCb29sKCdEZXN0aW5hdGlvbkNoYW5nZWRTY2hlZHVsZScsICRNaWdyYXRpb25SZXN1bHRzLkRlc3RpbmF0aW9uQ2hhbmdlZFNjaGVkdWxlKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dEJvb2woJ0Rlc3RpbmF0aW9uQ2hhbmdlZCcsICRNaWdyYXRpb25SZXN1bHRzLkRlc3RpbmF0aW9uQ2hhbmdlZCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRCb29sKCdSb2xsYmFjaycsICRNaWdyYXRpb25SZXN1bHRzLlJvbGxiYWNrKQ0KfQ0KDQojDQojIE1haW4gc2NyaXB0IGZsb3cNCiMNCltlbnZpcm9ubWVudF06OkV4aXQoKEludm9rZS1NYWluIC1JbnB1dFBhcmFtZXRlcnMgJE15SW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnMpKQ0KIyBTSUcgIyBCZWdpbiBzaWduYXR1cmUgYmxvY2sNCiMgTUlJajVRWUpLb1pJaHZjTkFRY0NvSUlqMWpDQ0k5SUNBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1Qmdvcg0KIyBCZ0VFQVlJM0FnRUVvR3N3YVRBMEJnb3JCZ0VFQVlJM0FnRWVNQ1lDQXdFQUFBUVFIOHc3WUZsTENFNjNKTkxHDQojIEtYN3pVUUlCQUFJQkFBSUJBQUlCQUFJQkFEQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDRExud2N1dUdFZnBtOEYNCiMgM0ppTXFQTWd5bFd5cW92YXgwZ1h0bmJNdFdOK2tLQ0NFVHN3Z2dQRk1JSUNyYUFEQWdFQ0FoQUNyRndtYWd0QQ0KIyBtNDhMZWZLdVJpVjNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hd3hDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLDQojIEV3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4S3pBcEJnTlYNCiMgQkFNVElrUnBaMmxEWlhKMElFaHBaMmdnUVhOemRYSmhibU5sSUVWV0lGSnZiM1FnUTBFd0hoY05NRFl4TVRFdw0KIyBNREF3TURBd1doY05NekV4TVRFd01EQXdNREF3V2pCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NDQojIFJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUUQNCiMgRXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUlJQklqQU5CZ2txaGtpRw0KIyA5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHN6bGMrYjcxTHZsTFMweXB0L2xnVC9KelNWSnRuRXF3OVdVDQojIE5HZWlDaHl3WDJtbVFMSEV0N0tQMEppa3FVRlpPdFBjbE5ZODIzUTRwRXJNVFNXQzkwcWxVeEk0N3ZOSmJYR1INCiMgZm1PMnE2WmZ3NlNFK0U5aVViNzR4ZXpiT0pMakJ1VUlrUXpFS0VGVis4dGFpUlYrY2VnMXYwMXlDVDIrT2poUQ0KIyBXM2N4RzQyenh5UkZtcWVzYlFBVVdnUzN1aFByVVFxWVFVRWlUbVZoaDRGQlVLWjVYSW5lR1VwWDFTN21YUnhUDQojIExINll6Um9HRnFSb2M5QTBCQk5jb1hIVFdueFYyMTVrNFRlSE1GWUU1UkcwS1lBUzhYazVpS0lDRVh3blpyZUkNCiMgdDNqeXlncW9PS3NLWk1LL1psMlZoTUdoSlI2SFhScFFDeUFTekVHN2JndFJPTGhMeXdJREFRQUJvMk13WVRBTw0KIyBCZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXNUN0RhUVA0DQojIHYwY0IxSmdtR2dnQzcyTmtLOE13SHdZRFZSMGpCQmd3Rm9BVXNUN0RhUVA0djBjQjFKZ21HZ2dDNzJOa0s4TXcNCiMgRFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUJ3YUJwZmMxNXlmUElobUJnaFhJZHNoUi9ncVo2cS9HREoyUUJCWA0KIyB3WXJ6ZXRrUlpZNDErcDc4UmJXZTJVd3hTN2lSNkVNc2pyTjR6dHZqVTNseDF1VWhsQUhhVlllYUpHVDJpbWJNDQojIDNwdzN6YWcwc1dtYkk4aWVlQ0lyY0VQalZVY3hZUm52V01XRkwwNHc5cUF4RmlQSTUrSmxGalBMdnhvYm9EMzQNCiMgeWw2TE1ZdGdDSWt0REFaY1VyZkUrUXFZMFJWZm54SytmRFpqT0wxRXBIL2tKaXNLeEpkcERlbU00c0FRVjdqSQ0KIyBkaEtSVmZKSWFkaThLZ0piRDBUVUlESGI5THB3SmwyUVlKNjhTeGNKTDdUTEhrTm95UWNud2RKYzkrb2h1V2dTDQojIG5EeWN2NTc4Z0Z5Ylk4M3NSNm9sSjJlZ04vTUFnbjFVMTZuNDZTNFRvM2ZvSDBvd2dnYXVNSUlGbHFBREFnRUMNCiMgQWhBS0dnMGJjbytVdUxkd0ZDQjhLZ3JFTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3d4Q3pBSkJnTlZCQVlUQWxWVA0KIyBNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqDQojIGIyMHhLekFwQmdOVkJBTVRJa1JwWjJsRFpYSjBJRVZXSUVOdlpHVWdVMmxuYm1sdVp5QkRRU0FvVTBoQk1pa3cNCiMgSGhjTk1qQXdPREUzTURBd01EQXdXaGNOTWpNd09ESXlNVEl3TURBd1dqQ0J3REVUTUJFR0N5c0dBUVFCZ2pjOA0KIyBBZ0VERXdKRFNERVZNQk1HQ3lzR0FRUUJnamM4QWdFQ0V3UldZWFZrTVIwd0d3WURWUVFQREJSUWNtbDJZWFJsDQojIElFOXlaMkZ1YVhwaGRHbHZiakVZTUJZR0ExVUVCUk1QUTBoRkxURXhNaTR3TURBdU5UYzVNUXN3Q1FZRFZRUUcNCiMgRXdKRFNERVBNQTBHQTFVRUJ4TUdVSEpwYkd4NU1SWXdGQVlEVlFRS0V3MU9SVmhVYUdsdWF5QlRMa0V1TVFzdw0KIyBDUVlEVlFRTEV3SlNSREVXTUJRR0ExVUVBeE1OVGtWWVZHaHBibXNnVXk1QkxqQ0NBaUl3RFFZSktvWklodmNODQojIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTWJyOGs1QjRVVDdFOSs2U2tvYTNJaHk4djZ2U0hXYTVUZnB0UG4NCiMgQjFKUTdCZ3N3NkVEQ0kvSHJJbGNSUkYrZmVYR1lQWWFrSjVuZzFja00yMnUvRnRBbXJsaGI1VkxGT2VNaXViLw0KIyBSNWNQUTZJaGpkQ25UaVZQckJiWWV2Q215SE9UZHFjNzRHRnlnQksrZy9aTFpxT1dKRGtod1ZpbVROVFAxUk8vDQojIEJlYzNKSTNycjBDdUlxcUd2Q3QvVHVjUHN6Vnl1S1JWaXc1Z3ZNa2F3UXZmd1Q4TW1MZkZrcjk4bHQ0QmxUWkcNCiMgU2tvUHVtRVMrYkpkV01UdGRUZlpJaytLUXY2MG9XbXNXbEkvTHhlK20xcUluQ0VETEZuU3NRSU4rSEdrYWJXNQ0KIyBVaUVKNmJEalpDSUI1UGhRWGp2MFdYTFRHWnFUY2JCZUJMSUFuMDZMOVRJSDZvQ0c4N1FsclhkeXNPRGNhcWlRDQojIFNrQUo3YlhRc2NmV3NSSFdQclJ6VTM2QTJtT3hES0VSR3hIM2lQRHhmVjlOQUViOGhkRlRmeEpSTWEraEVBcXQNCiMgNnF4NFB1VVpidTdtOFRyaCtmSEtvNVM5YndYa1ltaTBURE9OcFlFUW1iNytsZWZjSHFMTmFJZ3BmZEs1aC8wVg0KIyBsVWxwRHdsTkdYTWZFMmFCaE5SNkw1Tzk5cjExWTJxSkExT21NQmNQTm9ZN2xqWG1kTUh1MVY5L0RFMEpLNE9ZDQojIFZ4Ym5VVk1xVGYzL1ZnWnhHZWNZTU1mYW1qdjQyc1BGdk1kYUNqOEMzTjRjMGQ0c1dPbHRKa2pDbWk1Zkt3OXkNCiMgVUdMelV6V09meDl5MGFUUW45U2QveTY4Y0JQL0psLzFrd3MzeFA0T3Jzemw1dkFGZW5UUXd0T0hMZ3NvazBFRg0KIyBGdWFMQWdNQkFBR2pnZ0gxTUlJQjhUQWZCZ05WSFNNRUdEQVdnQlNQNkg3d2JUSnFBQVVqeDNDWGFqcVEvMnZxDQojIDFEQWRCZ05WSFE0RUZnUVVVbHVvelBDSW9ZQnl1RDRkVkJjQ2xidzQ2Mzh3TWdZRFZSMFJCQ3N3S2FBbkJnZ3INCiMgQmdFRkJRY0lBNkFiTUJrTUYwTklMVlpCVlVRdFEwaEZMVEV4TWk0d01EQXVOVGM1TUE0R0ExVWREd0VCL3dRRQ0KIyBBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QjdCZ05WSFI4RWREQnlNRGVnTmFBemhqRm9kSFJ3DQojIE9pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXRaekV1WTNKc01EZWcNCiMgTmFBemhqRm9kSFJ3T2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdA0KIyBaekV1WTNKc01Fc0dBMVVkSUFSRU1FSXdOd1lKWUlaSUFZYjliQU1DTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwDQojIGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNd0J3WUZaNEVNQVFNd2ZnWUlLd1lCQlFVSEFRRUUNCiMgY2pCd01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdTQVlJS3dZQg0KIyBCUVVITUFLR1BHaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFVldRMjlrDQojIFpWTnBaMjVwYm1kRFFTMVRTRUV5TG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVk2SUI0UG5OY3poZGVtVlZpZHRUOFhUMFArL0VqOWJiYU1JbVI2SEVMVGNZWDE5Z2prc0ZOVXJSNg0KIyAvWFVQZ2FqL25TcGxyNU9qM0RKNUpDUG8yQVZLd1kxbVVXUzJ1WW9aUmluRUFvZERmRVNxZlRpUjE5ODJ4cDcyDQojIGdvMzQ3R1RNbnBwazJFcGR1SWlvaStkY3diYncxRGYybkZ6STNGY1g3SDFVSVBkOE00cDNVQXQ1V0NpVk1QSFcNCiMgWHhyUXQ1bjhqeGdMY3Vzdk9SWFpxWk9zZFRsN0hacHNWSG5HVVk3ODdPdTBJSnh1RnNpVU02NGJLR3p2TnFxdA0KIyBZeUZ5Ujk5RXJDVHFkWjY2dXJhRmlsQWdqUHdhTEZ6SlV3NithSy93V3hLQjdRMHBpSUNwZVgxWDBJTFp1NTZHDQojIFIyMDZWRWNteFdJTFlqUUUyTlpjVCs3dmJVem1NSUlHdkRDQ0JhU2dBd0lCQWdJUUEvRzA0Vjg2Z3ZFVWxuaXoNCiMgMTloSFhEQU5CZ2txaGtpRzl3MEJBUXNGQURCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbg0KIyBhVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUURFeUpFDQojIGFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERURXlNRFF4T0RFeU1EQXcNCiMgTUZvWERUSTNNRFF4T0RFeU1EQXdNRm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuDQojIGFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXlLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUINCiMgQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2RUK2creXRSUHhaTStFZ1B5dWdEWFJ0dGZIb3l5c0dpeXM4WVNzT2pVUw0KIyBPcEtSdWxma3hNbnpMNmhJUExmV2J0eVhJcnBSZVdHdlF5OE50NXUwU1RHdVJGZytwS0dXcDRkUEkzN0RiR1VrDQojIGtGVStvY29qZk1WQzZjUjZZa1diZmQ1amRNdWVZeVg0aEpxYXJVVlBybjBmeUJQTGRadko0ZUdLK0FzTW1QVEsNCiMgUHRCRnFub2VwVmlUTmpTK0t5NHJNVmhtdERJUW41M3dVcUh2NkQ3VGR2SkFXdHo2YWowYlM2MTJzSXhjN2phNg0KIyBnK293cUV6ZThRc3FXRUdJcmdDSnF3UFJGb0lnSW5iclhsUTRFbUxoMG5BazIrMGZjTkprQ1lBdDRyYWR6aC95DQojIHV5SHpiTnZZc3hsN2lsQ2Y3K3cyQ2x5YXQwclRDS0E1ZWYzZHZ6MDZDU1VDQXdFQUFhT0NBMWd3Z2dOVU1CSUcNCiMgQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZEpRUU1NQW9HQ0NzRw0KIyBBUVVGQndNRE1IOEdDQ3NHQVFVRkJ3RUJCSE13Y1RBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1DQojIFpHbG5hV05sY25RdVkyOXRNRWtHQ0NzR0FRVUZCekFDaGoxb2RIUndPaTh2WTJGalpYSjBjeTVrYVdkcFkyVnkNCiMgZEM1amIyMHZSR2xuYVVObGNuUklhV2RvUVhOemRYSmhibU5sUlZaU2IyOTBRMEV1WTNKME1JR1BCZ05WSFI4RQ0KIyBnWWN3Z1lRd1FLQStvRHlHT21oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwDQojIFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXcwTG1ScFoybGoNCiMgWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dnZ0hFQmdOVg0KIyBIU0FFZ2dHN01JSUJ0ekNDQWJNR0NXQ0dTQUdHL1d3REFqQ0NBYVF3T2dZSUt3WUJCUVVIQWdFV0xtaDBkSEE2DQojIEx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwzTnpiQzFqY0hNdGNtVndiM05wZEc5eWVTNW9kRzB3Z2dGa0JnZ3INCiMgQmdFRkJRY0NBakNDQVZZZWdnRlNBRUVBYmdCNUFDQUFkUUJ6QUdVQUlBQnZBR1lBSUFCMEFHZ0FhUUJ6QUNBQQ0KIyBRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFkQUJsQUNBQVl3QnZBRzRBY3dCMEFHa0FkQUIxQUhRQVpRQnpBQ0FBDQojIFlRQmpBR01BWlFCd0FIUUFZUUJ1QUdNQVpRQWdBRzhBWmdBZ0FIUUFhQUJsQUNBQVJBQnBBR2NBYVFCREFHVUENCiMgY2dCMEFDQUFRd0JRQUM4QVF3QlFBRk1BSUFCaEFHNEFaQUFnQUhRQWFBQmxBQ0FBVWdCbEFHd0FlUUJwQUc0QQ0KIyBad0FnQUZBQVlRQnlBSFFBZVFBZ0FFRUFad0J5QUdVQVpRQnRBR1VBYmdCMEFDQUFkd0JvQUdrQVl3Qm9BQ0FBDQojIGJBQnBBRzBBYVFCMEFDQUFiQUJwQUdFQVlnQnBBR3dBYVFCMEFIa0FJQUJoQUc0QVpBQWdBR0VBY2dCbEFDQUENCiMgYVFCdUFHTUFid0J5QUhBQWJ3QnlBR0VBZEFCbEFHUUFJQUJvQUdVQWNnQmxBR2tBYmdBZ0FHSUFlUUFnQUhJQQ0KIyBaUUJtQUdVQWNnQmxBRzRBWXdCbEFDNHdIUVlEVlIwT0JCWUVGSS9vZnZCdE1tb0FCU1BIY0pkcU9wRC9hK3JVDQojIE1COEdBMVVkSXdRWU1CYUFGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVpNMG9NZ1RNMzI2MDJ5ZVRKT3J1MUd5NTZvdUwwUTBJWG5yOU9vVTNoc2R2cGdkMmZBZkxraU5YcA0KIyAvZ245SWNIc1hZRFM4TmJCUThMK2R5dmIrZGVSTTg1czFiSVpPK1l1MXNtVFQ0aEFqczNoOVg3eEQ4WlpWbkxvDQojIDYycEJ2UnpWUnRWOFNjcG1PQlhCditDUmNIZUgzTW1OTWNrTUthSXo3WTNpaDgySmpUOGIvOVhnR3BlTGZOcHQNCiMgKzZqR3NqcG1hM3NCczgzWXBqVHNFZ0dybFZpbHhGTlhxR0RtNXdJU29Ma2paS0pOdTN5QkpXUWh2cy91UWhoRA0KIyBsN3VsTndhdlRmOG1wVTFoUyt4R1FiaGx6cmg1bmdpV0M0R01panVQeDVtTW95cHVtRzFlWWNhV3Q0cTVZUzJUDQojIHVPc09CRVBYOWY2bThHTFVtV3Fsd2NId1pKU0FNWUlTQURDQ0Vmd0NBUUV3Z1lBd2JERUxNQWtHQTFVRUJoTUMNCiMgVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMA0KIyBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5DQojIEtRSVFDaG9ORzNLUGxMaTNjQlFnZkNvS3hEQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQmhEQVlCZ29yQmdFRUFZSTMNCiMgQWdFTU1Rb3dDS0FDZ0FDaEFvQUFNQmtHQ1NxR1NJYjNEUUVKQXpFTUJnb3JCZ0VFQVlJM0FnRUVNQndHQ2lzRw0KIyBBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNEWjZ4RU9BTzFnDQojIFZNTlh6dHZzUHhYdFNoUTVYaXQ5K09qZ0hrOWVKVm0rS2pBTkJna3Foa2lHOXcwQkFRRUZBQVNDQWdDZDhRS28NCiMgSjBwZWlJS0lmTjJyNWJFQ1AyeDJUUXlCSzE4dUxZeXBlM2dHSnpmQW9JemdKZTBIYTBVTnpRNEpIdzVINi9TWg0KIyBCZHN3UDdEUjJOS1loaXg3UWZGV2FTQnk2MldXNHRkSFVJSlhNa0JHcEpWWi83b0dBZDN6TytlZVBwRHkwWXJQDQojIDhPZ1JZamV1VE81b1lzaTBhbXArVHhNYWRYTDkyaFF1TElXWTJWS2lKOFh3d2lVanp0cGdSU1RaREhNcVVTZnENCiMgMWRZd05WZWhmdE9QWXNaRVFuSFNZcHRFeTJ3TG0zMTROaUVVQWd6VjFuUUNUTldyRHVkQjYxazJoeHU1QnlYeQ0KIyBZQVVuS0ZpTE5xQktLM2JuSUtrZ3dhR215WTFBcDJINU1XeVNwTUkrMElOZzd1L28xNzA2RFgwbVpYN0tpdE5LDQojIFEzSmlQeWd5VEZJUmlTcFFzTzM0ZTlMeFd3ZmkwM2Z4c0crUUJEUG5pMHlGQm8yQXJxeXkyR2FyQ294ekE0azgNCiMgcjJsb1Z2dVk5WTNpREl4dXZod01EMmpYQ2IxRm5WQ0g2MFhwMHlLUVBwdGp6QnFwZ3BGZlhVdTJybEZIdU0yaQ0KIyBDc2VNOGFuQ0kwQ1BPZ1dKUWV2ZmRSNHJacW04MVhGN2Y5REpsYjR6VWdJZEFKMWR6d1RhSWtJU3ZVSUdoQ0FLDQojIDlMa0lvUWlzeEdkNkpzNis0VVdmbGJHR01oRTB4TEc3ZkRjRTQ4MFRod0Q0MS9XTEtkbDYzQ01wV1ZnTTFrUVENCiMgSFNDMDdJVVNBRFlxRFZiRWV5ZFlYRkZhMWptbm5OVDhNRVJOZHcrVG9NdW5nWTJYSERyNE9PWTBablVnSXlUMA0KIyBYK1B3YXd5UEJMR3kxUmx2R3B4SnJsM0E3bEd3eFc4T09MUWF0S0dDRHNrd2dnN0ZCZ29yQmdFRUFZSTNBd01CDQojIE1ZSU90VENDRHJFR0NTcUdTSWIzRFFFSEFxQ0NEcUl3Z2c2ZUFnRURNUTh3RFFZSllJWklBV1VEQkFJQkJRQXcNCiMgZUFZTEtvWklodmNOQVFrUUFRU2dhUVJuTUdVQ0FRRUdDV0NHU0FHRy9Xd0hBVEF4TUEwR0NXQ0dTQUZsQXdRQw0KIyBBUVVBQkNCb3VxUmh6Z3dFV2tvekRkOS96bzZnT0VOUHBaSnIxSTZHUDRaZStTaFdTQUlSQUlUUVorRjhxaHhDDQojIExKL2hwTFJnOUpBWUR6SXdNakF3T0RFNU1UWXpOek01V3FDQ0M3c3dnZ2FDTUlJRmFxQURBZ0VDQWhBRXpUK0YNCiMgYUs1MnhodXcvbkZnektkdE1BMEdDU3FHU0liM0RRRUJDd1VBTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRA0KIyBWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhNVEF2DQojIEJnTlZCQU1US0VScFoybERaWEowSUZOSVFUSWdRWE56ZFhKbFpDQkpSQ0JVYVcxbGMzUmhiWEJwYm1jZ1EwRXcNCiMgSGhjTk1Ua3hNREF4TURBd01EQXdXaGNOTXpBeE1ERTNNREF3TURBd1dqQk1NUXN3Q1FZRFZRUUdFd0pWVXpFWA0KIyBNQlVHQTFVRUNoTU9SR2xuYVVObGNuUXNJRWx1WXk0eEpEQWlCZ05WQkFNVEcxUkpUVVZUVkVGTlVDMVRTRUV5DQojIE5UWXRNakF4T1MweE1DMHhOVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPbGsNCiMgTlp6NnFaaGxaQnZrRjl5NEtUYk1ad2xZaFUwdzRNbi81VHM4RVNoUXJ3Y3g0bDBKR01MMmlZeHBDQVFqNEhjdA0KIyBuUlhsdU9paGFvNy8xSzdTZWhiditFRzFIVGwxd2M4dnA2eEZmcFJ0ckFNQm1UeGlQbjU2L1VXWE1iVDZ0OWxDDQojIFBxZFZtOTlhVDFnQ3FESnBJaE8raTRJdHhwaXJhNXUweWZKbEVReDBEYkx3Q0paMHhPaXlTS0toRktYNCt1R0oNCiMgY0VRN2plLzdwUFREdWIwVUxPc01LQ2NsZ0tzUVN4WVNZQXRwSW94T3pjYlZzbVZaSWVCOExCS05jQTZQaXNyZw0KIyAwOWV6T1hkUTBFSXNMbnJPbkdkNk9IZFVRUDlQbFFRZzFPdkl6b2NVQ1A0ZGdOM1E1eXQ0NnI4ZmNNYnVRaFpUDQojIE5rV2JVeGxKWXAxNkFwdVZGS01DQXdFQUFhT0NBemd3Z2dNME1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlYNCiMgSFJNQkFmOEVBakFBTUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TUlNSUlCdndZRFZSMGdCSUlCdGpDQw0KIyBBYkl3Z2dHaEJnbGdoa2dCaHYxc0J3RXdnZ0dTTUNnR0NDc0dBUVVGQndJQkZoeG9kSFJ3Y3pvdkwzZDNkeTVrDQojIGFXZHBZMlZ5ZEM1amIyMHZRMUJUTUlJQlpBWUlLd1lCQlFVSEFnSXdnZ0ZXSG9JQlVnQkJBRzRBZVFBZ0FIVUENCiMgY3dCbEFDQUFid0JtQUNBQWRBQm9BR2tBY3dBZ0FFTUFaUUJ5QUhRQWFRQm1BR2tBWXdCaEFIUUFaUUFnQUdNQQ0KIyBid0J1QUhNQWRBQnBBSFFBZFFCMEFHVUFjd0FnQUdFQVl3QmpBR1VBY0FCMEFHRUFiZ0JqQUdVQUlBQnZBR1lBDQojIElBQjBBR2dBWlFBZ0FFUUFhUUJuQUdrQVF3QmxBSElBZEFBZ0FFTUFVQUF2QUVNQVVBQlRBQ0FBWVFCdUFHUUENCiMgSUFCMEFHZ0FaUUFnQUZJQVpRQnNBSGtBYVFCdUFHY0FJQUJRQUdFQWNnQjBBSGtBSUFCQkFHY0FjZ0JsQUdVQQ0KIyBiUUJsQUc0QWRBQWdBSGNBYUFCcEFHTUFhQUFnQUd3QWFRQnRBR2tBZEFBZ0FHd0FhUUJoQUdJQWFRQnNBR2tBDQojIGRBQjVBQ0FBWVFCdUFHUUFJQUJoQUhJQVpRQWdBR2tBYmdCakFHOEFjZ0J3QUc4QWNnQmhBSFFBWlFCa0FDQUENCiMgYUFCbEFISUFaUUJwQUc0QUlBQmlBSGtBSUFCeUFHVUFaZ0JsQUhJQVpRQnVBR01BWlFBdU1Bc0dDV0NHU0FHRw0KIyAvV3dERlRBZkJnTlZIU01FR0RBV2dCVDB0dUVnSGY0cHJ0TGtZYVd5b2lXeXlCYzFiakFkQmdOVkhRNEVGZ1FVDQojIFZsTVB3Y1lIcDAzWDJHNVhjb0JRVE9Uc25zRXdjUVlEVlIwZkJHb3dhREF5b0RDZ0xvWXNhSFIwY0RvdkwyTnkNCiMgYkRNdVpHbG5hV05sY25RdVkyOXRMM05vWVRJdFlYTnpkWEpsWkMxMGN5NWpjbXd3TXFBd29DNkdMR2gwZEhBNg0KIyBMeTlqY213MExtUnBaMmxqWlhKMExtTnZiUzl6YUdFeUxXRnpjM1Z5WldRdGRITXVZM0pzTUlHRkJnZ3JCZ0VGDQojIEJRY0JBUVI1TUhjd0pBWUlLd1lCQlFVSE1BR0dHR2gwZEhBNkx5OXZZM053TG1ScFoybGpaWEowTG1OdmJUQlANCiMgQmdnckJnRUZCUWN3QW9aRGFIUjBjRG92TDJOaFkyVnlkSE11WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEWlhKMA0KIyBVMGhCTWtGemMzVnlaV1JKUkZScGJXVnpkR0Z0Y0dsdVowTkJMbU55ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DDQojIEFRRUFMb09oUkFWS0JPTzVNbEw2MllId0dydjRDWTBqdVQzWWtxSG1SaHhLTDI1NlBHTnVOeGVqR3I5WUk3SkQNCiMgbkpTRFRqa0pzQ3pveCtIaXpPM0xlV3ZPM2lNQlIrMlZWSUhnZ0hzU3NhOENocWs2YzJyKytKL0JqZEVoak9RcA0KIyBnc09LQzJBQUFwMGZSOFNmdEFwb1UzOWFFS2I0SXViNFU1SXhYOWlDZ3kxdEUwS3VnOEVRVHFRazlFZWMzZzhpDQojIGNuZGNmMC9wT1pnclY1SkUxKzl1azlsRHh3UXpZMUUzVnA1SEJCSERvMWhVSWRqaWpsYlhTVDlYL0FxZkkxNTcNCiMgOUpTTjNaMGF1OTk2S3FiU1JhWlZESS8yVElyeWxzK0pSdHd4c3BHUW8xOHpNR0JWOWZ4ck1LeWg3ZVJIVGpPZQ0KIyBaMm9vdFUzQzdWdVhndmpMcVFoc1V3bTA5ekNDQlRFd2dnUVpvQU1DQVFJQ0VBcWhKZGJXTWh0K1FlUUYyamFYDQojIHdoVXdEUVlKS29aSWh2Y05BUUVMQlFBd1pURUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybEQNCiMgWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEVrTUNJR0ExVUVBeE1iUkdsbg0KIyBhVU5sY25RZ1FYTnpkWEpsWkNCSlJDQlNiMjkwSUVOQk1CNFhEVEUyTURFd056RXlNREF3TUZvWERUTXhNREV3DQojIE56RXlNREF3TUZvd2NqRUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVoNCiMgTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEV4TUM4R0ExVUVBeE1vUkdsbmFVTmxjblFnVTBoQg0KIyBNaUJCYzNOMWNtVmtJRWxFSUZScGJXVnpkR0Z0Y0dsdVp5QkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQojIGdnRVBBRENDQVFvQ2dnRUJBTDNRTXU1THpZOS8zYW02Z3BuRk9WUW9WN1lqU3NRT0IwVXpVUkI5MFBsOVRXaCsNCiMgNTdhZzlJMnppT1NYdjJNaGtKaS9FN3hYMDhQaGZnaldhaFFBT1BjdUhqdnV6S2IyTWxuK1gyVS80SnZyNDBaSA0KIyBCaHBWZmdzbmZzQ2k5YURnM2lJL0R2OStsZnZ6bzdvaVBoaXNFZVR3bVFOdE80VjhDZFB1WGNpYUMxVGpxQWx4DQojIGErRFBJaEFQZGM5eGNrNEtyZDlBT2x5M1VlR2hlUlRHVFNRak1GMjg3RHhnYXF3dkI4ejk4T3BIMlloUVh2MW0NCiMgYmxaaEp5bUpoRkhtZ3VkR1VQMlVLaXluNUhVK3VwZ1BoSCtmTVJUV3JkWHlaTXQ3SGdYUWhCbHlGL0VYQnU4OQ0KIyB6ZFpON3daQy9hSlRLaytGSGNRZFBLL1AycXdROWQyc3JPbFcvNU1DQXdFQUFhT0NBYzR3Z2dIS01CMEdBMVVkDQojIERnUVdCQlQwdHVFZ0hmNHBydExrWWFXeW9pV3l5QmMxYmpBZkJnTlZIU01FR0RBV2dCUkY2Nkt2OUpMTGdqRXQNCiMgVVl1bnB5R2Q4MjNJRHpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lCaGpBVA0KIyBCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RDREI1QmdnckJnRUZCUWNCQVFSdE1Hc3dKQVlJS3dZQkJRVUhNQUdHDQojIEdHaDBkSEE2THk5dlkzTndMbVJwWjJsalpYSjBMbU52YlRCREJnZ3JCZ0VGQlFjd0FvWTNhSFIwY0RvdkwyTmgNCiMgWTJWeWRITXVaR2xuYVdObGNuUXVZMjl0TDBScFoybERaWEowUVhOemRYSmxaRWxFVW05dmRFTkJMbU55ZERDQg0KIyBnUVlEVlIwZkJIb3dlREE2b0RpZ05vWTBhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEDQojIFpYSjBRWE56ZFhKbFpFbEVVbTl2ZEVOQkxtTnliREE2b0RpZ05vWTBhSFIwY0RvdkwyTnliRE11WkdsbmFXTmwNCiMgY25RdVkyOXRMMFJwWjJsRFpYSjBRWE56ZFhKbFpFbEVVbTl2ZEVOQkxtTnliREJRQmdOVkhTQUVTVEJITURnRw0KIyBDbUNHU0FHRy9Xd0FBZ1F3S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0hNNkx5OTNkM2N1WkdsbmFXTmxjblF1DQojIFkyOXRMME5RVXpBTEJnbGdoa2dCaHYxc0J3RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSEdWRXVsUmgxWnANCiMgemUvZDJueXFZM3F6ZU04R04wQ0U3MHVFdjhyUEF3TDl4YWZERGlCQ0xLOTM4eXNmRENGYUtyY0ZOQjFxcnBuNA0KIyBKNkptdndtcVlOOTJwRHFURC9peTBkaDhHV0xvWG9JbEhzUzZISHNzSWVMV1d5d1VOVU1FYUxMYmRRTGdjc2VZDQojIDFqeGs1UjlJRUJoZmlUaGhUV0pHSklkampKRlNMSzhwaWVWNEg5WUxGS1dBMXhKSGNMTjExWk9GazM2MmttZjcNCiMgVTJHSnFQVnJsc0QwV0drTmZNZ0JzYmtvZGJlWlk0VWlqR0hLZVpSK1dmeU1EK052dFFFbXRteWw3b2RSSWVSWQ0KIyBZSnU2REMwcmJhTEVmcnZFSlN0SEFnaDhTYTRUdHVGOFFrSW94aGhXejBFMHRtWmR0blI3OVZZeklpOGlOckpMDQojIG9rcVYyUFdtamxJeGdnSk5NSUlDU1FJQkFUQ0JoakJ5TVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU0NCiMgUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1URXdMd1lEVlFRRA0KIyBFeWhFYVdkcFEyVnlkQ0JUU0VFeUlFRnpjM1Z5WldRZ1NVUWdWR2x0WlhOMFlXMXdhVzVuSUVOQkFoQUV6VCtGDQojIGFLNTJ4aHV3L25GZ3pLZHRNQTBHQ1dDR1NBRmxBd1FDQVFVQW9JR1lNQm9HQ1NxR1NJYjNEUUVKQXpFTkJnc3ENCiMgaGtpRzl3MEJDUkFCQkRBY0Jna3Foa2lHOXcwQkNRVXhEeGNOTWpBd09ERTVNVFl6TnpNNVdqQXJCZ3NxaGtpRw0KIyA5dzBCQ1JBQ0RERWNNQm93R0RBV0JCUURKYjFRWHRxV01DM0NMMCtnSGt3b3ZpZzB4VEF2QmdrcWhraUc5dzBCDQojIENRUXhJZ1FnUWQ0d1hVdmpiRGpCMERCamh5TEd0YVdBN3Q4RTB4VzJXdTZONmdvakZyVXdEUVlKS29aSWh2Y04NCiMgQVFFQkJRQUVnZ0VBbzJkTDVvK1gyZStFUDVIbUxCQXRCNkU0dTdLbTVVcm5ablVRYjlqendvWU9nL3VNTGQ0ZQ0KIyA5em5ROHl1UkNhakFObG9SeHM4VVlOaWdEOGJ3S3lqMExvT3FYRmNPcTYvWEozdXlUQ2VkcmtRU0JEcUZjQXJhDQojIDJOenhkME9WSGV4UXpsZHhPR0xKSlpCT3licURDWGJacE04UTVUVXhXZjdEa1N6WGRjWWtXV3l2NEhTVTJ0NXQNCiMgUU9iYWo1ekp0VVcwekRENVlCbWg4MzQvQ2N0eERUTWtiODMvWHJPOUFWWVpGYmgzZkxpcVI1QXQyN0ZvY0VHNg0KIyBEM29XdmtiYnNJWExYNlFySUJVR0xZNHFRZjRBQzhnVk9wclorZllRMm0rbDZ2UFh2THZ0SGdkaDYvVGFsajUvDQojIGhJMWNpNmJMOU92RGhCNTFMSlRnclJRUEhIU0I4dnR0WGc9PQ0KIyBTSUcgIyBFbmQgc2lnbmF0dXJlIGJsb2NrDQo="}}}