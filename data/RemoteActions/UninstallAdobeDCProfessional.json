{"id": "Uninstall_Adobe_DC_Professional_windows", "name": "Uninstall Adobe DC Professional", "description": "In case Adobe Acrobat Pro DC is installed on the device, this Remote Action will uninstall it and install Adobe Acrobat Reader DC in its place in case the latter is not already installed on the device.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 1200, "inputs": [{"description": "Maximum random delay set to avoid overloading of the Engine. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "GUID of the campaign to prompt the user to uninstall Adobe Acrobat Pro DC", "id": "CampaignId", "name": "CampaignId", "options": ["fc3b24ae-ccc3-4fe0-a4cf-10cbde0b890d"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "GUID of the campaign to notify the user that uninstallation tasks finished", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["6e748652-6981-4311-b017-c12bbe0b61e8"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "GUID of the campaign to notify the user that uninstallation tasks finished and that the system must be restarted", "id": "OperationCompletedRestartCampaignId", "name": "OperationCompletedRestartCampaignId", "options": ["8182bd7f-55d6-4efd-8b9c-97aef1704b5e"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Uninstall-AdobeDCProfessional.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KVW5pbnN0YWxscyBBZG9iZSBBY3JvYmF0IFBybyBEQyBmcm9tIHRhcmdldCBkZXZpY2VzLg0KDQouREVTQ1JJUFRJT04NCkluIGNhc2UgQWRvYmUgQWNyb2JhdCBQcm8gREMgaXMgaW5zdGFsbGVkIG9uIHRoZSBkZXZpY2UsIHRoaXMgUmVtb3RlIEFjdGlvbiB3aWxsIHVuaW5zdGFsbCBpdCBhbmQgaW5zdGFsbCBBZG9iZSBBY3JvYmF0IFJlYWRlciBEQyBpbiBpdHMgcGxhY2UgaW4gY2FzZSB0aGUgbGF0dGVyIGlzIG5vdCBhbHJlYWR5IGluc3RhbGxlZCBvbiB0aGUgZGV2aWNlLg0KDQouRlVOQ1RJT05BTElUWQ0KUmVtZWRpYXRpb24NCg0KLklOUFVUUw0KSUQgIExhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb24NCjEgICBNYXhpbXVtRGVsYXlJblNlY29uZHMgICAgICAgICAgIE1heGltdW0gcmFuZG9tIGRlbGF5IHNldCB0byBhdm9pZCBvdmVybG9hZGluZyBvZiB0aGUgRW5naW5lLiBQcm92aWRlIG51bWJlciBvZiBzZWNvbmRzIGxlc3MgdGhhbiA2MDANCjIgICBDYW1wYWlnbklkICAgICAgICAgICAgICAgICAgICAgIEdVSUQgb2YgdGhlIGNhbXBhaWduIHRvIHByb21wdCB0aGUgdXNlciB0byB1bmluc3RhbGwgQWRvYmUgQWNyb2JhdCBQcm8gREMNCjMgICBPcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbklkICAgIEdVSUQgb2YgdGhlIGNhbXBhaWduIHRvIG5vdGlmeSB0aGUgdXNlciB0aGF0IHVuaW5zdGFsbGF0aW9uIHRhc2tzIGZpbmlzaGVkDQo0ICAgT3BlcmF0aW9uQ29tcGxldGVkUmVzdGFydENhbXBhaWduSWRHVUlEIG9mIHRoZSBjYW1wYWlnbiB0byBub3RpZnkgdGhlIHVzZXIgdGhhdCB1bmluc3RhbGxhdGlvbiB0YXNrcyBmaW5pc2hlZCBhbmQgdGhhdCB0aGUgc3lzdGVtIG11c3QgYmUgcmVzdGFydGVkDQoNCi5GVVJUSEVSIElORk9STUFUSU9ODQpUaHJlZSBjYW1wYWlnbnMgYXJlIGRlbGl2ZXJlZCBhbG9uZyB3aXRoIHRoaXMgUmVtb3RlIEFjdGlvbiI6Ig0KICAgIC0gVW5pbnN0YWxsYXRpb24gcHJvbXB0IjoiIFRvIGFzayB0aGUgdXNlciBmb3IgY29uZmlybWF0aW9uIGFib3V0IHVuaW5zdGFsbGluZyB0aGUgdW51c2VkIHNvZnR3YXJlLCBhbmQgdG8gaW5mb3JtIGFib3V0IHRoZSBhcHBsaWNhdGlvbiBoYXZpbmcgdG8gYmUgY2xvc2VkIHVwb24gY29uZmlybWF0aW9uDQogICAgLSBDb25maXJtYXRpb24iOiIgV2hlbiB1bmluc3RhbGxhdGlvbiB0YXNrcyBmaW5pc2hlZCwgc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSByZWNlbnRseSBpbnN0YWxsZWQgQWRvYmUgQWNyb2JhdCBSZWFkZXIgREMuDQogICAgLSBDb25maXJtYXRpb24gYW5kIFJlc3RhcnQiOiIgV2hlbiB1bmluc3RhbGxhdGlvbiB0YXNrcyBmaW5pc2hlZCBhbmQgYW5kIHRoZSBzeXN0ZW0gbXVzdCBiZSByZXN0YXJ0ZWQuDQoNCi5OT1RFUw0KQ29udGV4dDogICAgICAgICAgICBMb2NhbFN5c3RlbQ0KVmVyc2lvbjogICAgICAgICAgICAxLjAuMC4wIC0gSW5pdGlhbCByZWxlYXNlDQpMYXN0IEdlbmVyYXRlZDogICAgIDA3IEp1biAyMDIxIC0gMTM6Mzg6MDUNCkNvcHlyaWdodCAoQykgMjAyMSBOZXh0aGluayBTQSwgU3dpdHplcmxhbmQNCiM+DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVycyBkZWZpbml0aW9uDQojDQpwYXJhbSgNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRNYXhpbXVtRGVsYXlJblNlY29uZHMsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kQ2FtcGFpZ25JZCwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRPcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbklkLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJE9wZXJhdGlvbkNvbXBsZXRlZFJlc3RhcnRDYW1wYWlnbklkDQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdDQU1QQUlHTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dGNhbXBhaWduYWN0aW9uLmRsbCIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdDTURfRVhFJyBgDQogICAgLVZhbHVlICIkZW52OlN5c3RlbVJvb3RcU3lzdGVtMzJcY21kLmV4ZSIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdFUlJPUl9FWENFUFRJT05fVFlQRScgYA0KICAgIC1WYWx1ZSBAe0Vudmlyb25tZW50ID0gJ1tFbnZpcm9ubWVudCBlcnJvcl0nDQogICAgICAgICAgICAgSW5wdXQgPSAnW0lucHV0IGVycm9yXScNCiAgICAgICAgICAgICBJbnRlcm5hbCA9ICdbSW50ZXJuYWwgZXJyb3JdJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTUFYX1NDUklQVF9ERUxBWV9TRUMnIGANCiAgICAtVmFsdWUgNjAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTkVUV09SS19NQU5BR0VSX0NMU0lEJyBgDQogICAgLVZhbHVlIChbZ3VpZF0ne0RDQjAwQzAxLTU3MEYtNEE5Qi04RDY5LTE5OUZEQkE1NzIzQn0nKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ1JFTU9URV9BQ1RJT05fRExMX1BBVEgnIGANCiAgICAtVmFsdWUgIiRlbnY6TkVYVEhJTktcUmVtb3RlQWN0aW9uc1xueHRyZW1vdGVhY3Rpb25zLmRsbCIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdUTFNfMTInIGANCiAgICAtVmFsdWUgMzA3MiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ1RSVVNURURfUFVCTElDX0NBUycgYA0KICAgIC1WYWx1ZSBAeyc2QUI4N0I1NUFEMDM3QTI0QzA3NDRGRjEwNEMxMENFREEyQjQ4Q0NGQjVGRUIwODY0MEJEQ0Y4NzRDOTIzMUVEJyA9ICdNaWNyb3NvZnQgQ29ycG9yYXRpb24gUm9vdCBDQScNCiAgICAgICAgICAgICAnNzk2NTREOTBDM0E0QTlBQTIyMDI1REJDQzhDMjhGMkVBNThFQkRCMjVFMTU5RERDMjYxMDE0M0JCN0Y3REFENicgPSAnTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAnDQogICAgICAgICAgICAgJzdBRjJEOEZGOUEzRURBQzk5Q0EzQUU3RjhGQjRDQ0FCQjEyMEMxRTI5MkJFMDU2NUE2N0M2RjVCNDE3QTFBRDEnID0gJ0Fkb2JlIEFjcm9iYXQgREMgQWRvYmUgSW5jJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdVTkJMT0NLX0NPTU1BTkQnIGANCiAgICAtVmFsdWUgJy9DIGVjaG8uPiJ7MH0iOlpvbmUuSWRlbnRpZmllcicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0FET0JFX0FDUk9CQVRfRENfU09GVFdBUkVfTkFNRScgYA0KICAgIC1WYWx1ZSAnQWRvYmUgQWNyb2JhdCBEQyUnIGANCiAgICAtT3B0aW9uIENvbnN0YW50IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0FET0JFX0FDUk9CQVRfUkVBREVSX0RDX1NPRlRXQVJFX05BTUUnIGANCiAgICAtVmFsdWUgJ0Fkb2JlIEFjcm9iYXQgUmVhZGVyIERDJScgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQURPQkVfQUNST0JBVF9EQ19DTE9TVVJFX1RJTUVPVVQnIGANCiAgICAtVmFsdWUgNjAwMDAgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQURPQkVfQUNST0JBVF9EQ19DTE9TVVJFX1RJTUVfU1RFUCcgYA0KICAgIC1WYWx1ZSAxMDAgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVU5JTlNUQUxMQVRJT05fU1VDQ0VTU19DT0RFJyBgDQogICAgLVZhbHVlIDAgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVU5JTlNUQUxMQVRJT05fUkVTVEFSVF9DT0RFJyBgDQogICAgLVZhbHVlIDMwMTAgYA0KICAgIC1PcHRpb24gQ29uc3RhbnQgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQURPQkVfQUNST0JBVF9ETExTJyBgDQogICAgLVZhbHVlIEB7eDY0ID0gQCgnQzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxBZG9iZVxBY3JvYmF0IERDXFBERk1ha2VyXE1haWxcT3V0bG9va1x4NjRcUERGTU91dGxvb2tBZGRpbi5kbGwnLA0KICAgICAgICAgICAgICAgICAgICAgJ0M6XFByb2dyYW0gRmlsZXMgKHg4NilcQWRvYmVcQWNyb2JhdCBEQ1xQREZNYWtlclxNYWlsXE91dGxvb2tceDY0XFNlbmRBc0xpbmtBZGRpbi5kbGwnLA0KICAgICAgICAgICAgICAgICAgICAgJ0M6XFByb2dyYW0gRmlsZXMgKHg4NilcQWRvYmVcQWNyb2JhdCBEQ1xQREZNYWtlclxPZmZpY2VceDY0XFBERk1PZmZpY2VBZGRpbi5kbGwnKQ0KICAgICAgICAgICAgeDMyID0gQCgnQzpcUHJvZ3JhbSBGaWxlc1xBZG9iZVxBY3JvYmF0IERDXFBERk1ha2VyXE1haWxcT3V0bG9va1xQREZNT3V0bG9va0FkZGluLmRsbCcsDQogICAgICAgICAgICAgICAgICAgICdDOlxQcm9ncmFtIEZpbGVzXEFkb2JlXEFjcm9iYXQgRENcUERGTWFrZXJcTWFpbFxPdXRsb29rXFNlbmRBc0xpbmtBZGRpbi5kbGwnLA0KICAgICAgICAgICAgICAgICAgICAnQzpcUHJvZ3JhbSBGaWxlc1xBZG9iZVxBY3JvYmF0IERDXFBERk1ha2VyXE9mZmljZVxQREZNT2ZmaWNlQWRkaW4uZGxsJyl9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0FDUk9CQVRfVU5SRUdJU1RFUl9ETExfQVBQJyBgDQogICAgLVZhbHVlICdyZWdzdnIzMicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQUNST0JBVF9VTklOU1RBTExFUl9QQVRIJyBgDQogICAgLVZhbHVlICdjOlx3aW5kb3dzXHN5c3RlbTMyXE1zaUV4ZWMuZXhlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdBQ1JPQkFUX1JFQURFUl9ET1dOTE9BRF9VUkwnIGANCiAgICAtVmFsdWUgJ2h0dHBzOi8vYXJkb3dubG9hZDIuYWRvYmUuY29tL3B1Yi9hZG9iZS9yZWFkZXIvd2luL0Fjcm9iYXREQy8yMTAwMTIwMTQ1L0Fjcm9SZHJEQzIxMDAxMjAxNDVfZW5fVVMuZXhlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdBQ1JPQkFUX1JFQURFUl9GSUxFX0hBU0gnIGANCiAgICAtVmFsdWUgJ0YxRTVDQkJBQ0U2OUVEQkEyM0U3QTI1NTdCOUJFNTlEOTE2QUYwNkFEMjdEOTk1MjZFNkZGMzU2NDI5RkY0RjInIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0FDUk9CQVRfUkVBREVSX1RIVU1CUFJJTlQnIGANCiAgICAtVmFsdWUgJzVEQTZBRDM5RkM1MjREMEQyQkVDNjc0MURGREJGNjdERjVBRjNFQ0EnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0lOU1RBTExFUl9BUkdTJyBgDQogICAgLVZhbHVlIEAoJy9zQWxsJywgJy9ycycsICcvbXNpJywgJ0VVTEFfQUNDRVBUPVlFUycpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1RMU18xMicgYA0KICAgIC1WYWx1ZSAzMDcyIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVU5JTlNUQUxMQVRJT05fREVOSUFMX1JFQVNPTlMnIGANCiAgICAtVmFsdWUgQHtOZWVkUHJvZHVjdHMgPSAnVGhlIHVzZXIgd2lsbCBuZWVkIHRoZSBBZG9iZSBBY3JvYmF0IERDIHByb2R1Y3QgaW4gdGhlIHNob3J0IHRlcm0nDQogICAgICAgICAgICAgQnVzeU5vdyA9ICdUaGUgdXNlciBpcyBidXN5IG5vdyBhbmQgZG9lcyBub3Qgd2FudCB0aGUgQWRvYmUgQWNvYmF0IERDIGFwcGxpY2F0aW9uIHRvIGJlIGNsb3NlZCcNCiAgICAgICAgICAgICBPdGhlciA9ICdUaGUgdXNlciBkaWQgbm90IHNwZWNpZnkgYW55IHBhcnRpY3VsYXIgcmVhc29uJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KIw0KIyBJbnZva2UgTWFpbg0KIw0KZnVuY3Rpb24gSW52b2tlLU1haW4gKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRleGl0Q29kZSA9IDANCg0KICAgIHRyeSB7DQogICAgICAgIEFkZC1OZXh0aGlua0RMTHMNCg0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtDQogICAgICAgIFRlc3QtUnVubmluZ09uV2luZG93czEwDQoNCiAgICAgICAgVGVzdC1JbnB1dFBhcmFtZXRlcnMgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzDQoNCiAgICAgICAgVW5pbnN0YWxsLUFkb2JlQWNyb2JhdERDIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCiMNCiMgVGVtcGxhdGUgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBBZGQtTmV4dGhpbmtETExzIHsNCg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgpKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgTmV4dGhpbmsgUmVtb3RlIEFjdGlvbiBETEwgbm90IGZvdW5kLiAiDQogICAgfQ0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJENBTVBBSUdOX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIE5leHRoaW5rIENhbXBhaWduIERMTCBub3QgZm91bmQuICINCiAgICB9DQogICAgQWRkLVR5cGUgLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgNCiAgICBBZGQtVHlwZSAtUGF0aCAkQ0FNUEFJR05fRExMX1BBVEgNCn0NCg0KZnVuY3Rpb24gVGVzdC1SdW5uaW5nQXNMb2NhbFN5c3RlbSB7DQoNCiAgICBpZiAoLW5vdCAoQ29uZmlybS1DdXJyZW50VXNlcklzTG9jYWxTeXN0ZW0pKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgbXVzdCBiZSBydW4gYXMgTG9jYWxTeXN0ZW0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtIHsNCg0KICAgICRjdXJyZW50SWRlbnRpdHkgPSBHZXQtQ3VycmVudElkZW50aXR5DQogICAgcmV0dXJuICRjdXJyZW50SWRlbnRpdHkgLWVxICRMT0NBTF9TWVNURU1fSURFTlRJVFkNCn0NCg0KZnVuY3Rpb24gR2V0LUN1cnJlbnRJZGVudGl0eSB7DQoNCiAgICByZXR1cm4gW3NlY3VyaXR5LnByaW5jaXBhbC53aW5kb3dzaWRlbnRpdHldOjpHZXRDdXJyZW50KCkuVXNlci5Ub1N0cmluZygpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUnVubmluZ09uV2luZG93czEwIHsNCg0KICAgICRPU1ZlcnNpb24gPSAoR2V0LU9TVmVyc2lvbikgLWFzIFt2ZXJzaW9uXQ0KICAgIGlmICgtbm90ICgkT1NWZXJzaW9uKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoaXMgc2NyaXB0IGNvdWxkIG5vdCByZXR1cm4gT1MgdmVyc2lvbi4gIg0KICAgIH0NCiAgICBpZiAoJE9TVmVyc2lvbi5NYWpvciAtbmUgMTApIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyAxMCBvbmx5LiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCg0KICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgIC1GaWx0ZXIgJ1Byb2R1Y3RUeXBlID0gMScgLUVycm9yQWN0aW9uIFN0b3AgfCBgDQogICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBWZXJzaW9uDQp9DQoNCmZ1bmN0aW9uIFdyaXRlLVN0YXR1c01lc3NhZ2UgKFtwc29iamVjdF0kTWVzc2FnZSkgew0KICAgICRleGNlcHRpb25NZXNzYWdlID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJHZlcnNpb24gPSBHZXQtU2NyaXB0VmVyc2lvbg0KICAgICAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICRzY3JpcHRWZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlTGluZSA9ICRzY3JpcHRWZXJzaW9uICsgIkxpbmUgJyQoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlciknOiAiDQogICAgfQ0KDQogICAgJGhvc3QudWkuV3JpdGVFcnJvckxpbmUoJGVycm9yTWVzc2FnZUxpbmUgKyAkZXhjZXB0aW9uTWVzc2FnZSkNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KDQogICAgJHNjcmlwdENvbnRlbnQgPSBHZXQtQ29udGVudCAkTXlJbnZvY2F0aW9uLlNjcmlwdE5hbWUgfCBPdXQtU3RyaW5nDQogICAgaWYgKCRzY3JpcHRDb250ZW50IC1ub3RtYXRjaCAnPCNbXHJcbl17Mn0uU1lOT1BTSVNbXlwjXD5dKiguTk9URVNbXlwjXD5dKilcIz4nKSB7IHJldHVybiB9DQoNCiAgICAkaGVscEJsb2NrID0gJE1hdGNoZXNbMV0uU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkNCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRoZWxwQmxvY2spIHsNCiAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCAnVmVyc2lvbjonKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpbmUuU3BsaXQoJzonKVsxXS5TcGxpdCgnLScpWzBdLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSwgW2ludF0kTG93ZXJMaW1pdCwgW2ludF0kVXBwZXJMaW1pdCkgew0KICAgIFRlc3QtUGFyYW1Jc0ludGVnZXIgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIC1QYXJhbVZhbHVlICRQYXJhbVZhbHVlDQogICAgJGludFZhbHVlID0gJFBhcmFtVmFsdWUgLWFzIFtpbnRdDQogICAgaWYgKCRpbnRWYWx1ZSAtbHQgJExvd2VyTGltaXQgLW9yICRpbnRWYWx1ZSAtZ3QgJFVwcGVyTGltaXQpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBtdXN0IGJlIGJldHdlZW4gWyRMb3dlckxpbWl0LCAkVXBwZXJMaW1pdF0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1Jc0ludGVnZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yICRudWxsIC1lcSAkaW50VmFsdWUpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAnJFBhcmFtVmFsdWUnIGlzIG5vdCBhbiBpbnRlZ2VyLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUdVSURQYXJhbWV0ZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmICgtbm90ICgkUGFyYW1WYWx1ZSAtYXMgW2d1aWRdKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIEVycm9yIGluIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuIE9ubHkgVUlEIHZhbHVlcyBhcmUgYWNjZXB0ZWQuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEluaXRpYWxpemUtSW5zdGFsbGVyU3BlY3MgKFtzdHJpbmddJENlcnRpZmljYXRlVGh1bWJwcmludCwgW3N0cmluZ10kSW5zdGFsbGVyQXJncywgW3N0cmluZ10kRG93bmxvYWRVUkx4ODYsIFtzdHJpbmddJERvd25sb2FkVVJMeDY0LCBbc3RyaW5nXSRGaWxlSGFzaHg4NiwgW3N0cmluZ10kRmlsZUhhc2h4NjQpIHsNCiAgICByZXR1cm4gQHtDZXJ0aWZpY2F0ZVRodW1icHJpbnQgPSAkQ2VydGlmaWNhdGVUaHVtYnByaW50DQogICAgICAgICAgICAgSW5zdGFsbGVyQXJncyA9ICRJbnN0YWxsZXJBcmdzDQogICAgICAgICAgICAgRG93bmxvYWRVUkx4ODYgPSAkRG93bmxvYWRVUkx4ODYNCiAgICAgICAgICAgICBEb3dubG9hZFVSTHg2NCA9ICREb3dubG9hZFVSTHg2NA0KICAgICAgICAgICAgIEZpbGVIYXNoeDg2ID0gJEZpbGVIYXNoeDg2DQogICAgICAgICAgICAgRmlsZUhhc2h4NjQgPSAkRmlsZUhhc2h4NjR9DQp9DQoNCmZ1bmN0aW9uIEluaXRpYWxpemUtSW5zdGFsbGVySW5mb3JtYXRpb24gKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycywgW2hhc2h0YWJsZV0kSW5zdGFsbGVyU3BlY3MpIHsNCiAgICAkbG9jYWxGb2xkZXIgPSBHZXQtVGVtcG9yYXJ5Rm9sZGVyUGF0aA0KDQogICAgcmV0dXJuIEB7SW5zdGFsbGVyVXJsID0gR2V0LURvd25sb2FkVXJsQnlBcmNoaXRlY3R1cmUgLUluc3RhbGxlclNwZWNzICRJbnN0YWxsZXJTcGVjcw0KICAgICAgICAgICAgIEZvbGRlciA9ICRsb2NhbEZvbGRlcg0KICAgICAgICAgICAgIFBhdGggPSAiJGxvY2FsRm9sZGVyXGluc3RhbGxlci5leGUiDQogICAgICAgICAgICAgVGh1bWJwcmludCA9ICRJbnN0YWxsZXJTcGVjcy5DZXJ0aWZpY2F0ZVRodW1icHJpbnQNCiAgICAgICAgICAgICBIYXNoID0gR2V0LUluc3RhbGxlckhhc2hCeUFyY2hpdGVjdHVyZSAtSW5zdGFsbGVyU3BlY3MgJEluc3RhbGxlclNwZWNzDQogICAgICAgICAgICAgSW5zdGFsbGF0aW9uRGVsYXkgPSBbaW50XTo6UGFyc2UoJElucHV0UGFyYW1ldGVycy5NYXhpbXVtRGVsYXlJblNlY29uZHMpDQogICAgICAgICAgICAgSW5zdGFsbGF0aW9uQXJndW1lbnRzID0gJEluc3RhbGxlclNwZWNzLkluc3RhbGxlckFyZ3MNCiAgICAgICAgICAgICBDYW1wYWlnbklkID0gJElucHV0UGFyYW1ldGVycy5DYW1wYWlnbklkDQogICAgICAgICAgICAgT3BlcmF0aW9uQ29tcGxldGVkQ2FtcGFpZ25JZCA9ICRJbnB1dFBhcmFtZXRlcnMuT3BlcmF0aW9uQ29tcGxldGVkQ2FtcGFpZ25JZH0NCn0NCg0KZnVuY3Rpb24gR2V0LVRlbXBvcmFyeUZvbGRlclBhdGggew0KDQogICAgJHJhbmRvbVZhbHVlID0gR2V0LVJhbmRvbUFscGhhTnVtZXJpY1N0cmluZw0KICAgIGlmIChDb25maXJtLUN1cnJlbnRVc2VySXNMb2NhbFN5c3RlbSkgew0KICAgICAgICByZXR1cm4gKEpvaW4tUGF0aCAtUGF0aCAiJGVudjpTWVNURU1ST09UXE5leHRoaW5rIiAtQ2hpbGRQYXRoICRyYW5kb21WYWx1ZSkNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gKEpvaW4tUGF0aCAtUGF0aCAkZW52OlRFTVAgLUNoaWxkUGF0aCAkcmFuZG9tVmFsdWUpDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUmFuZG9tQWxwaGFOdW1lcmljU3RyaW5nIHsNCg0KICAgIHJldHVybiBbZ3VpZF06Ok5ld0d1aWQoKS50b1N0cmluZygnTicpDQp9DQoNCmZ1bmN0aW9uIEdldC1Eb3dubG9hZFVybEJ5QXJjaGl0ZWN0dXJlIChbaGFzaHRhYmxlXSRJbnN0YWxsZXJTcGVjcykgew0KICAgIHJldHVybiAkKGlmIChUZXN0LTY0Qml0c0FyY2hpdGVjdHVyZSkgeyAkSW5zdGFsbGVyU3BlY3MuRG93bmxvYWRVUkx4NjQgfQ0KICAgICAgICAgICAgIGVsc2UgeyAkSW5zdGFsbGVyU3BlY3MuRG93bmxvYWRVUkx4ODYgfSkNCn0NCg0KZnVuY3Rpb24gVGVzdC02NEJpdHNBcmNoaXRlY3R1cmUgew0KDQogICAgcmV0dXJuIChHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAtRXJyb3JBY3Rpb24gU3RvcCB8IGANCiAgICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgT1NBcmNoaXRlY3R1cmUpIC1tYXRjaCAnNjQnDQp9DQoNCmZ1bmN0aW9uIEdldC1JbnN0YWxsZXJIYXNoQnlBcmNoaXRlY3R1cmUgKFtoYXNodGFibGVdJEluc3RhbGxlclNwZWNzKSB7DQogICAgcmV0dXJuICQoaWYgKFRlc3QtNjRCaXRzQXJjaGl0ZWN0dXJlKSB7ICRJbnN0YWxsZXJTcGVjcy5GaWxlSGFzaHg2NCB9DQogICAgICAgICAgICAgZWxzZSB7ICRJbnN0YWxsZXJTcGVjcy5GaWxlSGFzaHg4NiB9KQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ2FtcGFpZ25SZXNwb25zZSAoW3N0cmluZ10kQ2FtcGFpZ25JZCkgew0KICAgIHJldHVybiBbbnh0LmNhbXBhaWduYWN0aW9uXTo6UnVuQ2FtcGFpZ24oJENhbXBhaWduSWQpDQp9DQoNCmZ1bmN0aW9uIEdldC1DYW1wYWlnblJlc3BvbnNlU3RhdHVzICgkUmVzcG9uc2UpIHsNCiAgICByZXR1cm4gW254dC5jYW1wYWlnbmFjdGlvbl06OkdldFJlc3BvbnNlU3RhdHVzKCRSZXNwb25zZSkNCn0NCg0KZnVuY3Rpb24gR2V0LUNhbXBhaWduUmVzcG9uc2VBbnN3ZXIgKCRSZXNwb25zZSwgW3N0cmluZ10kUXVlc3Rpb25OYW1lKSB7DQogICAgcmV0dXJuIFtueHQuY2FtcGFpZ25hY3Rpb25dOjpHZXRSZXNwb25zZUFuc3dlcigkUmVzcG9uc2UsICRRdWVzdGlvbk5hbWUpWzBdDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1PcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbiAoW3N0cmluZ10kQ2FtcGFpZ25JZCkgew0KICAgIFtueHQuY2FtcGFpZ25hY3Rpb25dOjpSdW5TdGFuZEFsb25lQ2FtcGFpZ24oJENhbXBhaWduSWQpDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1Qcm9jZXNzIChbc3RyaW5nXSRGaWxlUGF0aCwgW3N0cmluZ10kQXJndW1lbnRzKSB7DQogICAgJG91dHB1dCA9IEB7RXhpdENvZGUgPSAtMQ0KICAgICAgICAgICAgICAgIFN0ZE91dCA9ICRudWxsDQogICAgICAgICAgICAgICAgU3RkRXJyID0gJG51bGx9DQogICAgJHByb2Nlc3NJbmZvID0gTmV3LW9iamVjdCAtVHlwZU5hbWUgZGlhZ25vc3RpY3MucHJvY2Vzc3N0YXJ0aW5mbw0KICAgICRwcm9jZXNzSW5mby5DcmVhdGVOb1dpbmRvdyA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLlVzZVNoZWxsRXhlY3V0ZSA9ICRmYWxzZQ0KICAgICRwcm9jZXNzSW5mby5SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ID0gJHRydWUNCiAgICAkcHJvY2Vzc0luZm8uUmVkaXJlY3RTdGFuZGFyZEVycm9yID0gJHRydWUNCiAgICAkcHJvY2Vzc0luZm8uRmlsZU5hbWUgPSAkRmlsZVBhdGgNCiAgICAkcHJvY2Vzc0luZm8uQXJndW1lbnRzID0gJEFyZ3VtZW50cw0KICAgICRwcm9jZXNzSW5mby5Xb3JraW5nRGlyZWN0b3J5ID0gU3BsaXQtUGF0aCAkRmlsZVBhdGggLVBhcmVudA0KICAgICRwcm9jZXNzID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgZGlhZ25vc3RpY3MucHJvY2Vzcw0KICAgICRwcm9jZXNzLlN0YXJ0SW5mbyA9ICRwcm9jZXNzSW5mbw0KDQogICAgdHJ5IHsNCiAgICAgICAgW3ZvaWRdJHByb2Nlc3MuU3RhcnQoKQ0KICAgICAgICAkb3V0cHV0LlN0ZE91dCA9ICRwcm9jZXNzLlN0YW5kYXJkT3V0cHV0LlJlYWRUb0VuZCgpDQogICAgICAgICRvdXRwdXQuU3RkRXJyID0gJHByb2Nlc3MuU3RhbmRhcmRFcnJvci5SZWFkVG9FbmQoKQ0KICAgICAgICAkcHJvY2Vzcy5XYWl0Rm9yRXhpdCgpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgJyRGaWxlUGF0aCcgZXhlY3V0aW9uIGZhaWxlZC4gIg0KICAgIH0gZmluYWxseSB7DQogICAgICAgICRvdXRwdXQuRXhpdENvZGUgPSAkcHJvY2Vzcy5FeGl0Q29kZQ0KICAgICAgICAkcHJvY2Vzcy5EaXNwb3NlKCkNCiAgICB9DQoNCiAgICByZXR1cm4gJG91dHB1dA0KfQ0KDQpmdW5jdGlvbiBJbnZva2UtSW5zdGFsbGF0aW9uIChbaGFzaHRhYmxlXSRJbnN0YWxsZXJJbmZvKSB7DQogICAgdHJ5IHsNCiAgICAgICAgV2FpdC1SYW5kb21UaW1lIC1NYXhpbXVtRGVsYXlJblNlY29uZHMgJEluc3RhbGxlckluZm8uSW5zdGFsbGF0aW9uRGVsYXkNCiAgICAgICAgSW52b2tlLUluc3RhbGxlckRvd25sb2FkIC1JbnN0YWxsZXJJbmZvICRJbnN0YWxsZXJJbmZvDQogICAgICAgIFRlc3QtRmlsZUludGVncml0eSAtRmlsZUluZm8gJEluc3RhbGxlckluZm8NCiAgICAgICAgVW5ibG9jay1JbnN0YWxsZXIgLVBhdGggJEluc3RhbGxlckluZm8uUGF0aA0KICAgICAgICBJbnN0YWxsLUFwcGxpY2F0aW9uIC1QYXRoICRJbnN0YWxsZXJJbmZvLlBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Bcmd1bWVudHMgJEluc3RhbGxlckluZm8uSW5zdGFsbGF0aW9uQXJndW1lbnRzDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgUmVtb3ZlLUZpbGUgLVBhdGggJEluc3RhbGxlckluZm8uRm9sZGVyDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBXYWl0LVJhbmRvbVRpbWUgKFtpbnRdJE1heGltdW1EZWxheUluU2Vjb25kcykgew0KICAgIGlmICgkTWF4aW11bURlbGF5SW5TZWNvbmRzIC1ndCAwKSB7DQogICAgICAgICRzZWNvbmRzID0gR2V0LVJhbmRvbSAtTWluaW11bSAwIC1NYXhpbXVtICRNYXhpbXVtRGVsYXlJblNlY29uZHMNCiAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJHNlY29uZHMNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEludm9rZS1JbnN0YWxsZXJEb3dubG9hZCAoW2hhc2h0YWJsZV0kSW5zdGFsbGVySW5mbykgew0KICAgIFRlc3QtSW50ZXJuZXRDb25uZWN0aXZpdHkNCiAgICBOZXctSW5zdGFsbGVyRm9sZGVyIC1QYXRoICRJbnN0YWxsZXJJbmZvLkZvbGRlcg0KICAgIFNldC1JbnN0YWxsZXJGb2xkZXJBY2Nlc3NSdWxlcyAtUGF0aCAkSW5zdGFsbGVySW5mby5Gb2xkZXINCiAgICBHZXQtSW5zdGFsbGVyRmlsZUZyb21JbnRlcm5ldCAtVXJsICRJbnN0YWxsZXJJbmZvLkluc3RhbGxlclVybCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVBhdGggJEluc3RhbGxlckluZm8uUGF0aA0KfQ0KDQpmdW5jdGlvbiBUZXN0LUludGVybmV0Q29ubmVjdGl2aXR5IHsNCg0KICAgICR0eXBlID0gW3R5cGVdOjpHZXRUeXBlRnJvbUNMU0lEKCRORVRXT1JLX01BTkFHRVJfQ0xTSUQpDQogICAgJGluc3RhbmNlID0gW2FjdGl2YXRvcl06OkNyZWF0ZUluc3RhbmNlKCR0eXBlKQ0KDQogICAgaWYgKC1ub3QgJGluc3RhbmNlLklzQ29ubmVjdGVkVG9JbnRlcm5ldCkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIE5vIEludGVybmV0IGNvbm5lY3Rpb24gYXZhaWxhYmxlLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBOZXctSW5zdGFsbGVyRm9sZGVyIChbc3RyaW5nXSRQYXRoKSB7DQogICAgUmVtb3ZlLUZpbGUgLVBhdGggJFBhdGgNCiAgICBbdm9pZF0oTmV3LUl0ZW0gLVBhdGggJFBhdGggLUl0ZW1UeXBlICdEaXJlY3RvcnknKQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtRmlsZSAoW3N0cmluZ10kUGF0aCkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGF0aCkgLW9yIGANCiAgICAgICAgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCkpKSB7IHJldHVybiB9DQoNCiAgICBSZW1vdmUtSXRlbSAtUGF0aCAkUGF0aCAtUmVjdXJzZSAtRm9yY2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCn0NCg0KZnVuY3Rpb24gU2V0LUluc3RhbGxlckZvbGRlckFjY2Vzc1J1bGVzIChbc3RyaW5nXSRQYXRoKSB7DQogICAgW3NlY3VyaXR5LmFjY2Vzc2NvbnRyb2wuZmlsZXN5c3RlbXNlY3VyaXR5XSRhY2wgPSBHZXQtQWNsIC1QYXRoICRQYXRoDQogICAgRGlzYWJsZS1Jbmhlcml0YW5jZSAtQWNsICRhY2wNCiAgICBSZW1vdmUtQWNjZXNzRm9yT3RoZXJVc2VycyAtQWNsICRhY2wNCiAgICBTZXQtRnVsbENvbnRyb2xGb3JVc2VyIC1BY2wgJGFjbCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAtVXNlck5hbWUgKFtzZWN1cml0eS5wcmluY2lwYWwud2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpLk5hbWUpDQogICAgU2V0LUZ1bGxDb250cm9sRm9yVXNlciAtQWNsICRhY2wgLVVzZXJOYW1lICdTWVNURU0nDQogICAgU2V0LUZvbGRlckFjbCAtQWNsICRhY2wgLVBhdGggJFBhdGgNCn0NCg0KZnVuY3Rpb24gRGlzYWJsZS1Jbmhlcml0YW5jZSAoW3NlY3VyaXR5LmFjY2Vzc2NvbnRyb2wuZmlsZXN5c3RlbXNlY3VyaXR5XSRBY2wpIHsNCiAgICBbdm9pZF0oJEFjbC5TZXRBY2Nlc3NSdWxlUHJvdGVjdGlvbigkdHJ1ZSwgJGZhbHNlKSkNCn0NCg0KZnVuY3Rpb24gUmVtb3ZlLUFjY2Vzc0Zvck90aGVyVXNlcnMgKFtzZWN1cml0eS5hY2Nlc3Njb250cm9sLmZpbGVzeXN0ZW1zZWN1cml0eV0kQWNsKSB7DQogICAgZm9yZWFjaCgkYWNjZXNzIGluICRBY2wuQWNjZXNzKSB7DQogICAgICAgIFt2b2lkXSgkQWNsLlJlbW92ZUFjY2Vzc1J1bGUoJGFjY2VzcykpDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBTZXQtRnVsbENvbnRyb2xGb3JVc2VyIChbc2VjdXJpdHkuYWNjZXNzY29udHJvbC5maWxlc3lzdGVtc2VjdXJpdHldJEFjbCwgW3N0cmluZ10kVXNlck5hbWUpIHsNCiAgICAkYXJndW1lbnRzID0gQCgkVXNlck5hbWUsICdGdWxsQ29udHJvbCcsICdDb250YWluZXJJbmhlcml0LCBPYmplY3RJbmhlcml0JywgJ05vbmUnLCAnQWxsb3cnKQ0KICAgICRhY2Nlc3NSdWxlID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgc2VjdXJpdHkuYWNjZXNzY29udHJvbC5maWxlc3lzdGVtYWNjZXNzcnVsZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cw0KICAgIFt2b2lkXSgkQWNsLlNldEFjY2Vzc1J1bGUoJGFjY2Vzc1J1bGUpKQ0KfQ0KDQpmdW5jdGlvbiBTZXQtRm9sZGVyQWNsIChbc3RyaW5nXSRQYXRoLCBbc2VjdXJpdHkuYWNjZXNzY29udHJvbC5maWxlc3lzdGVtc2VjdXJpdHldJEFjbCkgew0KICAgIFNldC1BY2wgLVBhdGggJFBhdGggLUFjbE9iamVjdCAkQWNsDQp9DQoNCmZ1bmN0aW9uIEdldC1JbnN0YWxsZXJGaWxlRnJvbUludGVybmV0IChbc3RyaW5nXSRVcmwsIFtzdHJpbmddJFBhdGgpIHsNCiAgICB0cnkgew0KICAgICAgICAkd2ViQ2xpZW50ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgJ25ldC53ZWJjbGllbnQnDQogICAgICAgICR3ZWJDbGllbnQuRG93bmxvYWRGaWxlKCRVcmwsICRQYXRoKQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpIEltcG9zc2libGUgdG8gZG93bmxvYWQgaW5zdGFsbGVyIGZyb20gJyRVcmwnLiAiDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgaWYgKCRudWxsIC1uZSAkd2ViQ2xpZW50KSB7ICR3ZWJDbGllbnQuRGlzcG9zZSgpIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtRmlsZUludGVncml0eSAoW2hhc2h0YWJsZV0kRmlsZUluZm8pIHsNCiAgICBUZXN0LUZpbGVQYXRoIC1QYXRoICRGaWxlSW5mby5QYXRoDQoNCiAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkRmlsZUluZm8uSGFzaCkpIHsNCiAgICAgICAgVGVzdC1GaWxlSGFzaCAtUGF0aCAkRmlsZUluZm8uUGF0aCAtRXhwZWN0ZWRIYXNoICRGaWxlSW5mby5IYXNoDQogICAgfQ0KDQogICAgaWYgKC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJEZpbGVJbmZvLlRodW1icHJpbnQpKSB7DQogICAgICAgIFRlc3QtRmlsZVRodW1icHJpbnQgLVBhdGggJEZpbGVJbmZvLlBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FeHBlY3RlZFRodW1icHJpbnQgJEZpbGVJbmZvLlRodW1icHJpbnQNCiAgICB9DQoNCiAgICBUZXN0LUZpbGVTaWduYXR1cmVSb290Q0EgLVBhdGggJEZpbGVJbmZvLlBhdGgNCn0NCg0KZnVuY3Rpb24gVGVzdC1GaWxlUGF0aCAoW3N0cmluZ10kUGF0aCkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGF0aCkgLW9yIGANCiAgICAgICAgLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRQYXRoIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIEZpbGUgJyRQYXRoJyBpcyBub3QgZm91bmQgb3IgYWNjZXNzIGRlbmllZC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1GaWxlSGFzaCAoW3N0cmluZ10kUGF0aCwgW3N0cmluZ10kRXhwZWN0ZWRIYXNoKSB7DQogICAgJGZpbGVIYXNoID0gR2V0LUhhc2ggLVBhdGggJFBhdGgNCiAgICBpZiAoJGZpbGVIYXNoIC1uZSAkRXhwZWN0ZWRIYXNoKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgRmlsZSAnJFBhdGgnIFNIQS0yNTYgaGFzaCAnJGZpbGVIYXNoJyBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBoYXNoICckRXhwZWN0ZWRIYXNoJy4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUhhc2ggKFtzdHJpbmddJFBhdGgpIHsNCiAgICB0cnkgew0KICAgICAgICAkaGFzaGVyID0gW3NlY3VyaXR5LmNyeXB0b2dyYXBoeS5oYXNoYWxnb3JpdGhtXTo6Q3JlYXRlKCdTSEEyNTYnKQ0KICAgICAgICAkZmlsZSA9IFtpby5maWxlXTo6T3BlblJlYWQoJFBhdGgpDQogICAgICAgICRjb21wdXRlZEhhc2ggPSAkaGFzaGVyLkNvbXB1dGVIYXNoKCRmaWxlKQ0KDQogICAgICAgIHJldHVybiBbYml0Y29udmVydGVyXTo6VG9TdHJpbmcoJGNvbXB1dGVkSGFzaCkgLXJlcGxhY2UgJy0nLCAnJw0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpIEVycm9yIGNhbGN1bGF0aW5nIGhhc2ggb2YgdGhlIGZpbGUgJyRQYXRoJy4gIg0KICAgIH0gZmluYWxseSB7DQogICAgICAgIGlmICgkbnVsbCAtbmUgJGZpbGUpIHsgJGZpbGUuRGlzcG9zZSgpIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtRmlsZVRodW1icHJpbnQgKFtzdHJpbmddJFBhdGgsIFtzdHJpbmddJEV4cGVjdGVkVGh1bWJwcmludCkgew0KICAgICRmaWxlU2lnbmF0dXJlID0gR2V0LUZpbGVTaWduYXR1cmUgLVBhdGggJFBhdGgNCiAgICBUZXN0LVNpZ25hdHVyZVN0YXR1cyAtU3RhdHVzICRmaWxlU2lnbmF0dXJlLlN0YXR1cw0KICAgIFRlc3QtRmlsZVNpZ25hdHVyZVRodW1icHJpbnQgLVRodW1icHJpbnQgJGZpbGVTaWduYXR1cmUuU2lnbmVyQ2VydGlmaWNhdGUuVGh1bWJwcmludCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRXhwZWN0ZWRUaHVtYnByaW50ICRFeHBlY3RlZFRodW1icHJpbnQNCn0NCg0KZnVuY3Rpb24gR2V0LUZpbGVTaWduYXR1cmUgKFtzdHJpbmddJFBhdGgpIHsNCiAgICB0cnkgew0KICAgICAgICByZXR1cm4gR2V0LUF1dGhlbnRpY29kZVNpZ25hdHVyZSAtRmlsZVBhdGggJFBhdGggLUVycm9yQWN0aW9uIFN0b3ANCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBVbmFibGUgdG8gcmV0cmlldmUgZmlsZSAnJFBhdGgnIHNpZ25hdHVyZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1TaWduYXR1cmVTdGF0dXMgKFttYW5hZ2VtZW50LmF1dG9tYXRpb24uc2lnbmF0dXJlc3RhdHVzXSRTdGF0dXMpIHsNCiAgICBpZiAoJFN0YXR1cyAtZXEgW21hbmFnZW1lbnQuYXV0b21hdGlvbi5zaWduYXR1cmVzdGF0dXNdOjpWYWxpZCkgeyByZXR1cm4gfQ0KDQogICAgc3dpdGNoICgkU3RhdHVzKSB7DQogICAgICAgIChbbWFuYWdlbWVudC5hdXRvbWF0aW9uLnNpZ25hdHVyZXN0YXR1c106OlVua25vd25FcnJvcikgeyAkbWVzc2FnZSA9ICdGaWxlIGhhcyBhbiBpbnZhbGlkIHNpZ25hdHVyZS4gJyB9DQogICAgICAgIChbbWFuYWdlbWVudC5hdXRvbWF0aW9uLnNpZ25hdHVyZXN0YXR1c106Ok5vdFNpZ25lZCkgeyAkbWVzc2FnZSA9ICdGaWxlIGlzIG5vdCBzaWduZWQuICcgfQ0KICAgICAgICAoW21hbmFnZW1lbnQuYXV0b21hdGlvbi5zaWduYXR1cmVzdGF0dXNdOjpIYXNoTWlzbWF0Y2gpIHsgJG1lc3NhZ2UgPSAnRmlsZSBoYXNoIGRvZXMgbm90IG1hdGNoIHdpdGggdGhlIG9uZSBzdG9yZWQgaW4gdGhlIHNpZ25hdHVyZS4gJyB9DQogICAgICAgIChbbWFuYWdlbWVudC5hdXRvbWF0aW9uLnNpZ25hdHVyZXN0YXR1c106Ok5vdFRydXN0ZWQpIHsgJG1lc3NhZ2UgPSAnRmlsZSBzaWduYXR1cmUgaXMgbm90IHRydXN0ZWQuICcgfQ0KICAgICAgICAoW21hbmFnZW1lbnQuYXV0b21hdGlvbi5zaWduYXR1cmVzdGF0dXNdOjpOb3RTdXBwb3J0ZWRGaWxlRm9ybWF0KSB7ICRtZXNzYWdlID0gJ0ZpbGUgZG9lcyBub3QgaGF2ZSBzdXBwb3J0ZWQgZm9ybWF0IGZvciBzaWduaW5nIG9wZXJhdGlvbnMuICcgfQ0KICAgICAgICAoW21hbmFnZW1lbnQuYXV0b21hdGlvbi5zaWduYXR1cmVzdGF0dXNdOjpJbmNvbXBhdGlibGUpIHsgJG1lc3NhZ2UgPSAnRmlsZSBzaWduYXR1cmUgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgc3lzdGVtLiAnIH0NCiAgICAgICAgZGVmYXVsdCB7ICRtZXNzYWdlID0gIkZpbGUgc2lnbmF0dXJlIGhhcyB1bmtub3duIHN0YXR1cyAnJFN0YXR1cycuICIgfQ0KICAgIH0NCiAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkbWVzc2FnZSkpIHsgdGhyb3cgJG1lc3NhZ2UgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUZpbGVTaWduYXR1cmVUaHVtYnByaW50IChbc3RyaW5nXSRUaHVtYnByaW50LCBbc3RyaW5nXSRFeHBlY3RlZFRodW1icHJpbnQpIHsNCiAgICBpZiAoJFRodW1icHJpbnQgLW5lICRFeHBlY3RlZFRodW1icHJpbnQpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBSZWNlaXZlZCB0aHVtYnByaW50ICckVGh1bWJwcmludCcgZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgdGh1bWJwcmludCAnJEV4cGVjdGVkVGh1bWJwcmludCcuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtRmlsZVNpZ25hdHVyZVJvb3RDQSAoW3N0cmluZ10kUGF0aCkgew0KICAgICRmaWxlU2lnbmF0dXJlID0gR2V0LUZpbGVTaWduYXR1cmUgLVBhdGggJFBhdGgNCiAgICBUZXN0LVNpZ25hdHVyZVN0YXR1cyAtU3RhdHVzICRmaWxlU2lnbmF0dXJlLlN0YXR1cw0KDQogICAgW3N0cmluZ10kZmlsZVB1YmxpY0tleSA9IEdldC1GaWxlUm9vdENhUHVibGljS2V5IC1TaWduYXR1cmUgJGZpbGVTaWduYXR1cmUNCiAgICBbc3RyaW5nXSRmaWxlUHVibGljS2V5SGFzaCA9IEdldC1TdHJpbmdIYXNoIC1TdHJpbmcgJGZpbGVQdWJsaWNLZXkgLUhhc2hOYW1lICdTSEEyNTYnDQoNCiAgICBpZiAoLW5vdCAkVFJVU1RFRF9QVUJMSUNfQ0FTLkNvbnRhaW5zS2V5KCRmaWxlUHVibGljS2V5SGFzaCkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBUaGUgaGFzaCBvYnRhaW5lZCAnJGZpbGVQdWJsaWNLZXlIYXNoJyBmcm9tIHRoZSByb290IENBIG9mIHRoZSBmaWxlICckUGF0aCcgaXMgbm90IGNvbnNpZGVyZWQgYXMgdHJ1c3RlZC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUZpbGVSb290Q2FQdWJsaWNLZXkgKFtvYmplY3RdJFNpZ25hdHVyZSkgew0KICAgICRyb290Q2EgPSBHZXQtRmlsZVJvb3RDYSAtU2lnbmF0dXJlICRTaWduYXR1cmUNCiAgICByZXR1cm4gJHJvb3RDYS5HZXRQdWJsaWNLZXlTdHJpbmcoKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRmlsZVJvb3RDYSAoW29iamVjdF0kU2lnbmF0dXJlKSB7DQogICAgJGNoYWluID0gR2V0LUNlcnRpZmljYXRlQ2hhaW4gLVNpZ25lckNlcnRpZmljYXRlICRTaWduYXR1cmUuU2lnbmVyQ2VydGlmaWNhdGUNCiAgICByZXR1cm4gR2V0LVJvb3RDYUZyb21DZXJ0Q2hhaW4gLUNlcnRDaGFpbiAkY2hhaW4NCn0NCg0KZnVuY3Rpb24gR2V0LUNlcnRpZmljYXRlQ2hhaW4gKFtvYmplY3RdJFNpZ25lckNlcnRpZmljYXRlKSB7DQogICAgJGNoYWluID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgJ3NlY3VyaXR5LmNyeXB0b2dyYXBoeS54NTA5Y2VydGlmaWNhdGVzLng1MDljaGFpbicNCiAgICBbdm9pZF0oJGNoYWluLkJ1aWxkKCRTaWduZXJDZXJ0aWZpY2F0ZSkpDQogICAgcmV0dXJuICRjaGFpbg0KfQ0KDQpmdW5jdGlvbiBHZXQtUm9vdENhRnJvbUNlcnRDaGFpbiAoW29iamVjdF0kQ2VydENoYWluKSB7DQogICAgcmV0dXJuICRDZXJ0Q2hhaW4uQ2hhaW5FbGVtZW50cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IENlcnRpZmljYXRlIC1MYXN0IDENCn0NCg0KZnVuY3Rpb24gR2V0LVN0cmluZ0hhc2ggKFtzdHJpbmddJFN0cmluZywgW3N0cmluZ10kSGFzaE5hbWUpIHsNCiAgICAkaGFzaEJ5dGVzID0gW3NlY3VyaXR5LmNyeXB0b2dyYXBoeS5oYXNoYWxnb3JpdGhtXTo6Q3JlYXRlKCRIYXNoTmFtZSkuQ29tcHV0ZUhhc2goW3N5c3RlbS50ZXh0LmVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkU3RyaW5nKSkNCiAgICByZXR1cm4gW2JpdGNvbnZlcnRlcl06OlRvU3RyaW5nKCRoYXNoQnl0ZXMpIC1yZXBsYWNlICctJywgJycNCn0NCg0KZnVuY3Rpb24gVW5ibG9jay1JbnN0YWxsZXIgKFtzdHJpbmddJFBhdGgpIHsNCiAgICBbdm9pZF0oSW52b2tlLVByb2Nlc3MgLUZpbGVQYXRoICRDTURfRVhFIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgLUFyZ3VtZW50cyAoJFVOQkxPQ0tfQ09NTUFORCAtZiAkUGF0aCkpDQp9DQoNCmZ1bmN0aW9uIEluc3RhbGwtQXBwbGljYXRpb24gKFtzdHJpbmddJFBhdGgsIFtzdHJpbmddJEFyZ3VtZW50cykgew0KICAgIFt2b2lkXShJbnZva2UtUHJvY2VzcyAtRmlsZVBhdGggJFBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAtQXJndW1lbnRzICRBcmd1bWVudHMpDQp9DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVyIHZhbGlkYXRpb24NCiMNCmZ1bmN0aW9uIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgYA0KICAgICAgICAtUGFyYW1OYW1lICdNYXhpbXVtRGVsYXlJblNlY29uZHMnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5NYXhpbXVtRGVsYXlJblNlY29uZHMgYA0KICAgICAgICAtTG93ZXJMaW1pdCAwIGANCiAgICAgICAgLVVwcGVyTGltaXQgJE1BWF9TQ1JJUFRfREVMQVlfU0VDDQogICAgVGVzdC1HVUlEUGFyYW1ldGVyIGANCiAgICAgICAgLVBhcmFtTmFtZSAnQ2FtcGFpZ25JZCcgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkNhbXBhaWduSWQNCiAgICBUZXN0LUdVSURQYXJhbWV0ZXIgYA0KICAgICAgICAtUGFyYW1OYW1lICdPcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbklkJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuT3BlcmF0aW9uQ29tcGxldGVkQ2FtcGFpZ25JZA0KICAgIFRlc3QtR1VJRFBhcmFtZXRlciBgDQogICAgICAgIC1QYXJhbU5hbWUgJ09wZXJhdGlvbkNvbXBsZXRlZFJlc3RhcnRDYW1wYWlnbklkJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuT3BlcmF0aW9uQ29tcGxldGVkUmVzdGFydENhbXBhaWduSWQNCn0NCg0KIw0KIyBBZG9iZSBBY3JvYmF0IERDIHVuaW5zdGFsbGF0aW9uIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIFVuaW5zdGFsbC1BZG9iZUFjcm9iYXREQyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgJGluc3RhbGxlclNwZWNzID0gSW5pdGlhbGl6ZS1JbnN0YWxsZXJTcGVjcyAtQ2VydGlmaWNhdGVUaHVtYnByaW50ICRBQ1JPQkFUX1JFQURFUl9USFVNQlBSSU5UIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1JbnN0YWxsZXJBcmdzICRJTlNUQUxMRVJfQVJHUyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRG93bmxvYWRVUkx4ODYgJEFDUk9CQVRfUkVBREVSX0RPV05MT0FEX1VSTCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRG93bmxvYWRVUkx4NjQgJEFDUk9CQVRfUkVBREVSX0RPV05MT0FEX1VSTCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsZUhhc2h4ODYgJEFDUk9CQVRfUkVBREVSX0ZJTEVfSEFTSCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsZUhhc2h4NjQgJEFDUk9CQVRfUkVBREVSX0ZJTEVfSEFTSA0KICAgICRpbnN0YWxsZXJJbmZvID0gSW5pdGlhbGl6ZS1JbnN0YWxsZXJJbmZvcm1hdGlvbiAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtSW5zdGFsbGVyU3BlY3MgJGluc3RhbGxlclNwZWNzDQoNCiAgICBpZiAoVGVzdC1DYW5Vbmluc3RhbGwgLUNhbXBhaWduSWQgJGluc3RhbGxlckluZm8uQ2FtcGFpZ25JZCkgew0KICAgICAgICBDb21wbGV0ZS1BZG9iZUFjcm9iYXREQ1VuaW5zdGFsbGF0aW9uIC1JbnN0YWxsZXJJbmZvICRpbnN0YWxsZXJJbmZvIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUmVzdGFydENhbXBhaWduSWQgJElucHV0UGFyYW1ldGVycy5PcGVyYXRpb25Db21wbGV0ZWRSZXN0YXJ0Q2FtcGFpZ25JZA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1DYW5Vbmluc3RhbGwgKFtzdHJpbmddJENhbXBhaWduSWQpIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1BZG9iZUluc3RhbGxhdGlvbiAtT2JqZWN0RmlsdGVyICJOYW1lIExJS0UgJyRBRE9CRV9BQ1JPQkFUX0RDX1NPRlRXQVJFX05BTUUnIikpIHsNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAnQWRvYmUgQWNyb2JhdCBEQyBpcyBub3QgaW5zdGFsbGVkIG9uIHRoaXMgZGV2aWNlLiAnDQoNCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCg0KICAgIGlmIChUZXN0LUFkb2JlQWNyb2JhdERDSXNSdW5uaW5nKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBJbnZva2UtQ2FtcGFpZ25Vbmluc3RhbGxQcm9tcHQgLUNhbXBhaWduSWQgJENhbXBhaWduSWQNCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlICJVbmFibGUgdG8gb2J0YWluIHRoZSB1c2VyIGNvbnNlbnQgdG8gdW5pbnN0YWxsIEFkb2JlIEFjcm9iYXQgREMuIFJlYXNvbjogJF8gIg0KDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBpZiAoLW5vdCAoVGVzdC1BZG9iZUFjcm9iYXREQ0lzQ2xvc2VkKSkgew0KICAgICAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAnTm8gYWN0aW9uIHdhcyBwZXJmb3JtZWQuIFRoZSB1c2VyIGRpZCBub3QgY2xvc2UgQWRvYmUgQWNyb2JhdCBEQy4gJw0KDQogICAgICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJHRydWUNCn0NCg0KZnVuY3Rpb24gVGVzdC1BZG9iZUluc3RhbGxhdGlvbiAoW3N0cmluZ10kT2JqZWN0RmlsdGVyKXsNCiAgICBpZiAoJG51bGwgLWVxIChHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Qcm9kdWN0IC1GaWx0ZXIgJE9iamVjdEZpbHRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsNCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCg0KICAgIHJldHVybiAkdHJ1ZQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUFkb2JlQWNyb2JhdERDSXNSdW5uaW5nIHsNCiAgICBpZiAoJG51bGwgLW5lIChHZXQtUHJvY2VzcyAtUHJvY2Vzc05hbWUgJ0Fjcm9iYXQnIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICByZXR1cm4gJHRydWUNCiAgICB9DQoNCiAgICByZXR1cm4gJGZhbHNlDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1DYW1wYWlnblVuaW5zdGFsbFByb21wdCAoW3N0cmluZ10kQ2FtcGFpZ25JZCkgew0KICAgICRyZXNwb25zZSA9IEdldC1DYW1wYWlnblJlc3BvbnNlIC1DYW1wYWlnbklkICRDYW1wYWlnbklkDQogICAgJHN0YXR1cyA9IEdldC1DYW1wYWlnblJlc3BvbnNlU3RhdHVzIC1SZXNwb25zZSAkcmVzcG9uc2UNCg0KICAgIHN3aXRjaCAoJHN0YXR1cykgew0KICAgICAgICAnZnVsbHknIHsNCiAgICAgICAgICAgICR1bmluc3RhbGxBbnN3ZXIgPSBHZXQtQ2FtcGFpZ25SZXNwb25zZUFuc3dlciAtUmVzcG9uc2UgJHJlc3BvbnNlIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUXVlc3Rpb25OYW1lICdVbmluc3RhbGxBZG9iZUFjcm9iYXREQycNCg0KICAgICAgICAgICAgaWYgKCR1bmluc3RhbGxBbnN3ZXIgLW5lICdZZXMnKSB7DQogICAgICAgICAgICAgICAgJGRlbmlhbFJlYXNvbkFuc3dlciA9IEdldC1DYW1wYWlnblJlc3BvbnNlQW5zd2VyIC1SZXNwb25zZSAkcmVzcG9uc2UgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUXVlc3Rpb25OYW1lICdEZW5pYWxSZWFzb24nDQogICAgICAgICAgICAgICAgJHJlYXNvbk1lc3NhZ2UgPSBHZXQtRGVuaWFsUmVhc29uTWVzc2FnZSAtRGVuaWFsQW5zd2VyTmFtZSAkZGVuaWFsUmVhc29uQW5zd2VyDQoNCiAgICAgICAgICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoZSB1c2VyIHJlZnVzZWQgdG8gdW5pbnN0YWxsIEFkb2JlIEFjcm9iYXQgREMgKCRyZWFzb25NZXNzYWdlKS4gIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICd0aW1lb3V0JyB7IHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGltZW91dCBvbiBnZXR0aW5nIGFuIGFuc3dlciBmcm9tIHRoZSB1c2VyLiAiIH0NCiAgICAgICAgJ3Bvc3Rwb25lZCcgeyB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoZSB1c2VyIHBvc3Rwb25lZCB0aGUgY2FtcGFpZ24uICIgfQ0KICAgICAgICAnZGVjbGluZWQnIHsgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGUgdXNlciBkZWNsaW5lZCB0aGUgY2FtcGFpZ24uICIgfQ0KICAgICAgICAnY29ubmVjdGlvbmZhaWxlZCcgeyB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFVuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBDb2xsZWN0b3IgY29tcG9uZW50IHRoYXQgY29udHJvbHMgY2FtcGFpZ24gbm90aWZpY2F0aW9ucy4gIiB9DQogICAgICAgICdub3RpZmljYXRpb25mYWlsZWQnIHsgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBVbmFibGUgdG8gbm90aWZ5IHRoZSBDb2xsZWN0b3IgY29tcG9uZW50IHRoYXQgY29udHJvbHMgY2FtcGFpZ24gbm90aWZpY2F0aW9ucy4gIiB9DQogICAgICAgIGRlZmF1bHQgeyB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIEZhaWxlZCB0byBoYW5kbGUgY2FtcGFpZ24gcmVzcG9uc2U6ICRyZXNwb25zZS4gIiB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRGVuaWFsUmVhc29uTWVzc2FnZSAoW3N0cmluZ10kRGVuaWFsQW5zd2VyTmFtZSkgew0KICAgIGlmICgkVU5JTlNUQUxMQVRJT05fREVOSUFMX1JFQVNPTlMuQ29udGFpbnNLZXkoJERlbmlhbEFuc3dlck5hbWUpKSB7DQogICAgICAgIHJldHVybiAkVU5JTlNUQUxMQVRJT05fREVOSUFMX1JFQVNPTlMuJERlbmlhbEFuc3dlck5hbWUNCiAgICB9DQogICAgcmV0dXJuICRVTklOU1RBTExBVElPTl9ERU5JQUxfUkVBU09OUy5PdGhlcg0KfQ0KDQpmdW5jdGlvbiBUZXN0LUFkb2JlQWNyb2JhdERDSXNDbG9zZWQgew0KICAgICR0aW1lb3V0ID0gJEFET0JFX0FDUk9CQVRfRENfQ0xPU1VSRV9USU1FT1VUDQogICAgd2hpbGUgKCR0aW1lb3V0IC1ndCAwKSB7DQogICAgICAgIGlmICgtbm90IChUZXN0LUFkb2JlQWNyb2JhdERDSXNSdW5uaW5nKSkgew0KICAgICAgICAgICAgcmV0dXJuICR0cnVlDQogICAgICAgIH0NCg0KICAgICAgICAkdGltZW91dCA9ICR0aW1lb3V0IC0gJEFET0JFX0FDUk9CQVRfRENfQ0xPU1VSRV9USU1FX1NURVANCiAgICB9DQoNCiAgICByZXR1cm4gJGZhbHNlDQp9DQoNCmZ1bmN0aW9uIENvbXBsZXRlLUFkb2JlQWNyb2JhdERDVW5pbnN0YWxsYXRpb24gKFtoYXNodGFibGVdJEluc3RhbGxlckluZm8sIFtzdHJpbmddJFJlc3RhcnRDYW1wYWlnbklkKSB7DQogICAgJGlkZW50aWZ5ZXIgPSBHZXQtQWNyb2JhdERDSWRlbnRpZnllcg0KDQogICAgVW5yZWdpc3Rlci1BY3JvYmF0RExMcw0KICAgICR1bmluc3RhbGxDb2RlID0gVW5pbnN0YWxsLUFjcm9iYXREQyAtSWRlbnRpZnllciAkaWRlbnRpZnllcg0KDQogICAgaWYgKCR1bmluc3RhbGxDb2RlIC1lcSAkVU5JTlNUQUxMQVRJT05fU1VDQ0VTU19DT0RFKSB7DQogICAgICAgIGlmICgtbm90IChUZXN0LUFkb2JlSW5zdGFsbGF0aW9uIC1PYmplY3RGaWx0ZXIgIk5hbWUgTElLRSAnJEFET0JFX0FDUk9CQVRfUkVBREVSX0RDX1NPRlRXQVJFX05BTUUnIikpIHsNCiAgICAgICAgICAgIEluc3RhbGwtQWNyb2JhdFJlYWRlciAtSW5zdGFsbGVySW5mbyAkaW5zdGFsbGVySW5mbw0KICAgICAgICB9DQogICAgfSBlbHNlaWYgKCR1bmluc3RhbGxDb2RlIC1lcSAkVU5JTlNUQUxMQVRJT05fUkVTVEFSVF9DT0RFKSB7DQogICAgICAgIEludm9rZS1PcGVyYXRpb25Db21wbGV0ZWRDYW1wYWlnbiAtQ2FtcGFpZ25JZCAkUmVzdGFydENhbXBhaWduSWQNCiAgICB9IGVsc2Ugew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpIFVuYWJsZSB0byB1bmluc3RhbGwgQWRvYmUgQWNyb2JhdCBEQy4gRXhpdCBjb2RlOiAkdW5pbnN0YWxsQ29kZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUFjcm9iYXREQ0lkZW50aWZ5ZXIgew0KICAgICRvYmogPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Qcm9kdWN0IC1GaWx0ZXIgIk5hbWUgTElLRSAnJEFET0JFX0FDUk9CQVRfRENfU09GVFdBUkVfTkFNRSciDQogICAgaWYgKCRudWxsIC1uZSAkb2JqKSB7DQogICAgICAgIHJldHVybiAkb2JqLklkZW50aWZ5aW5nTnVtYmVyDQogICAgfQ0KDQogICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBVbmFibGUgdG8gcmV0cmlldmUgQWRvYmUgQWNyb2JhdCBEQyBJZGVudGlmeWVyLiAiDQp9DQoNCmZ1bmN0aW9uIFVucmVnaXN0ZXItQWNyb2JhdERMTHMgew0KICAgIGlmIChUZXN0LTY0Qml0c0FyY2hpdGVjdHVyZSkgew0KICAgICAgICBVbnJlZ2lzdGVyLUFjcm9iYXRETExzQnlBcmNoaXRlY3R1cmUgLUFyY2hpdGVjdHVyZSAneDY0Jw0KICAgIH0gZWxzZSB7DQogICAgICAgIFVucmVnaXN0ZXItQWNyb2JhdERMTHNCeUFyY2hpdGVjdHVyZSAtQXJjaGl0ZWN0dXJlICd4MzInDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBVbnJlZ2lzdGVyLUFjcm9iYXRETExzQnlBcmNoaXRlY3R1cmUgKFtzdHJpbmddJEFyY2hpdGVjdHVyZSkgew0KICAgIGZvcmVhY2ggKCRkbGxQYXRoIGluICRBRE9CRV9BQ1JPQkFUX0RMTFMuJEFyY2hpdGVjdHVyZSkgew0KICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRkbGxQYXRoKSB7DQogICAgICAgICAgICAkb3V0cHV0ID0gSW52b2tlLVByb2Nlc3MgLUZpbGVQYXRoICRBQ1JPQkFUX1VOUkVHSVNURVJfRExMX0FQUCAtQXJndW1lbnRzICIvcyAvdSBgIiRkbGxQYXRoYCIiDQogICAgICAgICAgICBpZiAoJG91dHB1dC5FeGl0Q29kZSAtbmUgMCkgew0KICAgICAgICAgICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgVW5hYmxlIHRvIHVucmVnaXN0ZXIgRExMICckZGxsUGF0aCcuIEV4aXQgY29kZTogJCgkb3V0cHV0LkV4aXRDb2RlKS4gIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBVbmluc3RhbGwtQWNyb2JhdERDIChbc3RyaW5nXSRJZGVudGlmeWVyKSB7DQogICAgJG91dHB1dCA9IEludm9rZS1Qcm9jZXNzIC1GaWxlcGF0aCAkQUNST0JBVF9VTklOU1RBTExFUl9QQVRIIC1Bcmd1bWVudHMgIi94IGAiJElkZW50aWZ5ZXJgIiAvcW4gL25vcmVzdGFydCBSZWJvb3Q9YCJSZWFsbHlTdXBwcmVzc2AiIg0KICAgIHJldHVybiAkb3V0cHV0LkV4aXRDb2RlDQp9DQoNCmZ1bmN0aW9uIEluc3RhbGwtQWNyb2JhdFJlYWRlciAoW2hhc2h0YWJsZV0kSW5zdGFsbGVySW5mbykgew0KICAgIFNldC1UbHMxMlNlY3VyaXR5UHJvdG9jb2wNCiAgICBJbnZva2UtSW5zdGFsbGF0aW9uIC1JbnN0YWxsZXJJbmZvICRJbnN0YWxsZXJJbmZvDQoNCiAgICBJbnZva2UtT3BlcmF0aW9uQ29tcGxldGVkQ2FtcGFpZ24gLUNhbXBhaWduSWQgJEluc3RhbGxlckluZm8uT3BlcmF0aW9uQ29tcGxldGVkQ2FtcGFpZ25JZA0KDQogICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAnQWRvYmUgQWNyb2JhdCBSZWFkZXIgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGluc3RhbGxlZC4gJw0KfQ0KDQpmdW5jdGlvbiBTZXQtVGxzMTJTZWN1cml0eVByb3RvY29sIHsNCiAgICBbbmV0LnNlcnZpY2Vwb2ludG1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW2VudW1dOjpUb09iamVjdChbbmV0LnNlY3VyaXR5cHJvdG9jb2x0eXBlXSwgJFRMU18xMikNCn0NCg0KIw0KIyBNYWluIHNjcmlwdCBmbG93DQojDQpbZW52aXJvbm1lbnRdOjpFeGl0KChJbnZva2UtTWFpbiAtSW5wdXRQYXJhbWV0ZXJzICRNeUludm9jYXRpb24uQm91bmRQYXJhbWV0ZXJzKSkNCiMgU0lHICMgQmVnaW4gc2lnbmF0dXJlIGJsb2NrDQojIE1JSWltUVlKS29aSWh2Y05BUWNDb0lJaWlqQ0NJb1lDQVFFeER6QU5CZ2xnaGtnQlpRTUVBZ0VGQURCNUJnb3INCiMgQmdFRUFZSTNBZ0VFb0dzd2FUQTBCZ29yQmdFRUFZSTNBZ0VlTUNZQ0F3RUFBQVFRSDh3N1lGbExDRTYzSk5MRw0KIyBLWDd6VVFJQkFBSUJBQUlCQUFJQkFBSUJBREF4TUEwR0NXQ0dTQUZsQXdRQ0FRVUFCQ0FDdkJTeDlLRTFiNXZ1DQojIDhSMlJrT2hKaXFvbzJwUngyM01oQTRjRWRUT21MYUNDRVRzd2dnUEZNSUlDcmFBREFnRUNBaEFDckZ3bWFndEENCiMgbTQ4TGVmS3VSaVYzTUEwR0NTcUdTSWIzRFFFQkJRVUFNR3d4Q3pBSkJnTlZCQVlUQWxWVE1SVXdFd1lEVlFRSw0KIyBFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweEt6QXBCZ05WDQojIEJBTVRJa1JwWjJsRFpYSjBJRWhwWjJnZ1FYTnpkWEpoYm1ObElFVldJRkp2YjNRZ1EwRXdIaGNOTURZeE1URXcNCiMgTURBd01EQXdXaGNOTXpFeE1URXdNREF3TURBd1dqQnNNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTQ0KIyBSR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVNzd0tRWURWUVFEDQojIEV5SkVhV2RwUTJWeWRDQklhV2RvSUVGemMzVnlZVzVqWlNCRlZpQlNiMjkwSUVOQk1JSUJJakFOQmdrcWhraUcNCiMgOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXhzemxjK2I3MUx2bExTMHlwdC9sZ1QvSnpTVkp0bkVxdzlXVQ0KIyBOR2VpQ2h5d1gybW1RTEhFdDdLUDBKaWtxVUZaT3RQY2xOWTgyM1E0cEVyTVRTV0M5MHFsVXhJNDd2TkpiWEdSDQojIGZtTzJxNlpmdzZTRStFOWlVYjc0eGV6Yk9KTGpCdVVJa1F6RUtFRlYrOHRhaVJWK2NlZzF2MDF5Q1QyK09qaFENCiMgVzNjeEc0Mnp4eVJGbXFlc2JRQVVXZ1MzdWhQclVRcVlRVUVpVG1WaGg0RkJVS1o1WEluZUdVcFgxUzdtWFJ4VA0KIyBMSDZZelJvR0ZxUm9jOUEwQkJOY29YSFRXbnhWMjE1azRUZUhNRllFNVJHMEtZQVM4WGs1aUtJQ0VYd25acmVJDQojIHQzanl5Z3FvT0tzS1pNSy9abDJWaE1HaEpSNkhYUnBRQ3lBU3pFRzdiZ3RST0xoTHl3SURBUUFCbzJNd1lUQU8NCiMgQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVzVDdEYVFQNA0KIyB2MGNCMUpnbUdnZ0M3Mk5rSzhNd0h3WURWUjBqQkJnd0ZvQVVzVDdEYVFQNHYwY0IxSmdtR2dnQzcyTmtLOE13DQojIERRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFCd2FCcGZjMTV5ZlBJaG1CZ2hYSWRzaFIvZ3FaNnEvR0RKMlFCQlgNCiMgd1lyemV0a1JaWTQxK3A3OFJiV2UyVXd4UzdpUjZFTXNqck40enR2alUzbHgxdVVobEFIYVZZZWFKR1QyaW1iTQ0KIyAzcHczemFnMHNXbWJJOGllZUNJcmNFUGpWVWN4WVJudldNV0ZMMDR3OXFBeEZpUEk1K0psRmpQTHZ4b2JvRDM0DQojIHlsNkxNWXRnQ0lrdERBWmNVcmZFK1FxWTBSVmZueEsrZkRaak9MMUVwSC9rSmlzS3hKZHBEZW1NNHNBUVY3akkNCiMgZGhLUlZmSklhZGk4S2dKYkQwVFVJREhiOUxwd0psMlFZSjY4U3hjSkw3VExIa05veVFjbndkSmM5K29odVdnUw0KIyBuRHljdjU3OGdGeWJZODNzUjZvbEoyZWdOL01BZ24xVTE2bjQ2UzRUbzNmb0gwb3dnZ2F1TUlJRmxxQURBZ0VDDQojIEFoQUtHZzBiY28rVXVMZHdGQ0I4S2dyRU1BMEdDU3FHU0liM0RRRUJDd1VBTUd3eEN6QUpCZ05WQkFZVEFsVlQNCiMgTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1ag0KIyBiMjB4S3pBcEJnTlZCQU1USWtScFoybERaWEowSUVWV0lFTnZaR1VnVTJsbmJtbHVaeUJEUVNBb1UwaEJNaWt3DQojIEhoY05NakF3T0RFM01EQXdNREF3V2hjTk1qTXdPREl5TVRJd01EQXdXakNCd0RFVE1CRUdDeXNHQVFRQmdqYzgNCiMgQWdFREV3SkRTREVWTUJNR0N5c0dBUVFCZ2pjOEFnRUNFd1JXWVhWa01SMHdHd1lEVlFRUERCUlFjbWwyWVhSbA0KIyBJRTl5WjJGdWFYcGhkR2x2YmpFWU1CWUdBMVVFQlJNUFEwaEZMVEV4TWk0d01EQXVOVGM1TVFzd0NRWURWUVFHDQojIEV3SkRTREVQTUEwR0ExVUVCeE1HVUhKcGJHeDVNUll3RkFZRFZRUUtFdzFPUlZoVWFHbHVheUJUTGtFdU1Rc3cNCiMgQ1FZRFZRUUxFd0pTUkRFV01CUUdBMVVFQXhNTlRrVllWR2hwYm1zZ1V5NUJMakNDQWlJd0RRWUpLb1pJaHZjTg0KIyBBUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTE1icjhrNUI0VVQ3RTkrNlNrb2EzSWh5OHY2dlNIV2E1VGZwdFBuDQojIEIxSlE3QmdzdzZFRENJL0hySWxjUlJGK2ZlWEdZUFlha0o1bmcxY2tNMjJ1L0Z0QW1ybGhiNVZMRk9lTWl1Yi8NCiMgUjVjUFE2SWhqZENuVGlWUHJCYllldkNteUhPVGRxYzc0R0Z5Z0JLK2cvWkxacU9XSkRraHdWaW1UTlRQMVJPLw0KIyBCZWMzSkkzcnIwQ3VJcXFHdkN0L1R1Y1BzelZ5dUtSVml3NWd2TWthd1F2ZndUOE1tTGZGa3I5OGx0NEJsVFpHDQojIFNrb1B1bUVTK2JKZFdNVHRkVGZaSWsrS1F2NjBvV21zV2xJL0x4ZSttMXFJbkNFRExGblNzUUlOK0hHa2FiVzUNCiMgVWlFSjZiRGpaQ0lCNVBoUVhqdjBXWExUR1pxVGNiQmVCTElBbjA2TDlUSUg2b0NHODdRbHJYZHlzT0RjYXFpUQ0KIyBTa0FKN2JYUXNjZldzUkhXUHJSelUzNkEybU94REtFUkd4SDNpUER4ZlY5TkFFYjhoZEZUZnhKUk1hK2hFQXF0DQojIDZxeDRQdVVaYnU3bThUcmgrZkhLbzVTOWJ3WGtZbWkwVERPTnBZRVFtYjcrbGVmY0hxTE5hSWdwZmRLNWgvMFYNCiMgbFVscER3bE5HWE1mRTJhQmhOUjZMNU85OXIxMVkycUpBMU9tTUJjUE5vWTdsalhtZE1IdTFWOS9ERTBKSzRPWQ0KIyBWeGJuVVZNcVRmMy9WZ1p4R2VjWU1NZmFtanY0MnNQRnZNZGFDajhDM040YzBkNHNXT2x0SmtqQ21pNWZLdzl5DQojIFVHTHpVeldPZng5eTBhVFFuOVNkL3k2OGNCUC9KbC8xa3dzM3hQNE9yc3psNXZBRmVuVFF3dE9ITGdzb2swRUYNCiMgRnVhTEFnTUJBQUdqZ2dIMU1JSUI4VEFmQmdOVkhTTUVHREFXZ0JTUDZIN3diVEpxQUFVangzQ1hhanFRLzJ2cQ0KIyAxREFkQmdOVkhRNEVGZ1FVVWx1b3pQQ0lvWUJ5dUQ0ZFZCY0NsYnc0NjM4d01nWURWUjBSQkNzd0thQW5CZ2dyDQojIEJnRUZCUWNJQTZBYk1Ca01GME5JTFZaQlZVUXRRMGhGTFRFeE1pNHdNREF1TlRjNU1BNEdBMVVkRHdFQi93UUUNCiMgQXdJSGdEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBekI3QmdOVkhSOEVkREJ5TURlZ05hQXpoakZvZEhSdw0KIyBPaTh2WTNKc015NWthV2RwWTJWeWRDNWpiMjB2UlZaRGIyUmxVMmxuYm1sdVoxTklRVEl0WnpFdVkzSnNNRGVnDQojIE5hQXpoakZvZEhSd09pOHZZM0pzTkM1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXQNCiMgWnpFdVkzSnNNRXNHQTFVZElBUkVNRUl3TndZSllJWklBWWI5YkFNQ01Db3dLQVlJS3dZQkJRVUhBZ0VXSEdoMA0KIyBkSEJ6T2k4dmQzZDNMbVJwWjJsalpYSjBMbU52YlM5RFVGTXdCd1lGWjRFTUFRTXdmZ1lJS3dZQkJRVUhBUUVFDQojIGNqQndNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUndPaTh2YjJOemNDNWthV2RwWTJWeWRDNWpiMjB3U0FZSUt3WUINCiMgQlFVSE1BS0dQR2gwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRVZXUTI5aw0KIyBaVk5wWjI1cGJtZERRUzFUU0VFeUxtTnlkREFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBDQojIEE0SUJBUUFZNklCNFBuTmN6aGRlbVZWaWR0VDhYVDBQKy9FajliYmFNSW1SNkhFTFRjWVgxOWdqa3NGTlVyUjYNCiMgL1hVUGdhai9uU3BscjVPajNESjVKQ1BvMkFWS3dZMW1VV1MydVlvWlJpbkVBb2REZkVTcWZUaVIxOTgyeHA3Mg0KIyBnbzM0N0dUTW5wcGsyRXBkdUlpb2krZGN3YmJ3MURmMm5GekkzRmNYN0gxVUlQZDhNNHAzVUF0NVdDaVZNUEhXDQojIFh4clF0NW44anhnTGN1c3ZPUlhacVpPc2RUbDdIWnBzVkhuR1VZNzg3T3UwSUp4dUZzaVVNNjRiS0d6dk5xcXQNCiMgWXlGeVI5OUVyQ1RxZFo2NnVyYUZpbEFnalB3YUxGekpVdzYrYUsvd1d4S0I3UTBwaUlDcGVYMVgwSUxadTU2Rw0KIyBSMjA2VkVjbXhXSUxZalFFMk5aY1QrN3ZiVXptTUlJR3ZEQ0NCYVNnQXdJQkFnSVFBL0cwNFY4Nmd2RVVsbml6DQojIDE5aEhYREFOQmdrcWhraUc5dzBCQVFzRkFEQnNNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG4NCiMgYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVNzd0tRWURWUVFERXlKRQ0KIyBhV2RwUTJWeWRDQklhV2RvSUVGemMzVnlZVzVqWlNCRlZpQlNiMjkwSUVOQk1CNFhEVEV5TURReE9ERXlNREF3DQojIE1Gb1hEVEkzTURReE9ERXlNREF3TUZvd2JERUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybEQNCiMgWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEVyTUNrR0ExVUVBeE1pUkdsbg0KIyBhVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5S1RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCDQojIEJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtkVCtnK3l0UlB4Wk0rRWdQeXVnRFhSdHRmSG95eXNHaXlzOFlTc09qVVMNCiMgT3BLUnVsZmt4TW56TDZoSVBMZldidHlYSXJwUmVXR3ZReThOdDV1MFNUR3VSRmcrcEtHV3A0ZFBJMzdEYkdVaw0KIyBrRlUrb2NvamZNVkM2Y1I2WWtXYmZkNWpkTXVlWXlYNGhKcWFyVVZQcm4wZnlCUExkWnZKNGVHSytBc01tUFRLDQojIFB0QkZxbm9lcFZpVE5qUytLeTRyTVZobXRESVFuNTN3VXFIdjZEN1RkdkpBV3R6NmFqMGJTNjEyc0l4YzdqYTYNCiMgZytvd3FFemU4UXNxV0VHSXJnQ0pxd1BSRm9JZ0luYnJYbFE0RW1MaDBuQWsyKzBmY05Ka0NZQXQ0cmFkemgveQ0KIyB1eUh6Yk52WXN4bDdpbENmNyt3MkNseWF0MHJUQ0tBNWVmM2R2ejA2Q1NVQ0F3RUFBYU9DQTFnd2dnTlVNQklHDQojIEExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd0RnWURWUjBQQVFIL0JBUURBZ0dHTUJNR0ExVWRKUVFNTUFvR0NDc0cNCiMgQVFVRkJ3TURNSDhHQ0NzR0FRVUZCd0VCQkhNd2NUQWtCZ2dyQmdFRkJRY3dBWVlZYUhSMGNEb3ZMMjlqYzNBdQ0KIyBaR2xuYVdObGNuUXVZMjl0TUVrR0NDc0dBUVVGQnpBQ2hqMW9kSFJ3T2k4dlkyRmpaWEowY3k1a2FXZHBZMlZ5DQojIGRDNWpiMjB2UkdsbmFVTmxjblJJYVdkb1FYTnpkWEpoYm1ObFJWWlNiMjkwUTBFdVkzSjBNSUdQQmdOVkhSOEUNCiMgZ1ljd2dZUXdRS0Erb0R5R09taDBkSEE2THk5amNtd3pMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVocA0KIyBaMmhCYzNOMWNtRnVZMlZGVmxKdmIzUkRRUzVqY213d1FLQStvRHlHT21oMGRIQTZMeTlqY213MExtUnBaMmxqDQojIFpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVocFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3Z2dIRUJnTlYNCiMgSFNBRWdnRzdNSUlCdHpDQ0FiTUdDV0NHU0FHRy9Xd0RBakNDQWFRd09nWUlLd1lCQlFVSEFnRVdMbWgwZEhBNg0KIyBMeTkzZDNjdVpHbG5hV05sY25RdVkyOXRMM056YkMxamNITXRjbVZ3YjNOcGRHOXllUzVvZEcwd2dnRmtCZ2dyDQojIEJnRUZCUWNDQWpDQ0FWWWVnZ0ZTQUVFQWJnQjVBQ0FBZFFCekFHVUFJQUJ2QUdZQUlBQjBBR2dBYVFCekFDQUENCiMgUXdCbEFISUFkQUJwQUdZQWFRQmpBR0VBZEFCbEFDQUFZd0J2QUc0QWN3QjBBR2tBZEFCMUFIUUFaUUJ6QUNBQQ0KIyBZUUJqQUdNQVpRQndBSFFBWVFCdUFHTUFaUUFnQUc4QVpnQWdBSFFBYUFCbEFDQUFSQUJwQUdjQWFRQkRBR1VBDQojIGNnQjBBQ0FBUXdCUUFDOEFRd0JRQUZNQUlBQmhBRzRBWkFBZ0FIUUFhQUJsQUNBQVVnQmxBR3dBZVFCcEFHNEENCiMgWndBZ0FGQUFZUUJ5QUhRQWVRQWdBRUVBWndCeUFHVUFaUUJ0QUdVQWJnQjBBQ0FBZHdCb0FHa0FZd0JvQUNBQQ0KIyBiQUJwQUcwQWFRQjBBQ0FBYkFCcEFHRUFZZ0JwQUd3QWFRQjBBSGtBSUFCaEFHNEFaQUFnQUdFQWNnQmxBQ0FBDQojIGFRQnVBR01BYndCeUFIQUFid0J5QUdFQWRBQmxBR1FBSUFCb0FHVUFjZ0JsQUdrQWJnQWdBR0lBZVFBZ0FISUENCiMgWlFCbUFHVUFjZ0JsQUc0QVl3QmxBQzR3SFFZRFZSME9CQllFRkkvb2Z2QnRNbW9BQlNQSGNKZHFPcEQvYStyVQ0KIyBNQjhHQTFVZEl3UVlNQmFBRkxFK3cya0QrTDlIQWRTWUpob0lBdTlqWkN2RE1BMEdDU3FHU0liM0RRRUJDd1VBDQojIEE0SUJBUUFaTTBvTWdUTTMyNjAyeWVUSk9ydTFHeTU2b3VMMFEwSVhucjlPb1UzaHNkdnBnZDJmQWZMa2lOWHANCiMgL2duOUljSHNYWURTOE5iQlE4TCtkeXZiK2RlUk04NXMxYklaTytZdTFzbVRUNGhBanMzaDlYN3hEOFpaVm5Mbw0KIyA2MnBCdlJ6VlJ0VjhTY3BtT0JYQnYrQ1JjSGVIM01tTk1ja01LYUl6N1kzaWg4MkpqVDhiLzlYZ0dwZUxmTnB0DQojICs2akdzanBtYTNzQnM4M1lwalRzRWdHcmxWaWx4Rk5YcUdEbTV3SVNvTGtqWktKTnUzeUJKV1FodnMvdVFoaEQNCiMgbDd1bE53YXZUZjhtcFUxaFMreEdRYmhsenJoNW5naVdDNEdNaWp1UHg1bU1veXB1bUcxZVljYVd0NHE1WVMyVA0KIyB1T3NPQkVQWDlmNm04R0xVbVdxbHdjSHdaSlNBTVlJUXREQ0NFTEFDQVFFd2dZQXdiREVMTUFrR0ExVUVCaE1DDQojIFZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjANCiMgTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuYVVObGNuUWdSVllnUTI5a1pTQlRhV2R1YVc1bklFTkJJQ2hUU0VFeQ0KIyBLUUlRQ2hvTkczS1BsTGkzY0JRZ2ZDb0t4REFOQmdsZ2hrZ0JaUU1FQWdFRkFLQ0JoREFZQmdvckJnRUVBWUkzDQojIEFnRU1NUW93Q0tBQ2dBQ2hBb0FBTUJrR0NTcUdTSWIzRFFFSkF6RU1CZ29yQmdFRUFZSTNBZ0VFTUJ3R0Npc0cNCiMgQVFRQmdqY0NBUXN4RGpBTUJnb3JCZ0VFQVlJM0FnRVZNQzhHQ1NxR1NJYjNEUUVKQkRFaUJDQXU5cGl1L2ZySQ0KIyBBNzhYQVpzZDlKUTZoSHFSTmZVQlYrYVZEK3Q4ZVBnQnd6QU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0FnQW5wV0krDQojIGdERFZRYWIvbGpXbkMyK2Nhc3kzYTRuMjRvY1hHdXdNdmUvVGJISWo5ZE9SbmlZNE1MR1RoTEZxMmVYbThFV0MNCiMgSGxkQ241SzZXb2xFZjY1bERiRGFpVGg1bm91YUVURnVEbzZYTkppWkxKN1MxV3pFTEtYUFR5Y3pWOUZSdmRSdQ0KIyBxSmtnQ0dFczVsVEtQT3dkUXJwN1Y4OXJYbnpFSFZSTXg1azRMOUY2bVNSQWFwS2lTQ25UMUp3RnNmMzFablhjDQojIHlFU1V6bXFoMzcrWEZGYWp2cm05UVJPUGRZSVRiTURsTGRKTm8xQzMvQmRmTHQ4bHRNZ1VXNTdDM1lLWmVpSisNCiMgN1ErSFVRV2EwazJIcFdONkFlQXpwN2FSWjhwTHBTdEFUbUhyQmFqd2IxZnBJTk9FVlRac2dhSU4wNFFNUlZQRg0KIyBQZnMvTjhQdFdYWHVWUGdnU29CSTRycmg3Z292TjE5YmN2RmMxbXpoZmd4alZMMTFscitCc2lpNGhFUm5TSFh4DQojIExnSlYwNHR0MTFUNytqQmgrZUV3bXpkUWJhS0NzeWV5QmZ1aTh2ME9CN0pOS0hIclpKMythYnk1SVc2Ly9yWi8NCiMgUm0zbnpuL1hvVC92SGk4MEJKbVZRU3hURWovV3JtZzZNWHROWEw2ZzN0MEluWjNMelQ2ZEtKYStUQVZJRnkwdw0KIyBuUnpNd21xR1JtekdYNENVbUJidllkRkdic2RRZ21QZjFPYUtNRWdkRkpXWW96Sy83WE9lZ2pMQUZRejhpTUhUDQojIHlFU3owMnkzdWIxeUxhckRqTFd3VTlCcU9LNGpOd1NYUThCYmVmSEdtT2t3TkRBLzlPa0tNdFAvSllWTG5YMGwNCiMgZkRWSjY4UWIyNlV2ckE0b2QzZ2N6NjVJVWg4UzJQSDYrUFZPZWFHQ0RYMHdnZzE1QmdvckJnRUVBWUkzQXdNQg0KIyBNWUlOYVRDQ0RXVUdDU3FHU0liM0RRRUhBcUNDRFZZd2dnMVNBZ0VETVE4d0RRWUpZSVpJQVdVREJBSUJCUUF3DQojIGR3WUxLb1pJaHZjTkFRa1FBUVNnYUFSbU1HUUNBUUVHQ1dDR1NBR0cvV3dIQVRBeE1BMEdDV0NHU0FGbEF3UUMNCiMgQVFVQUJDQmlVRjB6MS91YVVHUzEvSWVnNHozZjZPYmVFSGY5enlwNUFXQk52d3ZhYXdJUVdzNWRyaGl6ZGRzMA0KIyAvMmxXclNFejZSZ1BNakF5TVRBMk1EY3hNVE00TVRCYW9JSUtOekNDQlA0d2dnUG1vQU1DQVFJQ0VBMUNTdUMrDQojIE9vai9ZRUFoemhRQThOMHdEUVlKS29aSWh2Y05BUUVMQlFBd2NqRUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlYNCiMgQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEV4TUM4Rw0KIyBBMVVFQXhNb1JHbG5hVU5sY25RZ1UwaEJNaUJCYzNOMWNtVmtJRWxFSUZScGJXVnpkR0Z0Y0dsdVp5QkRRVEFlDQojIEZ3MHlNVEF4TURFd01EQXdNREJhRncwek1UQXhNRFl3TURBd01EQmFNRWd4Q3pBSkJnTlZCQVlUQWxWVE1SY3cNCiMgRlFZRFZRUUtFdzVFYVdkcFEyVnlkQ3dnU1c1akxqRWdNQjRHQTFVRUF4TVhSR2xuYVVObGNuUWdWR2x0WlhOMA0KIyBZVzF3SURJd01qRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQzVtR0VaOFdLDQojIDlRMElwRVhLWTJ0UjF6b1JRcjBLZFhWTmxMUU1VTFVtRVA0ZHlHK1Jhd3lXNXhwY1NPOUU1YitiWWMwVmtXSmENCiMgdVA5bkM1eGovVFpxZ2ZvcCtOMHJjSVhlQWhqemVHMjhmZm5IYlFrOXZtcDJoK21LdmZpRVhSNTJ5ZVRHZG5ZNg0KIyBVOUhSMDFvMmo4YWo0UzhiT3JkaDFuUHNUbTB6aW54ZFJTMUxzVkRtUVRvM1ZvYmNreU9OOTFBbDZHVG0zZE9QDQojIEwxZTFoeURyRG80czFTUGE5RTE0UnVNRGd6RXBTbHdNTVlwS2pJakY5ekJhK1JTdkZWOXNRMGtKL1NZalUvYU4NCiMgWStnYXExdXhIVERDbTJtQ3ROdjhWbFM4SDZHSHE3NTZXd29nTDBzSnlaV25qYkw2MW1PTFRxVnlITzZmZWdGeg0KIyArQm5XL2cxSmhMMEJBZ01CQUFHamdnRzRNSUlCdERBT0JnTlZIUThCQWY4RUJBTUNCNEF3REFZRFZSMFRBUUgvDQojIEJBSXdBREFXQmdOVkhTVUJBZjhFRERBS0JnZ3JCZ0VGQlFjRENEQkJCZ05WSFNBRU9qQTRNRFlHQ1dDR1NBR0cNCiMgL1d3SEFUQXBNQ2NHQ0NzR0FRVUZCd0lCRmh0b2RIUndPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNdw0KIyBId1lEVlIwakJCZ3dGb0FVOUxiaElCMytLYTdTNUdHbHNxSWxzc2dYTlc0d0hRWURWUjBPQkJZRUZEWkVobzZrDQojIHVyQm12cndvTFIxRU50M2phbnE4TUhFR0ExVWRId1JxTUdnd01xQXdvQzZHTEdoMGRIQTZMeTlqY213ekxtUnANCiMgWjJsalpYSjBMbU52YlM5emFHRXlMV0Z6YzNWeVpXUXRkSE11WTNKc01ES2dNS0F1aGl4b2RIUndPaTh2WTNKcw0KIyBOQzVrYVdkcFkyVnlkQzVqYjIwdmMyaGhNaTFoYzNOMWNtVmtMWFJ6TG1OeWJEQ0JoUVlJS3dZQkJRVUhBUUVFDQojIGVUQjNNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUndPaTh2YjJOemNDNWthV2RwWTJWeWRDNWpiMjB3VHdZSUt3WUINCiMgQlFVSE1BS0dRMmgwZEhBNkx5OWpZV05sY25SekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRk5JUVRKQg0KIyBjM04xY21Wa1NVUlVhVzFsYzNSaGJYQnBibWREUVM1amNuUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRWdjDQojIDNMWHBtaU84NXhybklBNk9aMGI5UW5KUmRBb2pSNk9ya3RJbHhIQlp2aFNnNVNlQnBVMFVGUmtIZWZEUkJNT0cNCiMgMlR1OS9rUUNaazN0YWFRUDlyaHd6MkxvOVZGS2VIazJlaWUzOCtkU241T243VU9lZStlMDNVRWlpZnVIb2tZRA0KIyBUdnowL3Jka2QyTmZJMUpwZzRMNkdsUHRrTXlOb1JkekRmVHpaVGx3Uy9PYzFucDcyZ3k4UFRMUUc4djFZZngxDQojIENBQjJ2SUVPK01EaFhNL0VFWExuRzJSSjJDS2FkUlZDOVMweU9JSGE5R0NpdXJSUysxemdZU1FsVDdMZnlTbW8NCiMgYzBOUjJyMWoxaDlibS9jdUcwOFRIZmRLRFhGK2w3ZjBQNFRyd2VPalNhSDZ6cWUvVnMrNldYWmhpVjkrcDdTTw0KIyBaM2o1TnBqaHl5amFXNGVtaWk4d2dnVXhNSUlFR2FBREFnRUNBaEFLb1NYVzFqSWJma0hrQmRvMmw4SVZNQTBHDQojIENTcUdTSWIzRFFFQkN3VUFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkoNCiMgYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweEpEQWlCZ05WQkFNVEcwUnBaMmxEWlhKMA0KIyBJRUZ6YzNWeVpXUWdTVVFnVW05dmRDQkRRVEFlRncweE5qQXhNRGN4TWpBd01EQmFGdzB6TVRBeE1EY3hNakF3DQojIE1EQmFNSEl4Q3pBSkJnTlZCQVlUQWxWVE1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlYNCiMgQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweE1UQXZCZ05WQkFNVEtFUnBaMmxEWlhKMElGTklRVElnUVhOeg0KIyBkWEpsWkNCSlJDQlVhVzFsYzNSaGJYQnBibWNnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3DQojIGdnRUtBb0lCQVFDOTBETHVTODJQZjkycHVvS1p4VGxVS0ZlMkkwckVEZ2RGTTFFUWZkRDVmVTFvZnVlMm9QU04NCiMgczRqa2w3OWpJWkNZdnhPOFY5UEQ0WDRJMW1vVUFEajNMaDQ3N3N5bTlqSlovbDlsUCtDYjYrTkdSd1lhVlg0TA0KIyBKMzdBb3ZXZzRONGlQdzcvZnBYNzg2TzZJajRZckJIazhKa0RiVHVGZkFuVDdsM0ltZ3RVNDZnSmNXdmd6eUlRDQojIEQzWFBjWEpPQ3EzZlFEcGN0MUhob1hrVXhrMGtJekJkdk93OFlHcXNMd2ZNL2ZEcVI5bUlVRjc5Wm01V1lTY3ANCiMgaVlSUjVvTG5SbEQ5bENvc3ArUjFQcnFZRDRSL256RVUxcTNWOG1UTGV4NEYwSVFaY2hmeEZ3YnZQYzNXVGU4Rw0KIyBRdjJpVXlwUGhSM0VIVHl2ejlxc0VQWGRyS3pwVnYrVEFnTUJBQUdqZ2dIT01JSUJ5akFkQmdOVkhRNEVGZ1FVDQojIDlMYmhJQjMrS2E3UzVHR2xzcUlsc3NnWE5XNHdId1lEVlIwakJCZ3dGb0FVUmV1aXIvU1N5NEl4TFZHTHA2Y2gNCiMgbmZOdHlBOHdFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBREFPQmdOVkhROEJBZjhFQkFNQ0FZWXdFd1lEVlIwbA0KIyBCQXd3Q2dZSUt3WUJCUVVIQXdnd2VRWUlLd1lCQlFVSEFRRUViVEJyTUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3DQojIE9pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdRd1lJS3dZQkJRVUhNQUtHTjJoMGRIQTZMeTlqWVdObGNuUnoNCiMgTG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFRnpjM1Z5WldSSlJGSnZiM1JEUVM1amNuUXdnWUVHQTFVZA0KIyBId1I2TUhnd09xQTRvRGFHTkdoMGRIQTZMeTlqY213MExtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRUZ6DQojIGMzVnlaV1JKUkZKdmIzUkRRUzVqY213d09xQTRvRGFHTkdoMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnYNCiMgYlM5RWFXZHBRMlZ5ZEVGemMzVnlaV1JKUkZKdmIzUkRRUzVqY213d1VBWURWUjBnQkVrd1J6QTRCZ3BnaGtnQg0KIyBodjFzQUFJRU1Db3dLQVlJS3dZQkJRVUhBZ0VXSEdoMGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEDQojIFVGTXdDd1lKWUlaSUFZYjliQWNCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCeGxSTHBVWWRXYWMzdjNkcDgNCiMgcW1ONnMzalBCamRBaE85TGhML0t6d01DL2NXbnd3NGdRaXl2ZC9Nckh3d2hXaXEzQlRRZGFxNlorQ2VpWnI4Sg0KIyBxbURmZHFRNmt3LzRzdEhZZkJsaTZGNkNKUjdFdWh4N0xDSGkxbHNzRkRWREJHaXkyM1VDNEhMSG1OWThaT1VmDQojIFNCQVlYNGs0WVUxaVJpU0hZNHlSVWl5dktZbmxlQi9XQ3hTbGdOY1NSM0N6ZGRXVGhaTit0cEpuKzFOaGlhajENCiMgYTViQTlGaHBEWHpJQWJHNUtIVzNtV09GSW94aHlubVVmbG44akEvamI3VUJKclpzcGU2SFVTSGtXR0NidWd3dA0KIyBLMjJpeEg2N3hDVXJSd0lJZkVtdUU3YmhmRUpDS01ZWVZzOUJOTFptWGJaMGUvVldNeUl2SWpheVM2SktsZGoxDQojIHBvNVNNWUlDaGpDQ0FvSUNBUUV3Z1lZd2NqRUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybEQNCiMgWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEV4TUM4R0ExVUVBeE1vUkdsbg0KIyBhVU5sY25RZ1UwaEJNaUJCYzNOMWNtVmtJRWxFSUZScGJXVnpkR0Z0Y0dsdVp5QkRRUUlRRFVKSzRMNDZpUDlnDQojIFFDSE9GQUR3M1RBTkJnbGdoa2dCWlFNRUFnRUZBS0NCMFRBYUJna3Foa2lHOXcwQkNRTXhEUVlMS29aSWh2Y04NCiMgQVFrUUFRUXdIQVlKS29aSWh2Y05BUWtGTVE4WERUSXhNRFl3TnpFeE16Z3hNRm93S3dZTEtvWklodmNOQVFrUQ0KIyBBZ3d4SERBYU1CZ3dGZ1FVNGRlQ3FPR1J2dTlyeWhhUnRhcTBsS1lrbS9Nd0x3WUpLb1pJaHZjTkFRa0VNU0lFDQojIElDbVRMd3FMS291WGpZY2dzQlJJeFFuVWhqb2dPZ2tYa3hGM2tjYkxjcE1qTURjR0N5cUdTSWIzRFFFSkVBSXYNCiMgTVNnd0pqQWtNQ0lFSUxNUWtBYThDdG1EQjVGWEtlQkVBMEZjZytNcEsyRlBKcFpNalRWeDdQV3BNQTBHQ1NxRw0KIyBTSWIzRFFFQkFRVUFCSUlCQUNkRjZRUGVOaXNmekFFMXJlcFRBZitTVVpPMDVEU0hYUlF2ZUNJRVZTc01rajdODQojIEZpWGJOZEVid053aTJmNldZWVF6Szg0bjdVeVNMeC9vT1plaU01ZFpwNmRXd2J2L0kyOVNxeXBZZ2w0b0ZOVFoNCiMgak11a01kWXlwaERkamMzQzhzdGZyaXpZQVk3ZXlqT3NFN0pROVBRdi9aeXZ4SVlscmUyY3lobGt1UGViSzFXKw0KIyAwQUtQTjdKTGJCRFBjNi80cEFlYUtOTVFRNWMraGg3eEVaS2tDdEgxRmZYZEJISzNOUUhkWWczZXZvcU5HdCtPDQojIFBFOFdrcEswUG9GeGt4cHQyYm9sQUVPSDNZaFcvODlUenRHb2crWG9yM29EMlVEcmxKSlJENEVsd2pWRHBrZzMNCiMgTTN1SWQ0UGN5ako3OTUyWWZ6eG5kUUtodEtoeSs1bjdMSmw0MjNZPQ0KIyBTSUcgIyBFbmQgc2lnbmF0dXJlIGJsb2NrDQo="}}}