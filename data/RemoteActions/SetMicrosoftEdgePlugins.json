{"id": "Set_Microsoft_Edge_Plugins_windows", "name": "Set Microsoft Edge Plugins", "description": "Sets a list of plugins to be installed or banned by editing Microsoft Edge Policies. Removing previous policies is also possible.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Campaign Id to invoke when Edge is needed to be closed", "id": "CampaignId", "name": "CampaignId", "options": ["858b214d-eee7-42e1-94f0-cc077b1fd51a"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Plugin Id, or a comma-separated list of plugins Ids from the Microsoft Store to be installed on the device. Type \"\" to not change this policy", "id": "MandatoryMicrosoftStorePlugins", "name": "MandatoryMicrosoftStorePlugins", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Plugin Id, or a comma-separated list of plugins Ids from the Chrome Web Store to be installed on the device. Type \"\" to not change this policy", "id": "MandatoryChromeWebStorePlugins", "name": "MandatoryChromeWebStorePlugins", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Plugin Id, or a comma-separated list of plugins Ids to be banned on the device. Type \"\" to not change this policy", "id": "BannedPlugins", "name": "BannedPlugins", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Set if the previous Microsoft Edge policies have to be removed before applying the new ones stated in the previous parameters. Set it to \"true\" for deletion, \"false\" otherwise", "id": "RemovePreviousPolicies", "name": "RemovePreviousPolicies", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-MicrosoftEdgePlugins.ps1", "script": ""}}}