{"id": "Get_OneDrive_Sync_Status_windows", "name": "Get OneDrive Sync Status", "description": "Gathers OneDrive sync status from the business accounts SyncDiagnostics.log.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Status of the sync process", "id": "SyncProgressState", "name": "SyncProgressState", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Timestamp when the log was written for the last time", "id": "Timestamp", "name": "Timestamp", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total amount of size pending to download", "id": "ToDownload", "name": "ToDownload", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total amount of size pending to upload", "id": "ToUpload", "name": "ToUpload", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of files pending to download", "id": "FilesToDownload", "name": "FilesToDownload", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of files pending to upload", "id": "FilesToUpload", "name": "FilesToUpload", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of changes pending to process", "id": "ChangesToProcess", "name": "ChangesToProcess", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of changes pending to send", "id": "ChangesToSend", "name": "ChangesToSend", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Download speed", "id": "DownloadSpeed", "name": "DownloadSpeed", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Upload speed", "id": "UploadSpeed", "name": "UploadSpeed", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Estimated time remaining to finish the sync process", "id": "EstimatedTimeRemaining", "name": "EstimatedTimeRemaining", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether Microsoft Office sync is active on the device", "id": "OfficeSyncActive", "name": "OfficeSyncActive", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether Microsoft Office sync is enabled on the device", "id": "OfficeSyncEnabled", "name": "OfficeSyncEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of failing uploads", "id": "FileFailedUploadCount", "name": "FileFailedUploadCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of warnings during the sync process", "id": "FileInWarningCount", "name": "FileInWarningCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-OneDriveSyncStatus.ps1", "script": ""}}}