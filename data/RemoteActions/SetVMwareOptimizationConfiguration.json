{"id": "Set_VMware_Optimization_Configuration_windows", "name": "Set VMware Optimization Configuration", "description": "Sets changes in the windows registry, scheduled tasks and services based on a number of steps which are listed in a VMware Optimization XML template in order to optimize a target device.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 900, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UNC Path where the XML Optimization file is located. Example\":\" \\\\\\\\server\\\\SharedFolder\\\\my-template.xml\"", "id": "XMLPath", "name": "XMLPath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Type of optimization action that will be processed. Possible values are 'all, registry, service, scheduledtask'", "id": "ActionType", "name": "ActionType", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-VMwareOptimizationConfiguration.ps1", "script": ""}}}