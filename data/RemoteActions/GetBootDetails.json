{"id": "Get_Boot_Details_windows", "name": "Get Boot Details", "description": "Provides detailed and granular information about the Boot time of a Windows 10 device.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Indicates if the tracing has been enabled. The possibles values are (Tracing not enabled, Tracing is missing a provider, Tracing is enabled and data available, Tracing is enabled waiting for restart)", "id": "TracingEnabled", "name": "TracingEnabled", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The type of the boot of the device. Values can be 'normal boot' or 'fast boot'", "id": "BootType", "name": "BootType", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates the time when the last boot started", "id": "LastBootTime", "name": "LastBootTime", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates the time from the moment the kernel is loaded until logonui.exe is started", "id": "OSBootDuration", "name": "OSBootDuration", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates the time from the moment that the user presses the power button until the user credentials are entered", "id": "BootDuration", "name": "BootDuration", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates the time from the moment that the OS starts to load until the desktop is displayed", "id": "MainPathBootDuration", "name": "MainPathBootDuration", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates the time from the moment the user has entered the credentials until the Desktop screen is displayed", "id": "LogonDuration", "name": "LogonDuration", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-BootDetails.ps1", "script": ""}}}