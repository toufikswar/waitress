{"id": "Get_VMware_Optimization_Information_windows", "name": "Get VMware Optimization Information", "description": "Verifies that the optimization steps listed in a VMware Optimization XML template are applied on target devices.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 900, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UNC Path where the XML Optimization file is located. Example\":\" \\\\\\\\server\\\\SharedFolder\\\\my-template.xml\"", "id": "XMLPath", "name": "XMLPath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Indicates how many elements do not match the optimization suggestions provided by the XML", "id": "NonMatchingElementsCount", "name": "NonMatchingElementsCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of the non-matching elements", "id": "NonMatchingElementsRatio", "name": "NonMatchingElementsRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of all the non-matching elements' IDs", "id": "NonMatchingElementsIDs", "name": "NonMatchingElementsIDs", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-VMwareHorizonOptimizationInformation.ps1", "script": ""}}}