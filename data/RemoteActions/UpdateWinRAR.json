{"id": "Update_WinRAR_windows", "name": "Update WinRAR", "description": "In WinRAR versions prior to and including 5.61, a vulnerability when managing ACE files has been discovered. When the filename is manipulated with some patterns, the destination folder is ignored and malicious files could be extracted anywhere without any notice.\nIn order to run a silent execution, campaign can be skipped by providing an empty GUID as input CampaignId. In such case, WinRAR will be closed and updated automatically.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "UID of the campaign to notify user that WinRAR must be closed. Provide an empty GUID to avoid executing this campaign", "id": "CampaignId", "name": "CampaignId", "options": ["4c45af07-b20b-4892-ba8a-435111e85b6a"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user about the finish of the WinRAR update process. Provide an empty GUID to avoid executing this campaign", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["a6997efb-d868-448f-8188-2615a2958da3"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "WinRAR version retrieved after performing the update process", "id": "WinRARVersion", "name": "WinRARVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Update-WinRAR.ps1", "script": ""}}}