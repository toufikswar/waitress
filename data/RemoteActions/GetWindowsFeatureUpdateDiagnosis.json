{"id": "Get_Windows_Feature_Update_Diagnosis_windows", "name": "Get Windows Feature Update Diagnosis", "description": "Executes Microsoft tool SetupDiag.exe, that process Windows Feature update log files and returns a list of possible failure reasons or upgrade confirmation.\nFor further information regarding SetupDiag.exe please visit this [https://docs.microsoft.com/en-us/windows/deployment/upgrade/setupdiag link].", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 1020, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Absolute path to the location of SetupDiag.exe tool on target device. For example \"C:\\temp\\SetupDiag.exe\"", "id": "SetupDiagPath", "name": "SetupDiagPath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Total count of matching rules detected by SetupDiag.exe tool", "id": "TotalMatchingReasonsCount", "name": "TotalMatchingReasonsCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "A list of matching rules with detailed description that may assist with further investigation", "id": "MatchingReasonList", "name": "MatchingReasonList", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WindowsFeatureUpdateDiagnosis.ps1", "script": ""}}}