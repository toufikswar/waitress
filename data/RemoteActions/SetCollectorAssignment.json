{"id": "Set_Collector_Assignment_windows", "name": "Set Collector Assignment", "description": ". ADVANCED SCRIPT\nThis script should be used only by a trained Nexthink professional. \nConfigures Collector Assignment (property 'use_assignment'), and creates self-removing scheduled task executed after 45s delay, which restarts Nexthink Coordinator service in order to apply the change", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading of the Engine. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["60"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Desired configuration of new Collector Assignment feature. Provide (enable/disable) to change the status", "id": "CollectorAssignmentStatus", "name": "CollectorAssignmentStatus", "options": ["disable"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Current status of Collector use_assignment property, possible values are (enable/disable). Default status in Collector v6.20 is 'disable'", "id": "AssignmentStatus", "name": "AssignmentStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Set-CollectorAssigment.ps1", "script": ""}}}