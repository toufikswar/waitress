{"id": "Request_VPN_Connection_for_Compliance_windows", "name": "Request VPN Connection for Compliance", "description": ". Compares last time Computer Group Policies were applied on target device against provided time range. \nBy providing a list of corporate DNS domains, in case of the device being connected to the corporate network the script schedules a Group Policies update with 1 minute of delay. \nIf the device is not in a corporate network, the script launches a campaign to encourage the user to connect to the corporate VPN and then it schedules the Group Policies update with 5 minutes of delay", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Provide values true or false in case you want to force Group Policies to be updated in any case, when the user is connected to corporate network and when it is not", "id": "EnforcePolicyUpdate", "name": "EnforcePolicyUpdate", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "CampaignId to encourage the user to connect the VPN to the corporate network. Empty value is not allowed, in case of you want to force Group Policies update without asking the user, use the EnforcePolicyUpdate parameter", "id": "CampaignId", "name": "CampaignId", "options": ["d7f50034-9401-4448-a588-aaa873d71850"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of corporate DNS names. Example \"dc.nexthink.com, intranet.nexthink.com\"", "id": "CorporateDnsDomains", "name": "CorporateDnsDomains", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days in range of conducted search, must be between (1-180). 1 indicate range 0-24h ago, 2 indicate range 0-48h ago and so on", "id": "DaysSinceLastGPOUpdate", "name": "DaysSinceLastGPOUpdate", "options": ["2"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Whether or not the user is connected to a corporate network based on the provided DNS domains", "id": "CorporateNetwork", "name": "CorporateNetwork", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether or not the user will connect to the VPN to enable Group Policies update", "id": "UserWillConnectToCorporateNetwork", "name": "UserWillConnectToCorporateNetwork", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Request-VPNCompliance.ps1", "script": ""}}}