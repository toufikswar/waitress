{"id": "Set_Collector_Data_over_TCP_windows", "name": "Set Collector Data over TCP", "description": "ADVANCED SCRIPT\nThis script should be used only by a trained Nexthink professional.\nConfigures Collector Data over TCP (property 'data_over_tcp'), and creates self-removing scheduled task executed after 45s delay, which restarts Nexthink Coordinator service in order to apply the change.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading of the Engine. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Desired configuration of new Collector Data over TCP feature. Provide (enable/disable) to change the status", "id": "CollectorDataOverTCPStatus", "name": "CollectorDataOverTCPStatus", "options": ["disable"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-CollectorDataOverTCP.ps1", "script": ""}}}