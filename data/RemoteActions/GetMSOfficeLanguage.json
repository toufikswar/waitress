{"id": "Get_MS_Office_Language_windows", "name": "Get MS Office Language", "description": "Retrieves language information of a Microsoft Office installation, such as the preferred language and the installed ones.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Display language currently in use", "id": "ActiveDisplayLanguage", "name": "ActiveDisplayLanguage", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of display languages installed on the device", "id": "InstalledDisplayLanguages", "name": "InstalledDisplayLanguages", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of editing languages installed on the device", "id": "InstalledEditingLanguages", "name": "InstalledEditingLanguages", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MSOfficeLanguage.ps1", "script": ""}}}