{"id": "Set_Outlook_Plugins_windows", "name": "Set Outlook Plugins", "description": "Enables or disables each Microsoft Office Outlook COM add-in specified in the parameters. The names of the available add-ins can be found by running the 'Get Outlook Plugins' Remote Action.\nCampaign can be skipped by providing an empty GUID as input CampaignId.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "UID of the campaign to notify user that Outlook must be closed. Provide an empty GUID to enable execution without campaign", "id": "CampaignId", "name": "CampaignId", "options": ["18d255ac-f42e-4e31-a4c4-a77067a96d7e"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Enable or disable the desired add-ins. Accepted values are 'enable' and 'disable'", "id": "Action", "name": "Action", "options": ["enable"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of words to be matched with the addins. For example, 'skype' or 'microsoft'", "id": "PluginNames", "name": "PluginNames", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "List status of all Microsoft Outlook add-ins provided in input argument 'PluginName'", "id": "OutlookPluginsConfigured", "name": "OutlookPluginsConfigured", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Set-OutlookPlugins.ps1", "script": ""}}}