{"id": "Start_Application_or_Task_Sequence_windows", "name": "Start Application or Task Sequence", "description": "Triggers any SCCM Task Sequence, application or program, based on its ID.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "ID of the 'Application', 'Program' or 'Task Sequence'", "id": "ID", "name": "ID", "allowCustomValue": true, "options": ["-"], "usedByWindows": true, "usedByMacOs": false}, {"description": "Defines the execution type. Acceptable values are 'Application', 'Program' or 'Task Sequence'", "id": "ExecutionType", "name": "ExecutionType", "allowCustomValue": false, "options": ["Application", "Program", "Task Sequence"], "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Start-TaskSequence.ps1", "script": ""}}}