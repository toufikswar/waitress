{"id": "Get_BitLocker_Information_windows", "name": "Get BitLocker Information", "description": "Returns basic information of BitLocker protection status, including whether volume and key are secured, encryption percentage level, used encryption algorithm, and the protectors used to secure the key.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Indicates the TPM version", "id": "TPMVersion", "name": "TPMVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the TPM chip is present on the device", "id": "TPMPresent", "name": "TPMPresent", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether the volume and its encryption key (if any) are secured", "id": "ProtectionStatus", "name": "ProtectionStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The status of the encryption or decryption on the volume", "id": "ConversionStatus", "name": "ConversionStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The encryption algorithm and key size used on the volume", "id": "EncryptionMethod", "name": "EncryptionMethod", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Lists of protectors used to secure the volume's encryption key", "id": "KeyProtectors", "name": "KeyProtectors", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device has a TPM enabled", "id": "TPMIsEnabled", "name": "TPMIsEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device has a TPM activated", "id": "TPMIsActive", "name": "TPMIsActive", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device has a TPM owned", "id": "TPMIsOwned", "name": "TPMIsOwned", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device has the GPO for AD backup enabled", "id": "ADGPOEnabled", "name": "ADGPOEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device has the system drive on a NTFS file system", "id": "SystemDriveReady", "name": "SystemDriveReady", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-BitLockerInfo.ps1", "script": ""}}}