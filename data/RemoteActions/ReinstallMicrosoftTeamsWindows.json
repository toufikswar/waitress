{"id": "Reinstall_Microsoft_Teams_Windows", "name": "Reinstall Microsoft Teams Windows", "description": "Reinstalls Microsoft Teams to avoid version disparity, broken installed versions or simply because you want the new features offered in new versions.\n'''''Warning:''' This Remote Action simultaneously downloads and installs the latest version of Microsoft Teams on all targeted devices. Please ensure that the available network capacity is appropriate for the number of targeted devices.''", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 900, "inputs": [{"description": "UID of the campaign to notify user that Microsoft Teams must be closed for the reinstallation. Provide an empty GUID to avoid executing this campaign", "id": "CampaignId", "name": "CampaignId", "options": ["541a1111-5330-40a6-a9e3-2468e4903bd9"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user about the finish of the Microsoft Teams reinstallation process. Provide an empty GUID to avoid executing this campaign", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["655ef9e0-542b-45c5-a84b-3bb87a364569"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Invoke-TeamsReinstall.ps1", "script": ""}}}