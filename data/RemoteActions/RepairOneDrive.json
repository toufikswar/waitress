{"id": "Repair_OneDrive_windows", "name": "Repair OneDrive", "description": "Performs a OneDrive repair or reinstallation on the device, mitigating possible sync issues.\n\n'''''Warning:''' This Remote Action simultaneously downloads and installs the latest version of Microsoft OneDrive on all targeted devices. Please ensure that the available network capacity is appropriate for the number of targeted devices.''", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 1080, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Action to be performed on OneDrive. Possible values are Repair or ReInstall", "id": "Action", "name": "Action", "options": ["Repair"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Repair-OneDrive.ps1", "script": ""}}}