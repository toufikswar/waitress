{"id": "Uninstall_application_windows", "name": "Uninstall application", "description": "ADVANCED SCRIPT\nUninstalls applications using Microsoft Software Installer or custom uninstaller, depending on the application.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 300, "inputs": [{"description": "Full application name to be uninstalled", "id": "ApplicationName", "name": "ApplicationName", "allowCustomValue": true, "options": ["-"], "usedByWindows": true, "usedByMacOs": false}, {"description": "If targeting a non-MSI-based application, provide optional options/arguments for the uninstaller. Common option prefixes and letters are allowed, such as /quiet, /noreboot, /s, etc. Depending on the Application vendor, options may be case-sensitive", "id": "UninstallParameters", "name": "UninstallParameters", "allowCustomValue": true, "options": ["-"], "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Uninstall-Application.ps1", "script": ""}}}