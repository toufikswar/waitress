{"id": "Get_MEMCM_Agent_Health_windows", "name": "Get MEMCM Agent Health", "description": "Provides information about different aspects of the MEMCM client. From the client connection to a site to the last update or deployment performed.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "True if the client is correctly assigned to any Management Site", "id": "ClientAssignedToSite", "name": "ClientAssignedToSite", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days since when the last deployment was received", "id": "DaysSinceLastReceivedDeployment", "name": "DaysSinceLastReceivedDeployment", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days since when the policy was last successfully checked/updated", "id": "DaysSinceManagementPointLastUpdateSuccessfully", "name": "DaysSinceManagementPointLastUpdateSuccessfully", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Size of the client cache", "id": "ClientCacheSize", "name": "ClientCacheSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "True if the device's WMI is healthy", "id": "WMIHealthy", "name": "WMIHealthy", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MEMCMAgentHealth.ps1", "script": ""}}}