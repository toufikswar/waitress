{"id": "Enable_Device_Network_Isolation_windows", "name": "Enable Device Network Isolation", "description": "Creates a backup of current Windows Firewall policy in location %ProgramData%\\Nexthink\\RA_Firewall, enables Windows Firewall and configures to block any connection attempt except for required by Nexthink Collector. Once enforced, campaign is called to inform user about enforced restriction. Script is developed for Windows 7 and 10.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "UID of the campaign to be presented after completion of the script", "id": "CampaignId", "name": "CampaignId", "options": ["967c9c3a-e87d-4c17-8cd3-abf7183ec104"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Enable-DeviceNetworkIsolation.ps1", "script": ""}}}