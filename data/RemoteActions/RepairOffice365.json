{"id": "Repair_Office_365_windows", "name": "Repair Office 365", "description": ". Repairs Office 365 by using Office built-in command line tool. \nThe remote action uses a campaign to ask for user permission to perform the repair. \nUser is advised to save all Office applications work in progress, since they will be closed before performing the repair. \nOnce the repair is completed, a campaign is displayed to notify its finalization to the user", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 900, "inputs": [{"description": "UID of the campaign to allow Office repair", "id": "OfficeRepairCampaignId", "name": "OfficeRepairCampaignId", "options": ["b19d23ee-6b25-4827-bf7b-e0775e935bcb"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify Office repair completion", "id": "RepairCompletedCampaignId", "name": "RepairCompletedCampaignId", "options": ["25901d82-1c30-4d91-b241-1c545a3ce2d7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid infrastructure overload. Provide number of seconds", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Repair-Office365.ps1", "script": ""}}}