{"id": "Get_Event_Log_windows", "name": "Get Event Log", "description": "Returns a given number of entries from Windows Event Log and redirects the output to a text file that can be opened directly from the Finder by leveraging a Custom Action.\nOverrides the pre-existing file if the OutputDir is the path of a previous Remote Action execution. If no items matched the event log search criteria, file will not be created or overwritten.\nUseful for troubleshooting issues by analyzing events that occurred in the past.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "The number of events that the Remote Action will obtain (up to 1000)", "id": "NumberOfEvents", "name": "NumberOfEvents", "options": ["10"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Location where the output file will be created in the local machine", "id": "OutputDir", "name": "OutputDir", "options": ["C:\\Windows\\Temp"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "This can be an Application, System or a custom log name", "id": "LogName", "name": "LogName", "options": ["Microsoft-Windows-Diagnostics-Performance/Operational"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The Provider Name registered with the event log as source of entries (Optional). This field accept wildcards. Use '\"\"' (two double-quotes) if you do not wish to filter by 'ProviderName'", "id": "ProviderName", "name": "ProviderName", "options": ["Microsoft-Windows-Diagnostics-Performance"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The severity level associated to the entries in the event log (Optional). The accepted values are Critical, Error, Warning and Information. When a level is specified, the Remote Action returns the events having either that severity level or a higher one. Use '\"' (two double-quotes) if you do not wish to filter by 'SeverityLevel'", "id": "SeverityLevel", "name": "SeverityLevel", "options": ["Warning"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The ID used to define the uniquely identifiable events that a Windows computer can encounter (Optional). This field should be one integer value. Use '\"\"' (two double-quotes) if you do not wish to filter by 'EventID'", "id": "EventId", "name": "EventId", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The latest date a collected event can have (Optional). When this input is provided, the events will be collected from the beginning of time to this date. If no hour is provided, the date will default to '00:00:00' Use '\"\"'. (two double-quotes) if you do not wish to filter by 'ToDate'", "id": "ToDate", "name": "ToDate", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Full path of the output file in the local machine", "id": "OutputFile", "name": "OutputFile", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-EventLog.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KUmV0cmlldmVzIGEgZ2l2ZW4gbnVtYmVyIG9mIGVudHJpZXMgZnJvbSBXaW5kb3dzIEV2ZW50IExvZyBhbmQgd3JpdGVzIGl0IHRvIGEgZ2l2ZW4gb3V0cHV0IHBhdGggaW4gdGhlIGxvY2FsIG1hY2hpbmUuDQoNCi5ERVNDUklQVElPTg0KUmV0dXJucyBhIGdpdmVuIG51bWJlciBvZiBlbnRyaWVzIGZyb20gV2luZG93cyBFdmVudCBMb2cgYW5kIHJlZGlyZWN0cyB0aGUgb3V0cHV0IHRvIGEgdGV4dCBmaWxlIHRoYXQgY2FuIGJlIG9wZW5lZCBkaXJlY3RseSBmcm9tIHRoZSBGaW5kZXIgYnkgbGV2ZXJhZ2luZyBhIEN1c3RvbSBBY3Rpb24uDQpPdmVycmlkZXMgdGhlIHByZS1leGlzdGluZyBmaWxlIGlmIHRoZSBPdXRwdXREaXIgaXMgdGhlIHBhdGggb2YgYSBwcmV2aW91cyBSZW1vdGUgQWN0aW9uIGV4ZWN1dGlvbi4gSWYgbm8gaXRlbXMgbWF0Y2hlZCB0aGUgZXZlbnQgbG9nIHNlYXJjaCBjcml0ZXJpYSwgZmlsZSB3aWxsIG5vdCBiZSBjcmVhdGVkIG9yIG92ZXJ3cml0dGVuLg0KVXNlZnVsIGZvciB0cm91Ymxlc2hvb3RpbmcgaXNzdWVzIGJ5IGFuYWx5emluZyBldmVudHMgdGhhdCBvY2N1cnJlZCBpbiB0aGUgcGFzdC4NCg0KLkZVTkNUSU9OQUxJVFkNCk9uLWRlbWFuZA0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIE51bWJlck9mRXZlbnRzICAgICAgICAgICAgICAgICAgVGhlIG51bWJlciBvZiBldmVudHMgdGhhdCB0aGUgUmVtb3RlIEFjdGlvbiB3aWxsIG9idGFpbiAodXAgdG8gMTAwMCkNCjIgICBPdXRwdXREaXIgICAgICAgICAgICAgICAgICAgICAgIExvY2F0aW9uIHdoZXJlIHRoZSBvdXRwdXQgZmlsZSB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhlIGxvY2FsIG1hY2hpbmUNCjMgICBMb2dOYW1lICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FuIGJlIGFuIEFwcGxpY2F0aW9uLCBTeXN0ZW0gb3IgYSBjdXN0b20gbG9nIG5hbWUNCjQgICBQcm92aWRlck5hbWUgICAgICAgICAgICAgICAgICAgIFRoZSBQcm92aWRlciBOYW1lIHJlZ2lzdGVyZWQgd2l0aCB0aGUgZXZlbnQgbG9nIGFzIHNvdXJjZSBvZiBlbnRyaWVzIChPcHRpb25hbCkuIFRoaXMgZmllbGQgYWNjZXB0IHdpbGRjYXJkcy4gVXNlICciIicgKHR3byBkb3VibGUtcXVvdGVzKSBpZiB5b3UgZG8gbm90IHdpc2ggdG8gZmlsdGVyIGJ5ICdQcm92aWRlck5hbWUnDQo1ICAgU2V2ZXJpdHlMZXZlbCAgICAgICAgICAgICAgICAgICBUaGUgc2V2ZXJpdHkgbGV2ZWwgYXNzb2NpYXRlZCB0byB0aGUgZW50cmllcyBpbiB0aGUgZXZlbnQgbG9nIChPcHRpb25hbCkuIFRoZSBhY2NlcHRlZCB2YWx1ZXMgYXJlIENyaXRpY2FsLCBFcnJvciwgV2FybmluZyBhbmQgSW5mb3JtYXRpb24uIFdoZW4gYSBsZXZlbCBpcyBzcGVjaWZpZWQsIHRoZSBSZW1vdGUgQWN0aW9uIHJldHVybnMgdGhlIGV2ZW50cyBoYXZpbmcgZWl0aGVyIHRoYXQgc2V2ZXJpdHkgbGV2ZWwgb3IgYSBoaWdoZXIgb25lLiBVc2UgJyInICh0d28gZG91YmxlLXF1b3RlcykgaWYgeW91IGRvIG5vdCB3aXNoIHRvIGZpbHRlciBieSAnU2V2ZXJpdHlMZXZlbCcNCjYgICBFdmVudElkICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBJRCB1c2VkIHRvIGRlZmluZSB0aGUgdW5pcXVlbHkgaWRlbnRpZmlhYmxlIGV2ZW50cyB0aGF0IGEgV2luZG93cyBjb21wdXRlciBjYW4gZW5jb3VudGVyIChPcHRpb25hbCkuIFRoaXMgZmllbGQgc2hvdWxkIGJlIG9uZSBpbnRlZ2VyIHZhbHVlLiBVc2UgJyIiJyAodHdvIGRvdWJsZS1xdW90ZXMpIGlmIHlvdSBkbyBub3Qgd2lzaCB0byBmaWx0ZXIgYnkgJ0V2ZW50SUQnDQo3ICAgVG9EYXRlICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgbGF0ZXN0IGRhdGUgYSBjb2xsZWN0ZWQgZXZlbnQgY2FuIGhhdmUgKE9wdGlvbmFsKS4gV2hlbiB0aGlzIGlucHV0IGlzIHByb3ZpZGVkLCB0aGUgZXZlbnRzIHdpbGwgYmUgY29sbGVjdGVkIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aW1lIHRvIHRoaXMgZGF0ZS4gSWYgbm8gaG91ciBpcyBwcm92aWRlZCwgdGhlIGRhdGUgd2lsbCBkZWZhdWx0IHRvICcwMDowMDowMCcgVXNlICciIicuICh0d28gZG91YmxlLXF1b3RlcykgaWYgeW91IGRvIG5vdCB3aXNoIHRvIGZpbHRlciBieSAnVG9EYXRlJw0KDQouT1VUUFVUUw0KSUQgIExhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgICAgICAgIERlc2NyaXB0aW9uDQoxICAgT3V0cHV0RmlsZSAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgICAgICAgICAgRnVsbCBwYXRoIG9mIHRoZSBvdXRwdXQgZmlsZSBpbiB0aGUgbG9jYWwgbWFjaGluZQ0KDQouUkVTVFJJQ1RJT05TDQotIE1heGltdW0gbnVtYmVyIG9mIGNvbGxlY3RlZCBXaW5kb3dzIEV2ZW50IExvZyBlbnRyaWVzIGlzIGxpbWl0ZWQgdG8gMTAwMA0KDQouTk9URVMNCkNvbnRleHQ6ICAgICAgICAgICAgTG9jYWxTeXN0ZW0NClZlcnNpb246ICAgICAgICAgICAgMy4wLjAuMCAtIE5ldyBpbnB1dCAnVG9EYXRlJyBhZGRlZCBhbmQgYnVnIGZpeGVkDQogICAgICAgICAgICAgICAgICAgIDIuMC4wLjAgLSBNYWpvciBjb2RlIHJlZmFjdG9yaW5nIHRvIGNvbXBseSB3aXRoIFF1YWxpdHkgU3RhbmRhcmRzDQogICAgICAgICAgICAgICAgICAgIDEuMC4wLjAgLSBJbml0aWFsIHJlbGVhc2UNCkxhc3QgR2VuZXJhdGVkOiAgICAgMDMgRGVjIDIwMTkgLSAxNjozOTo0Ng0KQ29weXJpZ2h0IChDKSAyMDE5IE5leHRoaW5rIFNBLCBTd2l0emVybGFuZA0KIz4NCg0KIw0KIyBJbnB1dCBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCiMNCnBhcmFtKA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJE51bWJlck9mRXZlbnRzLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJE91dHB1dERpciwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRMb2dOYW1lLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFByb3ZpZGVyTmFtZSwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRTZXZlcml0eUxldmVsLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJEV2ZW50SWQsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kVG9EYXRlDQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVNT1RFX0FDVElPTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dHJlbW90ZWFjdGlvbnMuZGxsIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTUFYX05VTUJFUl9PRl9FVkVOVFMnIC1WYWx1ZSAxMDAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1NFVkVSSVRZX0xFVkVMUycgLVZhbHVlIEB7Q3JpdGljYWwgPSBAKDEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXJyb3IgPSBAKDEsIDIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2FybmluZyA9IEAoMSwgMiwgMykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmZvcm1hdGlvbiA9IEAoMCwgMSwgMiwgMywgNCl9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1NFUEFSQVRPUicgLVZhbHVlICctJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdFVkVOVExPR19GSUxFX1BSRUZJWCcgLVZhbHVlICdldmVudGxvZycgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnRVZFTlRMT0dfRklMRV9FWFRFTlNJT04nIC1WYWx1ZSAnLnR4dCcgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnRVZFTlRMT0dfRklFTERTJyBgDQogICAgLVZhbHVlIEAoJ1RpbWVDcmVhdGVkJywgJ0xldmVsRGlzcGxheU5hbWUnLCAnUHJvdmlkZXJOYW1lJywgJ0lkJywgJ01lc3NhZ2UnKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQojDQojIEludm9rZSBNYWluDQojDQpmdW5jdGlvbiBJbnZva2UtTWFpbiAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgJGV4aXRDb2RlID0gMA0KICAgICRvdXRwdXRGaWxlUGF0aCA9ICctJw0KDQogICAgdHJ5IHsNCiAgICAgICAgQWRkLU5leHRoaW5rUmVtb3RlQWN0aW9uRExMDQogICAgICAgIFRlc3QtUnVubmluZ0FzTG9jYWxTeXN0ZW0NCiAgICAgICAgVGVzdC1JbnB1dFBhcmFtZXRlcnMgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzDQoNCiAgICAgICAgJG91dHB1dEZpbGVQYXRoID0gSW52b2tlLUdldEV2ZW50TG9nIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9IGZpbmFsbHkgew0KICAgICAgICBVcGRhdGUtRW5naW5lT3V0cHV0VmFyaWFibGVzIC1PdXRwdXRGaWxlUGF0aCAkb3V0cHV0RmlsZVBhdGgNCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCiMNCiMgVGVtcGxhdGUgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwgew0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgpKSB7DQogICAgICAgIHRocm93ICdOZXh0aGluayBSZW1vdGUgQWN0aW9uIERMTCBub3QgZm91bmQuICcNCiAgICB9DQogICAgQWRkLVR5cGUgLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgNCn0NCg0KZnVuY3Rpb24gVGVzdC1SdW5uaW5nQXNMb2NhbFN5c3RlbSB7DQogICAgJGN1cnJlbnRJZGVudGl0eSA9IEdldC1DdXJyZW50SWRlbnRpdHkNCiAgICBpZiAoJGN1cnJlbnRJZGVudGl0eSAtbmUgJExPQ0FMX1NZU1RFTV9JREVOVElUWSkgew0KICAgICAgICB0aHJvdyAnVGhpcyBzY3JpcHQgbXVzdCBiZSBydW4gYXMgTG9jYWxTeXN0ZW0uICcNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1DdXJyZW50SWRlbnRpdHkgew0KICAgIHJldHVybiBbc2VjdXJpdHkucHJpbmNpcGFsLndpbmRvd3NpZGVudGl0eV06OkdldEN1cnJlbnQoKS5Vc2VyLlRvU3RyaW5nKCkNCn0NCg0KZnVuY3Rpb24gV3JpdGUtU3RhdHVzTWVzc2FnZSAoW3Bzb2JqZWN0XSRNZXNzYWdlKSB7DQogICAgJGV4Y2VwdGlvbiA9ICRNZXNzYWdlLlRvU3RyaW5nKCkNCg0KICAgIGlmICgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKSB7DQogICAgICAgICR2ZXJzaW9uID0gR2V0LVNjcmlwdFZlcnNpb24NCiAgICAgICAgaWYoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICR2ZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlID0gJHZlcnNpb24gKyAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKScuICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JNZXNzYWdlICsgJGV4Y2VwdGlvbikNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KICAgICRzY3JpcHRDb250ZW50ID0gR2V0LUNvbnRlbnQgJE15SW52b2NhdGlvbi5TY3JpcHROYW1lIHwgT3V0LVN0cmluZw0KICAgIGlmICgkc2NyaXB0Q29udGVudCAtbm90bWF0Y2ggJzwjW1xyXG5dezJ9LlNZTk9QU0lTW15cI1w+XSooLk5PVEVTW15cI1w+XSopXCM+JykgeyByZXR1cm4gfQ0KDQogICAgJGhlbHBCbG9jayA9ICRNYXRjaGVzWzFdLlNwbGl0KFtlbnZpcm9ubWVudF06Ok5ld0xpbmUpDQoNCiAgICBmb3JlYWNoICgkbGluZSBpbiAkaGVscEJsb2NrKSB7DQogICAgICAgIGlmICgkbGluZSAtbWF0Y2ggJ1ZlcnNpb246Jykgew0KICAgICAgICAgICAgcmV0dXJuICRsaW5lLlNwbGl0KCc6JylbMV0uU3BsaXQoJy0nKVswXS5UcmltKCkNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUsIFtpbnRdJExvd2VyTGltaXQsIFtpbnRdJFVwcGVyTGltaXQpIHsNCiAgICBUZXN0LVBhcmFtSXNJbnRlZ2VyIC1QYXJhbU5hbWUgJFBhcmFtTmFtZSAtUGFyYW1WYWx1ZSAkUGFyYW1WYWx1ZQ0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmICgkaW50VmFsdWUgLWx0ICRMb3dlckxpbWl0IC1vciAkaW50VmFsdWUgLWd0ICRVcHBlckxpbWl0KSB7DQogICAgICAgIHRocm93ICJFcnJvciBvbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBtdXN0IGJlIGJldHdlZW4gWyRMb3dlckxpbWl0LCAkVXBwZXJMaW1pdF0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1Jc0ludGVnZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yICRudWxsIC1lcSAkaW50VmFsdWUpIHsNCiAgICAgICAgdGhyb3cgIkVycm9yIG9uIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuICckUGFyYW1WYWx1ZScgaXMgbm90IGFuIGludGVnZXIuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGF0aFJlYWRhYmxlIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUpIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRQYXJhbVZhbHVlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSkgew0KICAgICAgICB0aHJvdyAiRXJyb3IgaW4gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gTG9jYXRpb24gJyRQYXJhbVZhbHVlJyBjYW4gbm90IGJlIGFjY2Vzc2VkIGJ5IHRoZSBjdXJyZW50IGRldmljZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1QYXRoV3JpdGFibGUgKFtzdHJpbmddJFBhdGgpIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1Gb2xkZXIgLVBhdGggJFBhdGgpKSB7DQogICAgICAgIHRocm93ICInJFBhdGgnIGlzIG5vdCBhIHZhbGlkIGZvbGRlciBwYXRoLiAiDQogICAgfQ0KDQogICAgJHRlc3RGaWxlUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkUGF0aCAtQ2hpbGRQYXRoICIkZW52OkNPTVBVVEVSTkFNRS50bXAiDQogICAgJHVzZXIgPSBbc2VjdXJpdHkucHJpbmNpcGFsLndpbmRvd3NpZGVudGl0eV06OkdldEN1cnJlbnQoKS5OYW1lDQogICAgdHJ5IHsNCiAgICAgICAgU2V0LUNvbnRlbnQgLVBhdGggJHRlc3RGaWxlUGF0aCAtVmFsdWUgJzEnIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU3RvcA0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiVGhlIHVzZXIgJyR1c2VyJyBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gd3JpdGUgaW50byBmb2xkZXIgJyRQYXRoJy4gIg0KICAgIH0gZmluYWxseSB7DQogICAgICAgIFJlbW92ZS1JdGVtIC1QYXRoICR0ZXN0RmlsZVBhdGggLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUZvbGRlciAoW3N0cmluZ10kUGF0aCkgew0KICAgIHJldHVybiAoKEdldC1JdGVtIC1QYXRoICRQYXRoKSAtaXMgW2lvLmRpcmVjdG9yeWluZm9dKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVN0cmluZ051bGxPckVtcHR5IChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoKEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFBhcmFtVmFsdWUpKSkgew0KICAgICAgICB0aHJvdyAiJyRQYXJhbU5hbWUnIGNhbm5vdCBiZSBlbXB0eSBub3IgbnVsbC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgcmV0dXJuIC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoKEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFZhbHVlKSkNCn0NCg0KZnVuY3Rpb24gVGVzdC1TdHJpbmdTZXQgKFtzdHJpbmddJFBhcmFtTmFtZSwgJFBhcmFtVmFsdWUsIFtzdHJpbmdbXV0kVmFsaWRWYWx1ZXMpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFBhcmFtVmFsdWUpIC1vciAtbm90ICgkUGFyYW1WYWx1ZSAtaXMgW3N0cmluZ10pKSB7DQogICAgICAgIHRocm93ICJFcnJvciBvbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBpcyBub3QgYSBzdHJpbmcuICINCiAgICB9DQoNCiAgICBmb3JlYWNoICgkdmFsdWUgaW4gJFZhbGlkVmFsdWVzKSB7DQogICAgICAgIGlmICgkUGFyYW1WYWx1ZSAtZXEgJHZhbHVlKSB7IHJldHVybiB9DQogICAgfQ0KDQogICAgJGV4cGVjdGVkVmFsdWVzID0gJFZhbGlkVmFsdWVzIC1qb2luICcsICcNCiAgICB0aHJvdyAiRXJyb3Igb24gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gQWNjZXB0ZWQgdmFsdWVzIGFyZSAkZXhwZWN0ZWRWYWx1ZXMuICINCn0NCg0KZnVuY3Rpb24gVGVzdC1UaW1lIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUpIHsNCiAgICBpZiAoJG51bGwgLWVxICgkUGFyYW1WYWx1ZSAtYXMgW2RhdGV0aW1lXSkpIHsNCiAgICAgICAgdGhyb3cgIkVycm9yIG9uIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuICckUGFyYW1WYWx1ZScgaXMgbm90IGEgdmFsaWQgdGltZS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgKFtwc29iamVjdFtdXSRDb2xsZWN0aW9uKSB7DQogICAgcmV0dXJuICRudWxsIC1lcSAkQ29sbGVjdGlvbiAtb3IgKCRDb2xsZWN0aW9uIHwgTWVhc3VyZS1PYmplY3QpLkNvdW50IC1lcSAwDQp9DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVyIHZhbGlkYXRpb24NCiMNCmZ1bmN0aW9uIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgYA0KICAgICAgICAtUGFyYW1OYW1lICdOdW1iZXJPZkV2ZW50cycgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLk51bWJlck9mRXZlbnRzIGANCiAgICAgICAgLUxvd2VyTGltaXQgMSBgDQogICAgICAgIC1VcHBlckxpbWl0ICRNQVhfTlVNQkVSX09GX0VWRU5UUw0KDQogICAgVGVzdC1QYXRoUmVhZGFibGUgLVBhcmFtTmFtZSAnT3V0cHV0RGlyJyAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLk91dHB1dERpcg0KICAgIFRlc3QtUGF0aFdyaXRhYmxlIC1QYXRoICRJbnB1dFBhcmFtZXRlcnMuT3V0cHV0RGlyDQoNCiAgICBUZXN0LVN0cmluZ051bGxPckVtcHR5IC1QYXJhbU5hbWUgJ0xvZ05hbWUnIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuTG9nTmFtZQ0KDQogICAgaWYgKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5TZXZlcml0eUxldmVsKSB7DQogICAgICAgIFRlc3QtU3RyaW5nU2V0IC1QYXJhbU5hbWUgJ1NldmVyaXR5TGV2ZWwnIGANCiAgICAgICAgICAgICAgICAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5TZXZlcml0eUxldmVsIGANCiAgICAgICAgICAgICAgICAgICAgICAgLVZhbGlkVmFsdWVzIChbc3RyaW5nW11dJFNFVkVSSVRZX0xFVkVMUy5LZXlzKQ0KICAgIH0NCg0KICAgIGlmIChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuVG9EYXRlKSB7DQogICAgICAgIFRlc3QtVGltZSAtUGFyYW1OYW1lICdUb0RhdGUnIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuVG9EYXRlDQogICAgfQ0KfQ0KDQojDQojIEV2ZW50IGxvZyBtYW5hZ2VtZW50DQojDQpmdW5jdGlvbiBJbnZva2UtR2V0RXZlbnRMb2cgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRldmVudExvZ0ZpbHRlcnMgPSBHZXQtRXZlbnRMb2dGaWx0ZXJzIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgICRldmVudExvZ0NvbnRlbnQgPSBHZXQtRXZlbnRMb2dDb250ZW50IC1XaW5FdmVudEZpbHRlcnMgICRldmVudExvZ0ZpbHRlcnMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1NYXhFdmVudHMgJElucHV0UGFyYW1ldGVycy5OdW1iZXJPZkV2ZW50cw0KICAgIGlmIChUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAtQ29sbGVjdGlvbiAkZXZlbnRMb2dDb250ZW50KSB7IHJldHVybiAnLScgfQ0KDQogICAgJG91dHB1dEZpbGVQYXRoID0gR2V0LUV2ZW50TG9nRmlsZU5hbWUgLU91dHB1dERpciAkSW5wdXRQYXJhbWV0ZXJzLk91dHB1dERpcg0KICAgIFdyaXRlLUV2ZW50TG9nVG9GaWxlIC1PdXRwdXRGaWxlUGF0aCAkb3V0cHV0RmlsZVBhdGggLUV2ZW50TG9nQ29udGVudCAkZXZlbnRMb2dDb250ZW50DQoNCiAgICByZXR1cm4gJG91dHB1dEZpbGVQYXRoDQp9DQoNCmZ1bmN0aW9uIEdldC1FdmVudExvZ0ZpbHRlcnMgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRsb2dOYW1lID0gRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkxvZ05hbWUNCiAgICAkcHJvdmlkZXJOYW1lID0gRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLlByb3ZpZGVyTmFtZQ0KICAgICRzZXZlcml0eUxldmVsID0gRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLlNldmVyaXR5TGV2ZWwNCiAgICAkZXZlbnRJZCA9IEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5FdmVudElkDQogICAgJHRvRGF0ZSA9IEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5Ub0RhdGUNCg0KICAgICRmaWx0ZXIgPSBAe0xvZ05hbWUgPSAkbG9nTmFtZX0NCiAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkcHJvdmlkZXJOYW1lKSkgeyAkZmlsdGVyLlByb3ZpZGVyTmFtZSA9ICRwcm92aWRlck5hbWUgfQ0KICAgIGlmICgtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRzZXZlcml0eUxldmVsKSkgeyAkZmlsdGVyLkxldmVsID0gJFNFVkVSSVRZX0xFVkVMUy4kc2V2ZXJpdHlMZXZlbCB9DQogICAgaWYgKC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGV2ZW50SWQpKSB7ICRmaWx0ZXIuSWQgPSAkZXZlbnRJZCB9DQogICAgaWYgKC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJHRvRGF0ZSkpIHsgJGZpbHRlci5FbmRUaW1lID0gJHRvRGF0ZSAtYXMgW2RhdGV0aW1lXSB9DQoNCiAgICByZXR1cm4gJGZpbHRlcg0KfQ0KDQpmdW5jdGlvbiBHZXQtRXZlbnRMb2dDb250ZW50IChbaGFzaHRhYmxlXSRXaW5FdmVudEZpbHRlcnMsIFtzdHJpbmddJE1heEV2ZW50cykgew0KICAgIHRyeSB7DQogICAgICAgIHJldHVybiBHZXQtV2luRXZlbnQgLUZpbHRlckhhc2h0YWJsZSAkV2luRXZlbnRGaWx0ZXJzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTWF4RXZlbnRzICRNYXhFdmVudHMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FcnJvckFjdGlvbiBTdG9wIHwNCiAgICAgICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSAkRVZFTlRMT0dfRklFTERTDQogICAgfSBjYXRjaCB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJ05vIGV2ZW50cyBmb3VuZCBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHNlbGVjdGlvbiBjcml0ZXJpYS4gJw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUV2ZW50TG9nRmlsZU5hbWUoW3N0cmluZ10kT3V0cHV0RGlyKSB7DQogICAgcmV0dXJuICIkT3V0cHV0RGlyXCIgKyAkRVZFTlRMT0dfRklMRV9QUkVGSVggKyAkU0VQQVJBVE9SICsgJGVudjpDb21wdXRlck5hbWUgKyAkRVZFTlRMT0dfRklMRV9FWFRFTlNJT04NCn0NCg0KZnVuY3Rpb24gV3JpdGUtRXZlbnRMb2dUb0ZpbGUgKFtzdHJpbmddJE91dHB1dEZpbGVQYXRoLCBbcHNvYmplY3RbXV0kRXZlbnRMb2dDb250ZW50KSB7DQogICAgJGZvcm1hdHRlZENvbnRlbnQgPSBGb3JtYXQtRXZlbnRMb2dDb250ZW50IC1FdmVudExvZ0NvbnRlbnQgJEV2ZW50TG9nQ29udGVudA0KICAgIFdyaXRlLVRvRmlsZSAtT3V0cHV0RmlsZVBhdGggJE91dHB1dEZpbGVQYXRoIC1GaWxlQ29udGVudCAkZm9ybWF0dGVkQ29udGVudA0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtRXZlbnRMb2dDb250ZW50IChbcHNvYmplY3RbXV0kRXZlbnRMb2dDb250ZW50KSB7DQogICAgW3N0cmluZ1tdXSRyZXN1bHQgPSBAKCkNCiAgICBmb3JlYWNoICgkZXZlbnQgaW4gJEV2ZW50TG9nQ29udGVudCkgew0KICAgICAgICAkcmVzdWx0ICs9IEZvcm1hdC1FdmVudExvZ0xpbmUgLUV2ZW50TG9nRWxlbWVudCAkZXZlbnQNCiAgICB9DQoNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtRXZlbnRMb2dMaW5lIChbcHNvYmplY3RdJEV2ZW50TG9nRWxlbWVudCkgew0KICAgICRyZXN1bHQgPSAnJw0KICAgIGZvcmVhY2ggKCRsb2dGaWVsZCBpbiAkRVZFTlRMT0dfRklFTERTKSB7DQogICAgICAgICRyZXN1bHQgKz0gIiRsb2dGaWVsZCA6ICQoJEV2ZW50TG9nRWxlbWVudC4kbG9nRmllbGQpIiArIFtlbnZpcm9ubWVudF06Ok5ld0xpbmUNCiAgICB9DQoNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBXcml0ZS1Ub0ZpbGUgKFtzdHJpbmddJE91dHB1dEZpbGVQYXRoLCBbc3RyaW5nW11dJEZpbGVDb250ZW50KSB7DQogICAgJEZpbGVDb250ZW50IHwgT3V0LUZpbGUgLUZpbGVQYXRoICRPdXRwdXRGaWxlUGF0aCAtRm9yY2UNCn0NCg0KIw0KIyBOZXh0aGluayBPdXRwdXQgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAoW3N0cmluZ10kT3V0cHV0RmlsZVBhdGgpIHsNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmcoJ091dHB1dEZpbGUnLCAkT3V0cHV0RmlsZVBhdGgpDQp9DQoNCiMNCiMgTWFpbiBzY3JpcHQgZmxvdw0KIw0KW2Vudmlyb25tZW50XTo6RXhpdCgoSW52b2tlLU1haW4gLUlucHV0UGFyYW1ldGVycyAkTXlJbnZvY2F0aW9uLkJvdW5kUGFyYW1ldGVycykpDQojIFNJRyAjIEJlZ2luIHNpZ25hdHVyZSBibG9jaw0KIyBNSUlqNVFZSktvWklodmNOQVFjQ29JSWoxakNDSTlJQ0FRRXhEekFOQmdsZ2hrZ0JaUU1FQWdFRkFEQjVCZ29yDQojIEJnRUVBWUkzQWdFRW9Hc3dhVEEwQmdvckJnRUVBWUkzQWdFZU1DWUNBd0VBQUFRUUg4dzdZRmxMQ0U2M0pOTEcNCiMgS1g3elVRSUJBQUlCQUFJQkFBSUJBQUlCQURBeE1BMEdDV0NHU0FGbEF3UUNBUVVBQkNBZFY0NHBlNkxTSXF3Ug0KIyAvaWxtM0h1YWVKRGdOT296TGp0SnFnWEFjTjRPZ0tDQ0VUc3dnZ1BGTUlJQ3JhQURBZ0VDQWhBQ3JGd21hZ3RBDQojIG00OExlZkt1UmlWM01BMEdDU3FHU0liM0RRRUJCUVVBTUd3eEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUsNCiMgRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhLekFwQmdOVg0KIyBCQU1USWtScFoybERaWEowSUVocFoyZ2dRWE56ZFhKaGJtTmxJRVZXSUZKdmIzUWdRMEV3SGhjTk1EWXhNVEV3DQojIE1EQXdNREF3V2hjTk16RXhNVEV3TURBd01EQXdXakJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU0NCiMgUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRRA0KIyBFeUpFYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNSUlCSWpBTkJna3Foa2lHDQojIDl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4c3psYytiNzFMdmxMUzB5cHQvbGdUL0p6U1ZKdG5FcXc5V1UNCiMgTkdlaUNoeXdYMm1tUUxIRXQ3S1AwSmlrcVVGWk90UGNsTlk4MjNRNHBFck1UU1dDOTBxbFV4STQ3dk5KYlhHUg0KIyBmbU8ycTZaZnc2U0UrRTlpVWI3NHhlemJPSkxqQnVVSWtRekVLRUZWKzh0YWlSVitjZWcxdjAxeUNUMitPamhRDQojIFczY3hHNDJ6eHlSRm1xZXNiUUFVV2dTM3VoUHJVUXFZUVVFaVRtVmhoNEZCVUtaNVhJbmVHVXBYMVM3bVhSeFQNCiMgTEg2WXpSb0dGcVJvYzlBMEJCTmNvWEhUV254VjIxNWs0VGVITUZZRTVSRzBLWUFTOFhrNWlLSUNFWHduWnJlSQ0KIyB0M2p5eWdxb09Lc0taTUsvWmwyVmhNR2hKUjZIWFJwUUN5QVN6RUc3Ymd0Uk9MaEx5d0lEQVFBQm8yTXdZVEFPDQojIEJnTlZIUThCQWY4RUJBTUNBWVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVc1Q3RGFRUDQNCiMgdjBjQjFKZ21HZ2dDNzJOa0s4TXdId1lEVlIwakJCZ3dGb0FVc1Q3RGFRUDR2MGNCMUpnbUdnZ0M3Mk5rSzhNdw0KIyBEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQndhQnBmYzE1eWZQSWhtQmdoWElkc2hSL2dxWjZxL0dESjJRQkJYDQojIHdZcnpldGtSWlk0MStwNzhSYldlMlV3eFM3aVI2RU1zanJONHp0dmpVM2x4MXVVaGxBSGFWWWVhSkdUMmltYk0NCiMgM3B3M3phZzBzV21iSThpZWVDSXJjRVBqVlVjeFlSbnZXTVdGTDA0dzlxQXhGaVBJNStKbEZqUEx2eG9ib0QzNA0KIyB5bDZMTVl0Z0NJa3REQVpjVXJmRStRcVkwUlZmbnhLK2ZEWmpPTDFFcEgva0ppc0t4SmRwRGVtTTRzQVFWN2pJDQojIGRoS1JWZkpJYWRpOEtnSmJEMFRVSURIYjlMcHdKbDJRWUo2OFN4Y0pMN1RMSGtOb3lRY253ZEpjOStvaHVXZ1MNCiMgbkR5Y3Y1NzhnRnliWTgzc1I2b2xKMmVnTi9NQWduMVUxNm40NlM0VG8zZm9IMG93Z2dhdU1JSUZscUFEQWdFQw0KIyBBaEFLR2cwYmNvK1V1TGR3RkNCOEtnckVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Hd3hDekFKQmdOVkJBWVRBbFZUDQojIE1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWoNCiMgYjIweEt6QXBCZ05WQkFNVElrUnBaMmxEWlhKMElFVldJRU52WkdVZ1UybG5ibWx1WnlCRFFTQW9VMGhCTWlrdw0KIyBIaGNOTWpBd09ERTNNREF3TURBd1doY05Nak13T0RJeU1USXdNREF3V2pDQndERVRNQkVHQ3lzR0FRUUJnamM4DQojIEFnRURFd0pEU0RFVk1CTUdDeXNHQVFRQmdqYzhBZ0VDRXdSV1lYVmtNUjB3R3dZRFZRUVBEQlJRY21sMllYUmwNCiMgSUU5eVoyRnVhWHBoZEdsdmJqRVlNQllHQTFVRUJSTVBRMGhGTFRFeE1pNHdNREF1TlRjNU1Rc3dDUVlEVlFRRw0KIyBFd0pEU0RFUE1BMEdBMVVFQnhNR1VISnBiR3g1TVJZd0ZBWURWUVFLRXcxT1JWaFVhR2x1YXlCVExrRXVNUXN3DQojIENRWURWUVFMRXdKU1JERVdNQlFHQTFVRUF4TU5Ua1ZZVkdocGJtc2dVeTVCTGpDQ0FpSXdEUVlKS29aSWh2Y04NCiMgQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxNYnI4azVCNFVUN0U5KzZTa29hM0loeTh2NnZTSFdhNVRmcHRQbg0KIyBCMUpRN0Jnc3c2RURDSS9IcklsY1JSRitmZVhHWVBZYWtKNW5nMWNrTTIydS9GdEFtcmxoYjVWTEZPZU1pdWIvDQojIFI1Y1BRNkloamRDblRpVlByQmJZZXZDbXlIT1RkcWM3NEdGeWdCSytnL1pMWnFPV0pEa2h3VmltVE5UUDFSTy8NCiMgQmVjM0pJM3JyMEN1SXFxR3ZDdC9UdWNQc3pWeXVLUlZpdzVndk1rYXdRdmZ3VDhNbUxmRmtyOThsdDRCbFRaRw0KIyBTa29QdW1FUytiSmRXTVR0ZFRmWklrK0tRdjYwb1dtc1dsSS9MeGUrbTFxSW5DRURMRm5Tc1FJTitIR2thYlc1DQojIFVpRUo2YkRqWkNJQjVQaFFYanYwV1hMVEdacVRjYkJlQkxJQW4wNkw5VElINm9DRzg3UWxyWGR5c09EY2FxaVENCiMgU2tBSjdiWFFzY2ZXc1JIV1ByUnpVMzZBMm1PeERLRVJHeEgzaVBEeGZWOU5BRWI4aGRGVGZ4SlJNYStoRUFxdA0KIyA2cXg0UHVVWmJ1N204VHJoK2ZIS281Uzlid1hrWW1pMFRET05wWUVRbWI3K2xlZmNIcUxOYUlncGZkSzVoLzBWDQojIGxVbHBEd2xOR1hNZkUyYUJoTlI2TDVPOTlyMTFZMnFKQTFPbU1CY1BOb1k3bGpYbWRNSHUxVjkvREUwSks0T1kNCiMgVnhiblVWTXFUZjMvVmdaeEdlY1lNTWZhbWp2NDJzUEZ2TWRhQ2o4QzNONGMwZDRzV09sdEprakNtaTVmS3c5eQ0KIyBVR0x6VXpXT2Z4OXkwYVRRbjlTZC95NjhjQlAvSmwvMWt3czN4UDRPcnN6bDV2QUZlblRRd3RPSExnc29rMEVGDQojIEZ1YUxBZ01CQUFHamdnSDFNSUlCOFRBZkJnTlZIU01FR0RBV2dCU1A2SDd3YlRKcUFBVWp4M0NYYWpxUS8ydnENCiMgMURBZEJnTlZIUTRFRmdRVVVsdW96UENJb1lCeXVENGRWQmNDbGJ3NDYzOHdNZ1lEVlIwUkJDc3dLYUFuQmdncg0KIyBCZ0VGQlFjSUE2QWJNQmtNRjBOSUxWWkJWVVF0UTBoRkxURXhNaTR3TURBdU5UYzVNQTRHQTFVZER3RUIvd1FFDQojIEF3SUhnREFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQXpCN0JnTlZIUjhFZERCeU1EZWdOYUF6aGpGb2RIUncNCiMgT2k4dlkzSnNNeTVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdFp6RXVZM0pzTURlZw0KIyBOYUF6aGpGb2RIUndPaTh2WTNKc05DNWthV2RwWTJWeWRDNWpiMjB2UlZaRGIyUmxVMmxuYm1sdVoxTklRVEl0DQojIFp6RXVZM0pzTUVzR0ExVWRJQVJFTUVJd053WUpZSVpJQVliOWJBTUNNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDANCiMgZEhCek9pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13QndZRlo0RU1BUU13ZmdZSUt3WUJCUVVIQVFFRQ0KIyBjakJ3TUNRR0NDc0dBUVVGQnpBQmhoaG9kSFJ3T2k4dmIyTnpjQzVrYVdkcFkyVnlkQzVqYjIwd1NBWUlLd1lCDQojIEJRVUhNQUtHUEdoMGRIQTZMeTlqWVdObGNuUnpMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVWV1EyOWsNCiMgWlZOcFoyNXBibWREUVMxVFNFRXlMbU55ZERBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWTZJQjRQbk5jemhkZW1WVmlkdFQ4WFQwUCsvRWo5YmJhTUltUjZIRUxUY1lYMTlnamtzRk5VclI2DQojIC9YVVBnYWovblNwbHI1T2ozREo1SkNQbzJBVkt3WTFtVVdTMnVZb1pSaW5FQW9kRGZFU3FmVGlSMTk4MnhwNzINCiMgZ28zNDdHVE1ucHBrMkVwZHVJaW9pK2Rjd2JidzFEZjJuRnpJM0ZjWDdIMVVJUGQ4TTRwM1VBdDVXQ2lWTVBIVw0KIyBYeHJRdDVuOGp4Z0xjdXN2T1JYWnFaT3NkVGw3SFpwc1ZIbkdVWTc4N091MElKeHVGc2lVTTY0YktHenZOcXF0DQojIFl5RnlSOTlFckNUcWRaNjZ1cmFGaWxBZ2pQd2FMRnpKVXc2K2FLL3dXeEtCN1EwcGlJQ3BlWDFYMElMWnU1NkcNCiMgUjIwNlZFY214V0lMWWpRRTJOWmNUKzd2YlV6bU1JSUd2RENDQmFTZ0F3SUJBZ0lRQS9HMDRWODZndkVVbG5peg0KIyAxOWhIWERBTkJna3Foa2lHOXcwQkFRc0ZBREJzTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuDQojIGFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3dLUVlEVlFRREV5SkUNCiMgYVdkcFEyVnlkQ0JJYVdkb0lFRnpjM1Z5WVc1alpTQkZWaUJTYjI5MElFTkJNQjRYRFRFeU1EUXhPREV5TURBdw0KIyBNRm9YRFRJM01EUXhPREV5TURBd01Gb3diREVMTUFrR0ExVUVCaE1DVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEDQojIFpYSjBJRWx1WXpFWk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG4NCiMgYVVObGNuUWdSVllnUTI5a1pTQlRhV2R1YVc1bklFTkJJQ2hUU0VFeUtUQ0NBU0l3RFFZSktvWklodmNOQVFFQg0KIyBCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLZFQrZyt5dFJQeFpNK0VnUHl1Z0RYUnR0ZkhveXlzR2l5czhZU3NPalVTDQojIE9wS1J1bGZreE1uekw2aElQTGZXYnR5WElycFJlV0d2UXk4TnQ1dTBTVEd1UkZnK3BLR1dwNGRQSTM3RGJHVWsNCiMga0ZVK29jb2pmTVZDNmNSNllrV2JmZDVqZE11ZVl5WDRoSnFhclVWUHJuMGZ5QlBMZFp2SjRlR0srQXNNbVBUSw0KIyBQdEJGcW5vZXBWaVROalMrS3k0ck1WaG10RElRbjUzd1VxSHY2RDdUZHZKQVd0ejZhajBiUzYxMnNJeGM3amE2DQojIGcrb3dxRXplOFFzcVdFR0lyZ0NKcXdQUkZvSWdJbmJyWGxRNEVtTGgwbkFrMiswZmNOSmtDWUF0NHJhZHpoL3kNCiMgdXlIemJOdllzeGw3aWxDZjcrdzJDbHlhdDByVENLQTVlZjNkdnowNkNTVUNBd0VBQWFPQ0ExZ3dnZ05VTUJJRw0KIyBBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdEZ1lEVlIwUEFRSC9CQVFEQWdHR01CTUdBMVVkSlFRTU1Bb0dDQ3NHDQojIEFRVUZCd01ETUg4R0NDc0dBUVVGQndFQkJITXdjVEFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXUNCiMgWkdsbmFXTmxjblF1WTI5dE1Fa0dDQ3NHQVFVRkJ6QUNoajFvZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeQ0KIyBkQzVqYjIwdlJHbG5hVU5sY25SSWFXZG9RWE56ZFhKaGJtTmxSVlpTYjI5MFEwRXVZM0owTUlHUEJnTlZIUjhFDQojIGdZY3dnWVF3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXd6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHANCiMgWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dRS0Erb0R5R09taDBkSEE2THk5amNtdzBMbVJwWjJsag0KIyBaWEowTG1OdmJTOUVhV2RwUTJWeWRFaHBaMmhCYzNOMWNtRnVZMlZGVmxKdmIzUkRRUzVqY213d2dnSEVCZ05WDQojIEhTQUVnZ0c3TUlJQnR6Q0NBYk1HQ1dDR1NBR0cvV3dEQWpDQ0FhUXdPZ1lJS3dZQkJRVUhBZ0VXTG1oMGRIQTYNCiMgTHk5M2QzY3VaR2xuYVdObGNuUXVZMjl0TDNOemJDMWpjSE10Y21Wd2IzTnBkRzl5ZVM1b2RHMHdnZ0ZrQmdncg0KIyBCZ0VGQlFjQ0FqQ0NBVlllZ2dGU0FFRUFiZ0I1QUNBQWRRQnpBR1VBSUFCdkFHWUFJQUIwQUdnQWFRQnpBQ0FBDQojIFF3QmxBSElBZEFCcEFHWUFhUUJqQUdFQWRBQmxBQ0FBWXdCdkFHNEFjd0IwQUdrQWRBQjFBSFFBWlFCekFDQUENCiMgWVFCakFHTUFaUUJ3QUhRQVlRQnVBR01BWlFBZ0FHOEFaZ0FnQUhRQWFBQmxBQ0FBUkFCcEFHY0FhUUJEQUdVQQ0KIyBjZ0IwQUNBQVF3QlFBQzhBUXdCUUFGTUFJQUJoQUc0QVpBQWdBSFFBYUFCbEFDQUFVZ0JsQUd3QWVRQnBBRzRBDQojIFp3QWdBRkFBWVFCeUFIUUFlUUFnQUVFQVp3QnlBR1VBWlFCdEFHVUFiZ0IwQUNBQWR3Qm9BR2tBWXdCb0FDQUENCiMgYkFCcEFHMEFhUUIwQUNBQWJBQnBBR0VBWWdCcEFHd0FhUUIwQUhrQUlBQmhBRzRBWkFBZ0FHRUFjZ0JsQUNBQQ0KIyBhUUJ1QUdNQWJ3QnlBSEFBYndCeUFHRUFkQUJsQUdRQUlBQm9BR1VBY2dCbEFHa0FiZ0FnQUdJQWVRQWdBSElBDQojIFpRQm1BR1VBY2dCbEFHNEFZd0JsQUM0d0hRWURWUjBPQkJZRUZJL29mdkJ0TW1vQUJTUEhjSmRxT3BEL2ErclUNCiMgTUI4R0ExVWRJd1FZTUJhQUZMRSt3MmtEK0w5SEFkU1lKaG9JQXU5alpDdkRNQTBHQ1NxR1NJYjNEUUVCQ3dVQQ0KIyBBNElCQVFBWk0wb01nVE0zMjYwMnllVEpPcnUxR3k1Nm91TDBRMElYbnI5T29VM2hzZHZwZ2QyZkFmTGtpTlhwDQojIC9nbjlJY0hzWFlEUzhOYkJROEwrZHl2YitkZVJNODVzMWJJWk8rWXUxc21UVDRoQWpzM2g5WDd4RDhaWlZuTG8NCiMgNjJwQnZSelZSdFY4U2NwbU9CWEJ2K0NSY0hlSDNNbU5NY2tNS2FJejdZM2loODJKalQ4Yi85WGdHcGVMZk5wdA0KIyArNmpHc2pwbWEzc0JzODNZcGpUc0VnR3JsVmlseEZOWHFHRG01d0lTb0xralpLSk51M3lCSldRaHZzL3VRaGhEDQojIGw3dWxOd2F2VGY4bXBVMWhTK3hHUWJobHpyaDVuZ2lXQzRHTWlqdVB4NW1Nb3lwdW1HMWVZY2FXdDRxNVlTMlQNCiMgdU9zT0JFUFg5ZjZtOEdMVW1XcWx3Y0h3WkpTQU1ZSVNBRENDRWZ3Q0FRRXdnWUF3YkRFTE1Ba0dBMVVFQmhNQw0KIyBWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowDQojIExtTnZiVEVyTUNrR0ExVUVBeE1pUkdsbmFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXkNCiMgS1FJUUNob05HM0tQbExpM2NCUWdmQ29LeERBTkJnbGdoa2dCWlFNRUFnRUZBS0NCaERBWUJnb3JCZ0VFQVlJMw0KIyBBZ0VNTVFvd0NLQUNnQUNoQW9BQU1Ca0dDU3FHU0liM0RRRUpBekVNQmdvckJnRUVBWUkzQWdFRU1Cd0dDaXNHDQojIEFRUUJnamNDQVFzeERqQU1CZ29yQmdFRUFZSTNBZ0VWTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0JGekFubHNKVEgNCiMgV01vTDNwV1g2dUJTUHdlMzUwK1NIOXpDRm5WT1Mxa2F3akFOQmdrcWhraUc5dzBCQVFFRkFBU0NBZ0JBQ1FhNA0KIyA3Z2RGdTA0WElOeFBDRS9LdmlmMDU1MklpM3pyVFlKZXQveHZBSmIvUmJXNlpYNTB3SXRWZ0dWTWFHTE5RWFcvDQojIG8yUC9JRytuejl0ODZXek9WMktUMzh3QnQxZVBsdXpWUGpWRjYvNUE2Vjhka054ODNXaGF3bElGVEVXbURmVkcNCiMgd2pYSXJ0ZUtWWUdoWHAyTzRYaFBsUWZKeDJNbnZFZUdPcFlUb3J0WFJpV1NmWXFRRGlRTDJ5anZmU1VkSVpSQw0KIyBwWkVUcVA4cXM1bGxjUi91M3YyQnFZZWEzdGN5dTd4alJmSmlSaXpFck12cW42WHhZQTlTZGVFektnTlRkUjkvDQojIExrdW5LWm1UeUIxSWw5MyswWDJFd29rdGM3NDRyNkVzbGZpYm1uVWo0YURDQzJFTzhEd25RRFoxUmF2RHBhUnQNCiMgZUgzYUNiMDd3VnBQZ3dwdXNpSDNGT1pVTHRSZ2NyWUFZNk53TGxxL3VFR3ZsWVl5OTZTNzdLUnExeFliQjF0Ng0KIyBtUXRsbEYzdk1iQS9IS1cvS3dxNlZub1N3SmpOeUtUZWFLVVNxVERKWFFkY3FyblViQVdGUjY5UjJzNjFqbExEDQojIENVa3g1V3UyRUNCQTkwTlFIaGFMcW96cjZqS2svT1puUmIycVJLS3BHUXdZL0E4TDRpNGxXL2VFbmNwS1B5UzgNCiMgM0U1RG41Z0lWaDU3ZncyQUJXNHZFa05XeFR4cW51c29Ub2FKbFMxV0hIdGdLcmdiQzdhYklqcHA4M2JPWmtjUA0KIyBrdHBRMFhnanhjTzd1MUJDbVBScUdGc0ltaUFLL1VOQ1lPQnhubXJ4SzlGVmxGNlpnUHplRjY4ak5TclJLQkNIDQojIFhOdElNTDNveG9QdlpkM3Q5VjEwK2Jkc1RVdUJuNFpkOU1kR3o2R0NEc2t3Z2c3RkJnb3JCZ0VFQVlJM0F3TUINCiMgTVlJT3RUQ0NEckVHQ1NxR1NJYjNEUUVIQXFDQ0RxSXdnZzZlQWdFRE1ROHdEUVlKWUlaSUFXVURCQUlCQlFBdw0KIyBlQVlMS29aSWh2Y05BUWtRQVFTZ2FRUm5NR1VDQVFFR0NXQ0dTQUdHL1d3SEFUQXhNQTBHQ1dDR1NBRmxBd1FDDQojIEFRVUFCQ0RZWDFXTFdPL3JTVGRTUTlHSzlQSk41S0hDNGMyK1NLZFFacDlxMitJTWNnSVJBT2RYOHo2MlJQWG0NCiMgYmdyRi9CVUFDYmtZRHpJd01qQXdPREU1TVRZek56STVXcUNDQzdzd2dnYUNNSUlGYXFBREFnRUNBaEFFelQrRg0KIyBhSzUyeGh1dy9uRmd6S2R0TUEwR0NTcUdTSWIzRFFFQkN3VUFNSEl4Q3pBSkJnTlZCQVlUQWxWVE1SVXdFd1lEDQojIFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqYjIweE1UQXYNCiMgQmdOVkJBTVRLRVJwWjJsRFpYSjBJRk5JUVRJZ1FYTnpkWEpsWkNCSlJDQlVhVzFsYzNSaGJYQnBibWNnUTBFdw0KIyBIaGNOTVRreE1EQXhNREF3TURBd1doY05NekF4TURFM01EQXdNREF3V2pCTU1Rc3dDUVlEVlFRR0V3SlZVekVYDQojIE1CVUdBMVVFQ2hNT1JHbG5hVU5sY25Rc0lFbHVZeTR4SkRBaUJnTlZCQU1URzFSSlRVVlRWRUZOVUMxVFNFRXkNCiMgTlRZdE1qQXhPUzB4TUMweE5UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU9saw0KIyBOWno2cVpobFpCdmtGOXk0S1RiTVp3bFloVTB3NE1uLzVUczhFU2hRcndjeDRsMEpHTUwyaVl4cENBUWo0SGN0DQojIG5SWGx1T2loYW83LzFLN1NlaGJ2K0VHMUhUbDF3Yzh2cDZ4RmZwUnRyQU1CbVR4aVBuNTYvVVdYTWJUNnQ5bEMNCiMgUHFkVm05OWFUMWdDcURKcEloTytpNEl0eHBpcmE1dTB5ZkpsRVF4MERiTHdDSloweE9peVNLS2hGS1g0K3VHSg0KIyBjRVE3amUvN3BQVER1YjBVTE9zTUtDY2xnS3NRU3hZU1lBdHBJb3hPemNiVnNtVlpJZUI4TEJLTmNBNlBpc3JnDQojIDA5ZXpPWGRRMEVJc0xuck9uR2Q2T0hkVVFQOVBsUVFnMU92SXpvY1VDUDRkZ04zUTV5dDQ2cjhmY01idVFoWlQNCiMgTmtXYlV4bEpZcDE2QXB1VkZLTUNBd0VBQWFPQ0F6Z3dnZ00wTUE0R0ExVWREd0VCL3dRRUF3SUhnREFNQmdOVg0KIyBIUk1CQWY4RUFqQUFNQllHQTFVZEpRRUIvd1FNTUFvR0NDc0dBUVVGQndNSU1JSUJ2d1lEVlIwZ0JJSUJ0akNDDQojIEFiSXdnZ0doQmdsZ2hrZ0JodjFzQndFd2dnR1NNQ2dHQ0NzR0FRVUZCd0lCRmh4b2RIUndjem92TDNkM2R5NWsNCiMgYVdkcFkyVnlkQzVqYjIwdlExQlRNSUlCWkFZSUt3WUJCUVVIQWdJd2dnRldIb0lCVWdCQkFHNEFlUUFnQUhVQQ0KIyBjd0JsQUNBQWJ3Qm1BQ0FBZEFCb0FHa0Fjd0FnQUVNQVpRQnlBSFFBYVFCbUFHa0FZd0JoQUhRQVpRQWdBR01BDQojIGJ3QnVBSE1BZEFCcEFIUUFkUUIwQUdVQWN3QWdBR0VBWXdCakFHVUFjQUIwQUdFQWJnQmpBR1VBSUFCdkFHWUENCiMgSUFCMEFHZ0FaUUFnQUVRQWFRQm5BR2tBUXdCbEFISUFkQUFnQUVNQVVBQXZBRU1BVUFCVEFDQUFZUUJ1QUdRQQ0KIyBJQUIwQUdnQVpRQWdBRklBWlFCc0FIa0FhUUJ1QUdjQUlBQlFBR0VBY2dCMEFIa0FJQUJCQUdjQWNnQmxBR1VBDQojIGJRQmxBRzRBZEFBZ0FIY0FhQUJwQUdNQWFBQWdBR3dBYVFCdEFHa0FkQUFnQUd3QWFRQmhBR0lBYVFCc0FHa0ENCiMgZEFCNUFDQUFZUUJ1QUdRQUlBQmhBSElBWlFBZ0FHa0FiZ0JqQUc4QWNnQndBRzhBY2dCaEFIUUFaUUJrQUNBQQ0KIyBhQUJsQUhJQVpRQnBBRzRBSUFCaUFIa0FJQUJ5QUdVQVpnQmxBSElBWlFCdUFHTUFaUUF1TUFzR0NXQ0dTQUdHDQojIC9Xd0RGVEFmQmdOVkhTTUVHREFXZ0JUMHR1RWdIZjRwcnRMa1lhV3lvaVd5eUJjMWJqQWRCZ05WSFE0RUZnUVUNCiMgVmxNUHdjWUhwMDNYMkc1WGNvQlFUT1RzbnNFd2NRWURWUjBmQkdvd2FEQXlvRENnTG9Zc2FIUjBjRG92TDJOeQ0KIyBiRE11WkdsbmFXTmxjblF1WTI5dEwzTm9ZVEl0WVhOemRYSmxaQzEwY3k1amNtd3dNcUF3b0M2R0xHaDBkSEE2DQojIEx5OWpjbXcwTG1ScFoybGpaWEowTG1OdmJTOXphR0V5TFdGemMzVnlaV1F0ZEhNdVkzSnNNSUdGQmdnckJnRUYNCiMgQlFjQkFRUjVNSGN3SkFZSUt3WUJCUVVITUFHR0dHaDBkSEE2THk5dlkzTndMbVJwWjJsalpYSjBMbU52YlRCUA0KIyBCZ2dyQmdFRkJRY3dBb1pEYUhSMGNEb3ZMMk5oWTJWeWRITXVaR2xuYVdObGNuUXVZMjl0TDBScFoybERaWEowDQojIFUwaEJNa0Z6YzNWeVpXUkpSRlJwYldWemRHRnRjR2x1WjBOQkxtTnlkREFOQmdrcWhraUc5dzBCQVFzRkFBT0MNCiMgQVFFQUxvT2hSQVZLQk9PNU1sTDYyWUh3R3J2NENZMGp1VDNZa3FIbVJoeEtMMjU2UEdOdU54ZWpHcjlZSTdKRA0KIyBuSlNEVGprSnNDem94K0hpek8zTGVXdk8zaU1CUisyVlZJSGdnSHNTc2E4Q2hxazZjMnIrK0ovQmpkRWhqT1FwDQojIGdzT0tDMkFBQXAwZlI4U2Z0QXBvVTM5YUVLYjRJdWI0VTVJeFg5aUNneTF0RTBLdWc4RVFUcVFrOUVlYzNnOGkNCiMgY25kY2YwL3BPWmdyVjVKRTErOXVrOWxEeHdRelkxRTNWcDVIQkJIRG8xaFVJZGppamxiWFNUOVgvQXFmSTE1Nw0KIyA5SlNOM1owYXU5OTZLcWJTUmFaVkRJLzJUSXJ5bHMrSlJ0d3hzcEdRbzE4ek1HQlY5ZnhyTUt5aDdlUkhUak9lDQojIFoyb290VTNDN1Z1WGd2akxxUWhzVXdtMDl6Q0NCVEV3Z2dRWm9BTUNBUUlDRUFxaEpkYldNaHQrUWVRRjJqYVgNCiMgd2hVd0RRWUpLb1pJaHZjTkFRRUxCUUF3WlRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURWtNQ0lHQTFVRUF4TWJSR2xuDQojIGFVTmxjblFnUVhOemRYSmxaQ0JKUkNCU2IyOTBJRU5CTUI0WERURTJNREV3TnpFeU1EQXdNRm9YRFRNeE1ERXcNCiMgTnpFeU1EQXdNRm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRFpYSjBJRWx1WXpFWg0KIyBNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXhNQzhHQTFVRUF4TW9SR2xuYVVObGNuUWdVMGhCDQojIE1pQkJjM04xY21Wa0lFbEVJRlJwYldWemRHRnRjR2x1WnlCRFFUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQNCiMgZ2dFUEFEQ0NBUW9DZ2dFQkFMM1FNdTVMelk5LzNhbTZncG5GT1ZRb1Y3WWpTc1FPQjBVelVSQjkwUGw5VFdoKw0KIyA1N2FnOUkyemlPU1h2Mk1oa0ppL0U3eFgwOFBoZmdqV2FoUUFPUGN1SGp2dXpLYjJNbG4rWDJVLzRKdnI0MFpIDQojIEJocFZmZ3NuZnNDaTlhRGczaUkvRHY5K2xmdnpvN29pUGhpc0VlVHdtUU50TzRWOENkUHVYY2lhQzFUanFBbHgNCiMgYStEUEloQVBkYzl4Y2s0S3JkOUFPbHkzVWVHaGVSVEdUU1FqTUYyODdEeGdhcXd2Qjh6OThPcEgyWWhRWHYxbQ0KIyBibFpoSnltSmhGSG1ndWRHVVAyVUtpeW41SFUrdXBnUGhIK2ZNUlRXcmRYeVpNdDdIZ1hRaEJseUYvRVhCdTg5DQojIHpkWk43d1pDL2FKVEtrK0ZIY1FkUEsvUDJxd1E5ZDJzck9sVy81TUNBd0VBQWFPQ0FjNHdnZ0hLTUIwR0ExVWQNCiMgRGdRV0JCVDB0dUVnSGY0cHJ0TGtZYVd5b2lXeXlCYzFiakFmQmdOVkhTTUVHREFXZ0JSRjY2S3Y5SkxMZ2pFdA0KIyBVWXVucHlHZDgyM0lEekFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTUE0R0ExVWREd0VCL3dRRUF3SUJoakFUDQojIEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjRENEQjVCZ2dyQmdFRkJRY0JBUVJ0TUdzd0pBWUlLd1lCQlFVSE1BR0cNCiMgR0doMGRIQTZMeTl2WTNOd0xtUnBaMmxqWlhKMExtTnZiVEJEQmdnckJnRUZCUWN3QW9ZM2FIUjBjRG92TDJOaA0KIyBZMlZ5ZEhNdVpHbG5hV05sY25RdVkyOXRMMFJwWjJsRFpYSjBRWE56ZFhKbFpFbEVVbTl2ZEVOQkxtTnlkRENCDQojIGdRWURWUjBmQkhvd2VEQTZvRGlnTm9ZMGFIUjBjRG92TDJOeWJEUXVaR2xuYVdObGNuUXVZMjl0TDBScFoybEQNCiMgWlhKMFFYTnpkWEpsWkVsRVVtOXZkRU5CTG1OeWJEQTZvRGlnTm9ZMGFIUjBjRG92TDJOeWJETXVaR2xuYVdObA0KIyBjblF1WTI5dEwwUnBaMmxEWlhKMFFYTnpkWEpsWkVsRVVtOXZkRU5CTG1OeWJEQlFCZ05WSFNBRVNUQkhNRGdHDQojIENtQ0dTQUdHL1d3QUFnUXdLakFvQmdnckJnRUZCUWNDQVJZY2FIUjBjSE02THk5M2QzY3VaR2xuYVdObGNuUXUNCiMgWTI5dEwwTlFVekFMQmdsZ2hrZ0JodjFzQndFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIR1ZFdWxSaDFacA0KIyB6ZS9kMm55cVkzcXplTThHTjBDRTcwdUV2OHJQQXdMOXhhZkREaUJDTEs5Mzh5c2ZEQ0ZhS3JjRk5CMXFycG40DQojIEo2Sm12d21xWU45MnBEcVREL2l5MGRoOEdXTG9Yb0lsSHNTNkhIc3NJZUxXV3l3VU5VTUVhTExiZFFMZ2NzZVkNCiMgMWp4azVSOUlFQmhmaVRoaFRXSkdKSWRqakpGU0xLOHBpZVY0SDlZTEZLV0ExeEpIY0xOMTFaT0ZrMzYya21mNw0KIyBVMkdKcVBWcmxzRDBXR2tOZk1nQnNia29kYmVaWTRVaWpHSEtlWlIrV2Z5TUQrTnZ0UUVtdG15bDdvZFJJZVJZDQojIFlKdTZEQzByYmFMRWZydkVKU3RIQWdoOFNhNFR0dUY4UWtJb3hoaFd6MEUwdG1aZHRuUjc5Vll6SWk4aU5ySkwNCiMgb2txVjJQV21qbEl4Z2dKTk1JSUNTUUlCQVRDQmhqQnlNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTQ0KIyBSR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVRFd0x3WURWUVFEDQojIEV5aEVhV2RwUTJWeWRDQlRTRUV5SUVGemMzVnlaV1FnU1VRZ1ZHbHRaWE4wWVcxd2FXNW5JRU5CQWhBRXpUK0YNCiMgYUs1MnhodXcvbkZnektkdE1BMEdDV0NHU0FGbEF3UUNBUVVBb0lHWU1Cb0dDU3FHU0liM0RRRUpBekVOQmdzcQ0KIyBoa2lHOXcwQkNSQUJCREFjQmdrcWhraUc5dzBCQ1FVeER4Y05NakF3T0RFNU1UWXpOekk1V2pBckJnc3Foa2lHDQojIDl3MEJDUkFDRERFY01Cb3dHREFXQkJRREpiMVFYdHFXTUMzQ0wwK2dIa3dvdmlnMHhUQXZCZ2txaGtpRzl3MEINCiMgQ1FReElnUWdWOWduRkJsTGVCUjJ1aVl2VkVGL3l1TG84WldISkxkMnpHSmNVVjBSeGVVd0RRWUpLb1pJaHZjTg0KIyBBUUVCQlFBRWdnRUFlSC9CWnNra0NlV25uS3ZFajFNK0RCZWo5d3ZRTmo0SDQyeGdFYjF1VEV3b0VuT3BqRlFHDQojIDNFUGNGSlhDVnRjNERJZU5FSTB0MTNXWE9zalAvcHFJOXZPUTM1V3lQQUNVdExUdnl0WTN0VVBtb2tkd0xZanINCiMga1NvZG9SSHRQajRJOERrbkJiMVpYRityWFlzZTNyQTRCd2lkbGk0dU52a0lITHYySTVFVnpRUU9qc3pZS0wweQ0KIyBQNE45YS93RUMwUHRhU01lWGc0VmdMd1EraWhLRWNpcXhUS3NNNjc5S3ZlbzBZN0NWQlg4VmhCNEVuSG1jYVl3DQojIDRNTlhlRndya2E1VmcrdGNMeTdLUm1MZlJIYkxRZTFkOXRxUzFYaUlBYlBpemhLZVkweDhoN2xHTDdoMW9zSVANCiMgajliSGVQMzgreU9WK3E5dTlHLzhZbFFkamoyQXU1VnNaZz09DQojIFNJRyAjIEVuZCBzaWduYXR1cmUgYmxvY2sNCg=="}}}