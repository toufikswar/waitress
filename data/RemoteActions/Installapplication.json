{"id": "Install_application_windows", "name": "Install application", "description": ". Install applications using either the Microsoft Software Installer (MSI) or a custom installer. \nThe Remote Action includes protection layers to provide secure installation method.  That includes verification of the hash of the installer to be used or including the hash of the root CA of the installer within the remote action code. \n\n'''''Warning:''' This Remote Action starts the simultaneous download of the desired installation packages on all targeted devices", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Provide URL or UNC path to retrieve the installer file. Example values: http(s)://domain/folder/installer.exe, \\\\server\\SharedFolder\\winrar-x64-571.exe", "id": "InstallerSource", "name": "InstallerSource", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Provide expected file hash using SHA256 algorithm to verify delivered installer file. E.g. FD820BF82EDBAA4BE20FD3B644A05754D95D71DE60FE79AB983C3318E0697540", "id": "InstallerHash", "name": "InstallerHash", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Provide optional arguments for the installer (either for .MSI or .EXE). Common parameter prefix and letters or numbers are allowed, such as /quiet, /noreboot, /s, /1, etc. Provide \"\" if no arguments are needed", "id": "InstallParameters", "name": "InstallParameters", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Install-Application.ps1", "script": ""}}}