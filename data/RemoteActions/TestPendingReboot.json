{"id": "Test_Pending_Reboot_windows", "name": "Test Pending Reboot", "description": "Script retrieves information if device is pending reboot and the reason. Possible causes covered are as follow:\n    * Computer renaming.\n    * Domain join.\n    * File rename operations.\n    * SCCM Agent.\n    * Software installation.\n    * Windows update.\nIt also retrieves the date and type of the last boot event. Boot types can be the following:\n    * Regular Boot\n    * FastBoot\n    * Resume from Hibernation", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Device is reboot-pending (Yes/No)", "id": "PendingReboot", "name": "PendingReboot", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "All detected reasons for reboot-pending", "id": "PendingRebootReason", "name": "PendingRebootReason", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date when last boot event occurred", "id": "LastBootDate", "name": "LastBootDate", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Type of last boot event (Regular/FastBoot/Resume from Hibernation)", "id": "LastBootType", "name": "LastBootType", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days since last boot", "id": "DaysSinceLastBoot", "name": "DaysSinceLastBoot", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-PendingReboot.ps1", "script": ""}}}