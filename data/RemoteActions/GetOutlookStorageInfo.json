{"id": "Get_Outlook_Storage_Info_windows", "name": "Get Outlook Storage Info", "description": "Obtains the number of PST and OST files a user has connected to Outlook, and their overall size.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Total amount of size the PST files that the current user has connected to Outlook", "id": "PSTOverallSize", "name": "PSTOverallSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of PST files current user has connected to Outlook", "id": "NumberOfPSTFiles", "name": "NumberOfPSTFiles", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of PST files current user has connected to Outlook on a network folder", "id": "NumberOfPSTFilesInNetwork", "name": "NumberOfPSTFilesInNetwork", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of PST files current user has connected to Outlook on a network folder", "id": "PSTFilesInNetworkList", "name": "PSTFilesInNetworkList", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total amount of size of the PST files located in Network folder", "id": "PSTFilesInNetworkOverallSize", "name": "PSTFilesInNetworkOverallSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total amount of size the OST files are taking in the machine. The Outlook Application size calculation may differ from the real file size", "id": "OSTOverallSize", "name": "OSTOverallSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of OST files current user has connected to Outlook", "id": "NumberOfOSTFiles", "name": "NumberOfOSTFiles", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-OutlookStorageInfo.ps1", "script": ""}}}