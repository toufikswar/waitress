{"id": "Set_Boot_Autologger_windows", "name": "Set Boot Autologger", "description": "Enables or disables an Autologger configuration on both Windows 10 and Windows 7. In addition to this, an ETW Trace Session will be enabled on Windows 10 along with the Autologger configuration.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "The action which the Remote Action will perform. The accepted values are 'enable' and 'disable'", "id": "Status", "name": "Status", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The id of the Campaign which will be executed as the final step. Use an empty GUID (00000000-0000-0000-0000-000000000000) or empty value \"\" to avoid the Campaign", "id": "CampaignId", "name": "CampaignId", "options": ["1a5655d9-1ad1-47b6-a02e-69cb63b376d0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-BootAutoLogger.ps1", "script": ""}}}