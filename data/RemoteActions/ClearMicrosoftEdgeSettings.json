{"id": "Clear_Microsoft_Edge_Settings_windows", "name": "Clear Microsoft Edge Settings", "description": "Clears Microsoft Edge files according to the specified parameters. Useful for troubleshooting several browser-related issues.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "UID of the campaign to notify the user that Microsoft Edge must be closed. Provide an empty value to avoid executing this campaign", "id": "ClearEdgeSettingsCampaignId", "name": "ClearEdgeSettingsCampaignId", "options": ["d03adcb6-2c17-4540-b874-a2624ea1602c"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user that Microsoft Edge settings have been cleared and operation is completed. Provide an empty value to avoid executing this campaign", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["0a58e021-35b3-4141-8130-d414eff00e36"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft Edge History (websites visited) and Session Data for each existing profile. Set it to \"true\" for deletion, \"false\" otherwise", "id": "BrowsingHistory", "name": "BrowsingHistory", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft Edge Cache folder for each existing profile. Set it to \"true\" for deletion, \"false\" otherwise", "id": "Cache", "name": "Cache", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft Edge Cookies saved on the device by websites for each existing profile. Set it to \"true\" for deletion, \"false\" otherwise", "id": "Cookies", "name": "Cookies", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft Edge User Data folder on the device. Set it to \"true\" for deletion, \"false\" otherwise", "id": "FullUserDataRemoval", "name": "FullUserDataRemoval", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "List of cleared settings in Microsoft Edge", "id": "EdgeClearedSettings", "name": "EdgeClearedSettings", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Clear-EdgeSettings.ps1", "script": ""}}}