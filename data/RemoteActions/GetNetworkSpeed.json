{"id": "Get_Network_Speed_windows", "name": "Get Network Speed", "description": "Gets information about the speed of the network by measuring the Web RTT against an external URL and a business URL. It also checks whether the connection is metered or not.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The external URL to be checked the Web RTT against", "id": "ExternalURL", "name": "ExternalURL", "options": ["www.google.com"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The time threshold for the external URL Web RTT", "id": "WebRTTThreshold", "name": "WebRTTThreshold", "options": ["600"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The URL in the corporate environment to be checked the Web RTT against", "id": "BusinessURL", "name": "BusinessURL", "options": ["www.google.com"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The time threshold for the business URL Web RTT", "id": "BusinessWebRTTThreshold", "name": "BusinessWebRTTThreshold", "options": ["600"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "URL Web RTT of the last execution", "id": "LastWebRTTToExternalURL", "name": "LastWebRTTToExternalURL", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The average external URL Web RTT measured between all executions within the current day", "id": "AverageWebRTTToExternalURL", "name": "AverageWebRTTToExternalURL", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "All the times that the external URL Web RTT has been above the threshold within the current day", "id": "TimesExternalURLAboveWebRTTThreshold", "name": "TimesExternalURLAboveWebRTTThreshold", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Business URL Web RTT of the last execution", "id": "LastWebRTTToBusinessURL", "name": "LastWebRTTToBusinessURL", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The average business URL Web RTT measured between all executions within the current day", "id": "AverageWebRTTToBusinessURL", "name": "AverageWebRTTToBusinessURL", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "All the times that the business URL Web RTT has been above the threshold within the current day", "id": "TimesBusinessURLAboveWebRTTThreshold", "name": "TimesBusinessURLAboveWebRTTThreshold", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Type of physical connection", "id": "TypeOfConnection", "name": "TypeOfConnection", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether the connection is metered or unrestricted", "id": "MeteredConnection", "name": "MeteredConnection", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-NetworkSpeed.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3BlZWQgb2YgdGhlIG5ldHdvcmsuDQoNCi5ERVNDUklQVElPTg0KR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3BlZWQgb2YgdGhlIG5ldHdvcmsgYnkgbWVhc3VyaW5nIHRoZSBXZWIgUlRUIGFnYWluc3QgYW4gZXh0ZXJuYWwgVVJMIGFuZCBhIGJ1c2luZXNzIFVSTC4gSXQgYWxzbyBjaGVja3Mgd2hldGhlciB0aGUgY29ubmVjdGlvbiBpcyBtZXRlcmVkIG9yIG5vdC4NCg0KLkZVTkNUSU9OQUxJVFkNCk9uLWRlbWFuZA0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIE1heGltdW1EZWxheUluU2Vjb25kcyAgICAgICAgICAgTWF4aW11bSByYW5kb20gZGVsYXkgc2V0IHRvIGF2b2lkIG5ldHdvcmsgb3ZlcmxvYWQuIFByb3ZpZGUgbnVtYmVyIG9mIHNlY29uZHMgbG93ZXIgdGhhbiA2MDANCjIgICBFeHRlcm5hbFVSTCAgICAgICAgICAgICAgICAgICAgIFRoZSBleHRlcm5hbCBVUkwgdG8gYmUgY2hlY2tlZCB0aGUgV2ViIFJUVCBhZ2FpbnN0DQozICAgV2ViUlRUVGhyZXNob2xkICAgICAgICAgICAgICAgICBUaGUgdGltZSB0aHJlc2hvbGQgZm9yIHRoZSBleHRlcm5hbCBVUkwgV2ViIFJUVA0KNCAgIEJ1c2luZXNzVVJMICAgICAgICAgICAgICAgICAgICAgVGhlIFVSTCBpbiB0aGUgY29ycG9yYXRlIGVudmlyb25tZW50IHRvIGJlIGNoZWNrZWQgdGhlIFdlYiBSVFQgYWdhaW5zdA0KNSAgIEJ1c2luZXNzV2ViUlRUVGhyZXNob2xkICAgICAgICAgVGhlIHRpbWUgdGhyZXNob2xkIGZvciB0aGUgYnVzaW5lc3MgVVJMIFdlYiBSVFQNCg0KLk9VVFBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIExhc3RXZWJSVFRUb0V4dGVybmFsVVJMICAgICAgICAgTWlsbGlzZWNvbmQgICAgIFVSTCBXZWIgUlRUIG9mIHRoZSBsYXN0IGV4ZWN1dGlvbg0KMiAgIEF2ZXJhZ2VXZWJSVFRUb0V4dGVybmFsVVJMICAgICAgTWlsbGlzZWNvbmQgICAgIFRoZSBhdmVyYWdlIGV4dGVybmFsIFVSTCBXZWIgUlRUIG1lYXN1cmVkIGJldHdlZW4gYWxsIGV4ZWN1dGlvbnMgd2l0aGluIHRoZSBjdXJyZW50IGRheQ0KMyAgIFRpbWVzRXh0ZXJuYWxVUkxBYm92ZVdlYlJUVFRocmVzaG9sZEludCAgICAgICAgICAgICBBbGwgdGhlIHRpbWVzIHRoYXQgdGhlIGV4dGVybmFsIFVSTCBXZWIgUlRUIGhhcyBiZWVuIGFib3ZlIHRoZSB0aHJlc2hvbGQgd2l0aGluIHRoZSBjdXJyZW50IGRheQ0KNCAgIExhc3RXZWJSVFRUb0J1c2luZXNzVVJMICAgICAgICAgTWlsbGlzZWNvbmQgICAgIEJ1c2luZXNzIFVSTCBXZWIgUlRUIG9mIHRoZSBsYXN0IGV4ZWN1dGlvbg0KNSAgIEF2ZXJhZ2VXZWJSVFRUb0J1c2luZXNzVVJMICAgICAgTWlsbGlzZWNvbmQgICAgIFRoZSBhdmVyYWdlIGJ1c2luZXNzIFVSTCBXZWIgUlRUIG1lYXN1cmVkIGJldHdlZW4gYWxsIGV4ZWN1dGlvbnMgd2l0aGluIHRoZSBjdXJyZW50IGRheQ0KNiAgIFRpbWVzQnVzaW5lc3NVUkxBYm92ZVdlYlJUVFRocmVzaG9sZEludCAgICAgICAgICAgICBBbGwgdGhlIHRpbWVzIHRoYXQgdGhlIGJ1c2luZXNzIFVSTCBXZWIgUlRUIGhhcyBiZWVuIGFib3ZlIHRoZSB0aHJlc2hvbGQgd2l0aGluIHRoZSBjdXJyZW50IGRheQ0KNyAgIFR5cGVPZkNvbm5lY3Rpb24gICAgICAgICAgICAgICAgU3RyaW5nICAgICAgICAgIFR5cGUgb2YgcGh5c2ljYWwgY29ubmVjdGlvbg0KOCAgIE1ldGVyZWRDb25uZWN0aW9uICAgICAgICAgICAgICAgQm9vbCAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbm5lY3Rpb24gaXMgbWV0ZXJlZCBvciB1bnJlc3RyaWN0ZWQNCg0KLkZVUlRIRVIgSU5GT1JNQVRJT04NClRoaXMgUmVtb3RlIEFjdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBleGVjdXRlZCBvbiBwaHlzaWNhbCBkZXZpY2VzLCBub3QgVk1zLiBJZiB0aGUgY29ubmVjdGlvbiBpcyBtYWRlIHZpYSB2aXJ0dWFsIGFkYXB0ZXIgdGhlIFJlbW90ZSBBY3Rpb24gbWlnaHQgZmFpbC4NClRoaXMgUmVtb3RlIEFjdGlvbiB1c2VzIE1pY3Jvc29mdCBXaW5kb3dzIHBlcmZvcm1hbmNlIGNvdW50ZXJzICh1c2luZyAiR2V0LUNvdW50ZXIiIENtZExldCkgdG8gb2J0YWluIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBoeXNpY2FsIG5ldHdvcmsgYWRhcHRlciBpbiBjYXNlIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgY29ubmVjdGVkLiBJbiBzb21lIGNhc2VzLCB0aGUgY291bnRlcnMgbWlnaHQgcHJvdmlkZSBlbXB0eSBkYXRhIGFuZCB0aGVyZSBpcyBhIG5lZWQgdG8gcnVuIHRoZSBSZW1vdGUgQWN0aW9uIG9uIHRoZSBhZmZlY3RlZCBkZXZpY2UocykgYWdhaW4uDQpUaGUgUmVtb3RlIEFjdGlvbiBzdG9yZXMgbmV0d29yayBzcGVlZCBkYXRhIGZvciB0aGUgbGFzdCA3IGRheXMgdW5kZXIgdGhlIGZvbGxvd2luZyBwYXRoIjoiIC0gIiVMT0NBTEFQUERBVEElXFxOZXh0aGlua1xcTmV0d29ya1NwZWVkIg0KVGhlIGZpZWxkcyAiQXZlcmFnZSBXZWIgUlRUIHRvIGJ1c2luZXNzIFVSTCIsICJBdmVyYWdlIFdlYiBSVFQgdG8gZXh0ZXJuYWwgVVJMIiwgIlRpbWVzIGJ1c2luZXNzIFVSTCBhYm92ZSBXZWIgUlRUIHRocmVzaG9sZCIgYW5kICJUaW1lcyBleHRlcm5hbCBVUkwgYWJvdmUgV2ViIFJUVCB0aHJlc2hvbGQiIGFyZSBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBDU1YgZGF0YSBzdG9yZWQgZm9yIHRoZSBzYW1lIGRheSBvZiB0aGUgUmVtb3RlIEFjdGlvbiBleGVjdXRpb24gZGF0ZSwgcGx1cyB0aGUgZGF0YSBvYnRhaW5lZCBkdXJpbmcgY3VycmVudCBleGVjdXRpb24uDQoNCi5OT1RFUw0KQ29udGV4dDogICAgICAgICAgICBJbnRlcmFjdGl2ZVVzZXINClZlcnNpb246ICAgICAgICAgICAgMS4zLjAuMCAtIFJlZmFjdG9yZWQgcGh5c2ljYWwgbmV0d29yayBhZGFwdGVyIGRldGVjdGlvbiBsb2dpYyB0byBiZSBhY2N1cmF0ZQ0KICAgICAgICAgICAgICAgICAgICAxLjIuMC4wIC0gSW1wcm92ZWQgY29ubmVjdGlvbiBwcm9maWxlIG1hdGNoaW5nIGZvciBiZXR0ZXIgcmVzdWx0cw0KICAgICAgICAgICAgICAgICAgICAxLjEuMi4wIC0gRml4ZWQgJ0dldC1Qcm9maWxlSW5mbycgZnVuY3Rpb25hbGl0eSB0byBnZXQgdGhlIGNvcnJlY3QgcHJvZmlsZSBpbmZvcm1hdGlvbg0KICAgICAgICAgICAgICAgICAgICAxLjEuMS4xIC0gVXBkYXRlZCBkZWZhdWx0IHZhbHVlcw0KICAgICAgICAgICAgICAgICAgICAxLjEuMS4wIC0gQ2hhbmdlZCB2YXJpYWJsZSBuYW1lcyBhbmQgYWxsb3dlZCBleGVjdXRpb24gb24gZGV2aWNlcyB3aXRoIHZpcnR1YWwgYWRhcHRlcnMNCiAgICAgICAgICAgICAgICAgICAgMS4xLjAuMCAtIEFsbG93ZWQgJ0V4dGVybmFsVVJMJyBhbmQgJ0J1c2luZXNzVVJMJyB0byBiZSBlbXB0eSAgaW4gY2FzZSBqdXN0IG9uZSBvZiB0aGVtIHdhbnRzIHRvIGJlIHRlc3RlZA0KICAgICAgICAgICAgICAgICAgICAxLjAuMS4wIC0gSW1wcm92ZWQgZXJyb3IgbWVzc2FnZXMNCiAgICAgICAgICAgICAgICAgICAgMS4wLjAuMCAtIEluaXRpYWwgcmVsZWFzZQ0KTGFzdCBHZW5lcmF0ZWQ6ICAgICAyMSBTZXAgMjAyMSAtIDEwOjIyOjAzDQpDb3B5cmlnaHQgKEMpIDIwMjEgTmV4dGhpbmsgU0EsIFN3aXR6ZXJsYW5kDQojPg0KDQojDQojIElucHV0IHBhcmFtZXRlcnMgZGVmaW5pdGlvbg0KIw0KcGFyYW0oDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTWF4aW11bURlbGF5SW5TZWNvbmRzLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJEV4dGVybmFsVVJMLA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFdlYlJUVFRocmVzaG9sZCwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRCdXNpbmVzc1VSTCwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRCdXNpbmVzc1dlYlJUVFRocmVzaG9sZA0KKQ0KIyBFbmQgb2YgcGFyYW1ldGVycyBkZWZpbml0aW9uDQoNCiMNCiMgQ29uc3RhbnRzIGRlZmluaXRpb24NCiMNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ1NWX0RFRkFVTFRfREVMSU1JVEVSJyBgDQogICAgLVZhbHVlICc7JyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0NTVl9ERUZBVUxUX0VOQ09ESU5HJyBgDQogICAgLVZhbHVlICdVVEY4JyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0NTVl9USU1FU1RBTVBfRklFTERfTkFNRScgYA0KICAgIC1WYWx1ZSAnVGltZXN0YW1wJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0RBVEVfT05MWV9GT1JNQVRfREFTSEVTJyBgDQogICAgLVZhbHVlICdkZC1NTS15eXl5JyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0RBVEVfVElNRV9GT1JNQVRfREFTSEVTJyBgDQogICAgLVZhbHVlICdkZC1NTS15eXl5IEhIOm1tOnNzLmZmZicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdFUlJPUl9FWENFUFRJT05fVFlQRScgYA0KICAgIC1WYWx1ZSBAe0Vudmlyb25tZW50ID0gJ1tFbnZpcm9ubWVudCBlcnJvcl0nDQogICAgICAgICAgICAgSW5wdXQgPSAnW0lucHV0IGVycm9yXScNCiAgICAgICAgICAgICBJbnRlcm5hbCA9ICdbSW50ZXJuYWwgZXJyb3JdJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTUFYX1NDUklQVF9ERUxBWV9TRUMnIGANCiAgICAtVmFsdWUgNjAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVNT1RFX0FDVElPTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dHJlbW90ZWFjdGlvbnMuZGxsIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ1RMU18xMicgYA0KICAgIC1WYWx1ZSAzMDcyIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdNQVhfUlRUX1RIUkVTSE9MRCcgYA0KICAgIC1WYWx1ZSAxMDAwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ1NWX05FVFdPUktfU1BFRURfREFUQV9GSUxFTkFNRScgYA0KICAgIC1WYWx1ZSAnbnh0X25ldHdvcmtfc3BlZWRfZGF0YV9hZ2dyZWdhdGVkLmNzdicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ1NWX05FVFdPUktfU1BFRURfREFUQV9QQVRIJyBgDQogICAgLVZhbHVlIChKb2luLVBhdGggLVBhdGggJGVudjpMb2NhbEFwcERhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgIC1DaGlsZFBhdGggIk5leHRoaW5rXE5ldHdvcmtTcGVlZFwkQ1NWX05FVFdPUktfU1BFRURfREFUQV9GSUxFTkFNRSIpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NTVl9GSUxURVJfQllfTEFTVF9EQVlTJyBgDQogICAgLVZhbHVlIDcgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ1NWX1VSTF9SVFRfRklFTEROQU1FJyBgDQogICAgLVZhbHVlICdVUkxSVFQnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NTVl9CVVNJTkVTU19VUkxfUlRUX0ZJRUxETkFNRScgYA0KICAgIC1WYWx1ZSAnQnVzaW5lc3NVUkxSVFQnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnTkVUV09SS19BREFQVEVSX0NPVU5URVJfSUQnIGANCiAgICAtVmFsdWUgMTgyMCBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdCWVRFU19QRVJfU0VDT05EX0NPVU5URVJfSUQnIGANCiAgICAtVmFsdWUgMzg4IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUEVSRl9DT1VOVEVSX05BTUVTX0NPREUnIGANCiAgICAtVmFsdWUgJ1tEbGxJbXBvcnQoInBkaC5kbGwiLCBTZXRMYXN0RXJyb3I9dHJ1ZSwgQ2hhclNldD1DaGFyU2V0LlVuaWNvZGUpXSBwdWJsaWMgc3RhdGljIGV4dGVybiBVSW50MzIgUGRoTG9va3VwUGVyZk5hbWVCeUluZGV4KHN0cmluZyBzek1hY2hpbmVOYW1lLCB1aW50IGR3TmFtZUluZGV4LCBTeXN0ZW0uVGV4dC5TdHJpbmdCdWlsZGVyIHN6TmFtZUJ1ZmZlciwgcmVmIHVpbnQgcGNjaE5hbWVCdWZmZXJTaXplKTsnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ09VTlRFUl9OQU1FX0NIQVJBQ1RFUlNfUkVQTEFDRScgYA0KICAgIC1WYWx1ZSBAeycoJyA9ICdbJw0KICAgICAgICAgICAgICcpJyA9ICddJw0KICAgICAgICAgICAgICcjJyA9ICcnDQogICAgICAgICAgICAgJ3wnID0gJycNCiAgICAgICAgICAgICAnLycgPSAnJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KIyBBcyBkb2N1bWVudGVkIGluIGh0dHBzOi8vd3d3LnBvd2Vyc2hlbGxtYWdhemluZS5jb20vMjAxMy8wNC8wNC9wc3RpcC1kZXRlY3Rpbmctd2ktZmktYWRhcHRlcnMvDQpOZXctVmFyaWFibGUgLU5hbWUgJ1dJRklfTUVESUFfVFlQRVMnIGANCiAgICAtVmFsdWUgQHsxID0gJHRydWUNCiAgICAgICAgICAgICA5ID0gJHRydWUNCiAgICAgICAgICAgICAxMiA9ICR0cnVlfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdDQUJMRV9NRURJQV9UWVBFUycgYA0KICAgIC1WYWx1ZSBAezIgPSAkdHJ1ZQ0KICAgICAgICAgICAgIDExID0gJHRydWUNCiAgICAgICAgICAgICAxNCA9ICR0cnVlDQogICAgICAgICAgICAgMTcgPSAkdHJ1ZQ0KICAgICAgICAgICAgIDE4ID0gJHRydWV9IGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ01PQklMRV9NRURJQV9UWVBFUycgYA0KICAgIC1WYWx1ZSBAezggPSAkdHJ1ZX0gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdXSUZJX01FRElBX05BTUUnIGANCiAgICAtVmFsdWUgJ1dpRmknIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0NBQkxFX01FRElBX05BTUUnIGANCiAgICAtVmFsdWUgJ0NhYmxlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdNT0JJTEVfTUVESUFfTkFNRScgYA0KICAgIC1WYWx1ZSAnTW9iaWxlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ1VOS09XTl9NRURJQV9OQU1FJyBgDQogICAgLVZhbHVlICdVbmtub3duJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQojIEFzIGRvY3VtZW50ZWQgaW4gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdXdwL2FwaS93aW5kb3dzLm5ldHdvcmtpbmcuY29ubmVjdGl2aXR5Lm5ldHdvcmtjb3N0dHlwZT92aWV3PXdpbnJ0LTE5MDQxDQpOZXctVmFyaWFibGUgLU5hbWUgJ01FVEVSRURfQ09TVF9WQUxVRVMnIGANCiAgICAtVmFsdWUgKEB7MiA9ICR0cnVlDQogICAgICAgICAgICAgIDMgPSAkdHJ1ZX0pIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQoNCiMNCiMgSW52b2tlIE1haW4NCiMNCmZ1bmN0aW9uIEludm9rZS1NYWluIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICAkZXhpdENvZGUgPSAwDQogICAgJG91dHB1dCA9IEluaXRpYWxpemUtT3V0cHV0DQoNCiAgICB0cnkgew0KICAgICAgICBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwNCg0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0ludGVyYWN0aXZlVXNlcg0KICAgICAgICBUZXN0LVJ1bm5pbmdPbldpbmRvd3MxMA0KICAgICAgICBUZXN0LUlucHV0UGFyYW1ldGVycyAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCg0KICAgICAgICBXYWl0LVJhbmRvbVRpbWUgLU1heGltdW1EZWxheUluU2Vjb25kcyAkSW5wdXRQYXJhbWV0ZXJzLk1heGltdW1EZWxheUluU2Vjb25kcw0KICAgICAgICBVcGRhdGUtTmV0d29ya1NwZWVkIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycyAtT3V0cHV0ICRvdXRwdXQNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgV3JpdGUtU3RhdHVzTWVzc2FnZSAtTWVzc2FnZSAkXw0KICAgICAgICAkZXhpdENvZGUgPSAxDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAtT3V0cHV0ICRvdXRwdXQNCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCiMNCiMgVGVtcGxhdGUgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwgew0KDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUkVNT1RFX0FDVElPTl9ETExfUEFUSCkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBOZXh0aGluayBSZW1vdGUgQWN0aW9uIERMTCBub3QgZm91bmQuICINCiAgICB9DQogICAgQWRkLVR5cGUgLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgNCn0NCg0KZnVuY3Rpb24gVGVzdC1SdW5uaW5nQXNJbnRlcmFjdGl2ZVVzZXIgew0KDQogICAgaWYgKENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgbXVzdCBiZSBydW4gYXMgSW50ZXJhY3RpdmVVc2VyLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maXJtLUN1cnJlbnRVc2VySXNMb2NhbFN5c3RlbSB7DQoNCiAgICAkY3VycmVudElkZW50aXR5ID0gR2V0LUN1cnJlbnRJZGVudGl0eQ0KICAgIHJldHVybiAkY3VycmVudElkZW50aXR5IC1lcSAkTE9DQUxfU1lTVEVNX0lERU5USVRZDQp9DQoNCmZ1bmN0aW9uIEdldC1DdXJyZW50SWRlbnRpdHkgew0KDQogICAgcmV0dXJuIFtzZWN1cml0eS5wcmluY2lwYWwud2luZG93c2lkZW50aXR5XTo6R2V0Q3VycmVudCgpLlVzZXIuVG9TdHJpbmcoKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVJ1bm5pbmdPbldpbmRvd3MxMCB7DQoNCiAgICAkT1NWZXJzaW9uID0gKEdldC1PU1ZlcnNpb24pIC1hcyBbdmVyc2lvbl0NCiAgICBpZiAoLW5vdCAoJE9TVmVyc2lvbikpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBjb3VsZCBub3QgcmV0dXJuIE9TIHZlcnNpb24uICINCiAgICB9DQogICAgaWYgKCRPU1ZlcnNpb24uTWFqb3IgLW5lIDEwKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgaXMgY29tcGF0aWJsZSB3aXRoIFdpbmRvd3MgMTAgb25seS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LU9TVmVyc2lvbiB7DQoNCiAgICByZXR1cm4gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfT3BlcmF0aW5nU3lzdGVtIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsdGVyICdQcm9kdWN0VHlwZSA9IDEnIC1FcnJvckFjdGlvbiBTdG9wIHwgYA0KICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgVmVyc2lvbg0KfQ0KDQpmdW5jdGlvbiBXYWl0LVJhbmRvbVRpbWUgKFtpbnRdJE1heGltdW1EZWxheUluU2Vjb25kcykgew0KICAgIGlmICgkTWF4aW11bURlbGF5SW5TZWNvbmRzIC1ndCAwKSB7DQogICAgICAgICRzZWNvbmRzID0gR2V0LVJhbmRvbSAtTWluaW11bSAwIC1NYXhpbXVtICRNYXhpbXVtRGVsYXlJblNlY29uZHMNCiAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJHNlY29uZHMNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFdyaXRlLVN0YXR1c01lc3NhZ2UgKFtwc29iamVjdF0kTWVzc2FnZSkgew0KICAgICRleGNlcHRpb25NZXNzYWdlID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJHZlcnNpb24gPSBHZXQtU2NyaXB0VmVyc2lvbg0KICAgICAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICRzY3JpcHRWZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlTGluZSA9ICRzY3JpcHRWZXJzaW9uICsgIkxpbmUgJyQoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlciknOiAiDQogICAgfQ0KDQogICAgJGhvc3QudWkuV3JpdGVFcnJvckxpbmUoJGVycm9yTWVzc2FnZUxpbmUgKyAkZXhjZXB0aW9uTWVzc2FnZSkNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KDQogICAgJHNjcmlwdENvbnRlbnQgPSBHZXQtQ29udGVudCAkTXlJbnZvY2F0aW9uLlNjcmlwdE5hbWUgfCBPdXQtU3RyaW5nDQogICAgaWYgKCRzY3JpcHRDb250ZW50IC1ub3RtYXRjaCAnPCNbXHJcbl17Mn0uU1lOT1BTSVNbXlwjXD5dKiguTk9URVNbXlwjXD5dKilcIz4nKSB7IHJldHVybiB9DQoNCiAgICAkaGVscEJsb2NrID0gJE1hdGNoZXNbMV0uU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkNCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRoZWxwQmxvY2spIHsNCiAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCAnVmVyc2lvbjonKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpbmUuU3BsaXQoJzonKVsxXS5TcGxpdCgnLScpWzBdLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgcmV0dXJuIC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoKEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFZhbHVlKSkNCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVVSTCAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgaWYgKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJFBhcmFtVmFsdWUpIHsNCiAgICAgICAgJHVyaSA9ICRQYXJhbVZhbHVlIC1hcyBbdXJpXQ0KICAgICAgICBpZiAoJG51bGwgLW5lICR1cmkgLWFuZCAkdXJpLklzV2VsbEZvcm1lZE9yaWdpbmFsU3RyaW5nKCkpIHsgcmV0dXJuIH0NCiAgICB9DQoNCiAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW5wdXQpIFBhcmFtZXRlciAnJFBhcmFtTmFtZScgd2l0aCB2YWx1ZSAnJFBhcmFtVmFsdWUnIGlzIG5vdCBhIGNvcnJlY3QgVVJMIGZvcm1hdC4gIg0KfQ0KDQpmdW5jdGlvbiBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSwgW2ludF0kTG93ZXJMaW1pdCwgW2ludF0kVXBwZXJMaW1pdCkgew0KICAgIFRlc3QtUGFyYW1Jc0ludGVnZXIgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIC1QYXJhbVZhbHVlICRQYXJhbVZhbHVlDQogICAgJGludFZhbHVlID0gJFBhcmFtVmFsdWUgLWFzIFtpbnRdDQogICAgaWYgKCRpbnRWYWx1ZSAtbHQgJExvd2VyTGltaXQgLW9yICRpbnRWYWx1ZSAtZ3QgJFVwcGVyTGltaXQpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBtdXN0IGJlIGJldHdlZW4gWyRMb3dlckxpbWl0LCAkVXBwZXJMaW1pdF0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1Jc0ludGVnZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yICRudWxsIC1lcSAkaW50VmFsdWUpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAnJFBhcmFtVmFsdWUnIGlzIG5vdCBhbiBpbnRlZ2VyLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAoW3Bzb2JqZWN0W11dJENvbGxlY3Rpb24pIHsNCiAgICByZXR1cm4gJG51bGwgLWVxICRDb2xsZWN0aW9uIC1vciAoJENvbGxlY3Rpb24gfCBNZWFzdXJlLU9iamVjdCkuQ291bnQgLWVxIDANCn0NCg0KZnVuY3Rpb24gR2V0LU9yZGVyZWREYXRhRnJvbUNzdkZpbGUgKFtzdHJpbmddJFBhdGgsIFtzdHJpbmddJERlbGltaXRlciwgW3N0cmluZ10kRmllbGQsIFtzdHJpbmddJE9yZGVyKSB7DQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCkpIHsgcmV0dXJuIH0NCg0KICAgICRvcmRlcmluZ1NldCA9IEB7J2FzYycgPSAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgJ2Rlc2MnID0gJG51bGx9DQoNCiAgICAkY3N2RGF0YSA9IEltcG9ydC1Dc3YgLVBhdGggJFBhdGggLURlbGltaXRlciAkRGVsaW1pdGVyDQoNCiAgICBpZiAoJG9yZGVyaW5nU2V0LkNvbnRhaW5zS2V5KCRPcmRlci5Ub0xvd2VyKCkpKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoJE9yZGVyIC1lcSAnYXNjJykgew0KICAgICAgICAgICAgICAgICRjc3ZEYXRhID0gJGNzdkRhdGEgfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgJEZpZWxkDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICRjc3ZEYXRhID0gJGNzdkRhdGEgfCBTb3J0LU9iamVjdCAtUHJvcGVydHkgJEZpZWxkIC1EZXNjZW5kaW5nDQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBVbmFibGUgdG8gc29ydC4gQ2hlY2sgdGhhdCB0aGUgZmlsZSBpcyBhIGNzdi4gIg0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBPcmRlcmluZyB2YWx1ZSAnJE9yZGVyJyBub3QgYWxsb3dlZC4gQWxsb3dlZCB2YWx1ZXMgYXJlOiAkKCRvcmRlcmluZ1NldC5LZXlzIC1qb2luICcsICcpLiAiDQogICAgfQ0KDQogICAgcmV0dXJuICRjc3ZEYXRhDQp9DQoNCmZ1bmN0aW9uIEdldC1Dc3ZEYXRhRmlsdGVyZWRCeURhdGUgKFtvYmplY3RbXV0kQ3N2RGF0YSwgW2RhdGV0aW1lXSRTaW5jZURhdGUpIHsNCiAgICBbb2JqZWN0W11dJGRhdGFGaWx0ZXJlZCA9IEAoKQ0KICAgIGZvcmVhY2ggKCRvYmogaW4gJENzdkRhdGEpIHsNCiAgICAgICAgW2RhdGV0aW1lXSRvYmplY3REYXRlID0gRm9ybWF0LURhdGUgLURhdGVTdHJpbmcgJG9iai4kQ1NWX1RJTUVTVEFNUF9GSUVMRF9OQU1FIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLURhdGVGb3JtYXQgJERBVEVfVElNRV9GT1JNQVRfREFTSEVTDQogICAgICAgIGlmICgkb2JqZWN0RGF0ZSAtZ2UgJFNpbmNlRGF0ZSkgeyAkZGF0YUZpbHRlcmVkICs9ICRvYmogfQ0KICAgIH0NCiAgICByZXR1cm4gJGRhdGFGaWx0ZXJlZA0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtRGF0ZSAoW3N0cmluZ10kRGF0ZVN0cmluZywgW3N0cmluZ10kRGF0ZUZvcm1hdCkgew0KICAgIHRyeSB7DQogICAgICAgIHJldHVybiAoW2RhdGV0aW1lXTo6UGFyc2VFeGFjdCgkRGF0ZVN0cmluZywgJERhdGVGb3JtYXQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZ2xvYmFsaXphdGlvbi5jdWx0dXJlaW5mb106OkludmFyaWFudEN1bHR1cmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZ2xvYmFsaXphdGlvbi5kYXRldGltZXN0eWxlc106Ok5vbmUpKQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpICckRGF0ZUZvcm1hdCcgaXMgYW4gaW52YWxpZCBkYXRlIGZvcm1hdCBmb3IgJyREYXRlU3RyaW5nJyBpbnB1dCBkYXRlLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBTZXQtU2VjdXJpdHlQcm90b2NvbCB7DQoNCiAgICBbbmV0LnNlcnZpY2Vwb2ludG1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW2VudW1dOjpUb09iamVjdChbbmV0LnNlY3VyaXR5cHJvdG9jb2x0eXBlXSwgJFRMU18xMikNCn0NCg0KZnVuY3Rpb24gR2V0LVRvZGF5TWlkTmlnaHREYXRlIHsNCg0KICAgICRkYXRlT25seSA9IChHZXQtRGF0ZSAtRm9ybWF0ICREQVRFX09OTFlfRk9STUFUX0RBU0hFUykNCiAgICByZXR1cm4gKEZvcm1hdC1EYXRlIC1EYXRlU3RyaW5nICIkZGF0ZU9ubHkgMDA6MDA6MDAuMDAwIiBgDQogICAgICAgICAgICAgICAgICAgICAgICAtRGF0ZUZvcm1hdCAkREFURV9USU1FX0ZPUk1BVF9EQVNIRVMpDQp9DQoNCmZ1bmN0aW9uIEdldC1BdmVyYWdlRnJvbUNzdkRhdGEgKFtzdHJpbmddJEZpZWxkTmFtZSwgW29iamVjdFtdXSRDc3ZEYXRhLCBbYm9vbF0kRGlzY2FyZFplcm89JGZhbHNlKSB7DQogICAgW29iamVjdFtdXSRpdGVtc1RvU3VtID0gJENzdkRhdGEgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAkRmllbGROYW1lIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAkdG90YWwgPSAwDQogICAgJGNvdW50ID0gJGl0ZW1zVG9TdW0uQ291bnQNCiAgICBpZiAoVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgLUNvbGxlY3Rpb24gJGl0ZW1zVG9TdW0pIHsgcmV0dXJuICR0b3RhbCB9DQogICAgaWYgKCREaXNjYXJkWmVybykgew0KICAgICAgICAkY291bnQgPSAwDQogICAgICAgIGZvcmVhY2ggKCRpdGVtIGluICRpdGVtc1RvU3VtKSB7DQogICAgICAgICAgICAkaW50VmFsdWUgPSAkaXRlbSAtYXMgW2ludF0NCiAgICAgICAgICAgIGlmICgkaW50VmFsdWUgLW5lIDApIHsNCiAgICAgICAgICAgICAgICAkdG90YWwgKz0gJGludFZhbHVlDQogICAgICAgICAgICAgICAgJGNvdW50ICs9IDENCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoJGNvdW50IC1lcSAwKSB7IHJldHVybiAwIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBmb3JlYWNoICgkaXRlbSBpbiAkaXRlbXNUb1N1bSkgeyAkdG90YWwgKz0gKCRpdGVtIC1hcyBbaW50XSkgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkdG90YWwgLyAkY291bnQNCn0NCg0KZnVuY3Rpb24gR2V0LUNvdW50RnJvbUNzdkRhdGEgKFtzdHJpbmddJEZpZWxkTmFtZSwgW3N0cmluZ10kT3BlcmF0b3I9J2VxJywgW3Bzb2JqZWN0XSRNYXRjaENvdW50VmFsdWUsIFtvYmplY3RbXV0kQ3N2RGF0YSkgew0KICAgICRjb3VudCA9IDANCiAgICBpZiAoKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJE9wZXJhdG9yKSAtYW5kICgkbnVsbCAtbmUgJE1hdGNoQ291bnRWYWx1ZSkpIHsNCiAgICAgICAgJHR5cGUgPSAkTWF0Y2hDb3VudFZhbHVlLkdldFR5cGUoKS5GdWxsTmFtZQ0KICAgICAgICBpZiAoKCR0eXBlIC1lcSAnU3lzdGVtLlN0cmluZycpIC1hbmQgKC1ub3QgKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJE1hdGNoQ291bnRWYWx1ZSkpKSB7IHJldHVybiAkY291bnQgfQ0KICAgICAgICBpZiAoKCRudWxsIC1uZSAkQ3N2RGF0YSkgLW9yICgkQ3N2RGF0YS5Db3VudCAtbmUgMCkpIHsNCiAgICAgICAgICAgICRjb21wYXJpc29uU2V0ID0gQHsnZXEnID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmUnID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGUnID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2UnID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbHQnID0gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ3QnID0gJG51bGx9DQoNCiAgICAgICAgICAgIGlmICgtbm90ICgkY29tcGFyaXNvblNldC5Db250YWluc0tleSgkT3BlcmF0b3IuVG9Mb3dlcigpKSkpIHsNCiAgICAgICAgICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpIE9wZXJhdG9yIHZhbHVlICRPcGVyYXRvciBub3QgYWxsb3dlZC4gVmFsaWQgdmFsdWVzIGFyZTogJCgkb3JkZXJpbmdTZXQuS2V5cyAtam9pbiAnICcpLiAiDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRwaXBlID0gImAkQ3N2RGF0YSINCiAgICAgICAgICAgICRzZWxlY3RPYmplY3QgPSBbc3RyaW5nXTo6RW1wdHkNCiAgICAgICAgICAgICRjb21wYXJpc29uID0gW3N0cmluZ106OkVtcHR5DQogICAgICAgICAgICAkZHluYW1pY1R5cGUgPSAkbnVsbA0KICAgICAgICAgICAgc3dpdGNoICgkdHlwZSkgew0KICAgICAgICAgICAgICAgICdTeXN0ZW0uU3RyaW5nJyB7DQogICAgICAgICAgICAgICAgICAgICRjb21wYXJpc29uID0gImAkIiArICJfLiRGaWVsZE5hbWUgLSRPcGVyYXRvciAnJE1hdGNoQ291bnRWYWx1ZSciDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICdTeXN0ZW0uSW50MzInIHsNCiAgICAgICAgICAgICAgICAgICAgJGR5bmFtaWNUeXBlID0gJ2ludCcNCiAgICAgICAgICAgICAgICAgICAgJGNvbXBhcmlzb24gPSAiYCQiICsgIl8uQ2FzdCRGaWVsZE5hbWUgLSRPcGVyYXRvciAkTWF0Y2hDb3VudFZhbHVlIg0KICAgICAgICAgICAgICAgICAgICAkc2VsZWN0T2JqZWN0ICs9ICIgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBAeyBsYWJlbD0nQ2FzdCRGaWVsZE5hbWUnO2V4cHJlc3Npb249eyBgJCIgKyAiXy4kRmllbGROYW1lIC1hcyBbJGR5bmFtaWNUeXBlXSB9fSINCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJ1N5c3RlbS5TaW5nbGUnIHsNCiAgICAgICAgICAgICAgICAgICAgJGR5bmFtaWNUeXBlID0gJ2Zsb2F0Jw0KICAgICAgICAgICAgICAgICAgICAkY29tcGFyaXNvbiA9ICJgJCIgKyAiXy5DYXN0JEZpZWxkTmFtZSAtJE9wZXJhdG9yICRNYXRjaENvdW50VmFsdWUiDQogICAgICAgICAgICAgICAgICAgICRzZWxlY3RPYmplY3QgKz0gIiB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IEB7IGxhYmVsPSdDYXN0JEZpZWxkTmFtZSc7ZXhwcmVzc2lvbj17IGAkIiArICJfLiRGaWVsZE5hbWUgLWFzIFskZHluYW1pY1R5cGVdIH19Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAnU3lzdGVtLkRvdWJsZScgew0KICAgICAgICAgICAgICAgICAgICAkZHluYW1pY1R5cGUgPSAnZG91YmxlJw0KICAgICAgICAgICAgICAgICAgICAkY29tcGFyaXNvbiA9ICJgJCIgKyAiXy5DYXN0JEZpZWxkTmFtZSAtJE9wZXJhdG9yICRNYXRjaENvdW50VmFsdWUiDQogICAgICAgICAgICAgICAgICAgICRzZWxlY3RPYmplY3QgKz0gIiB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5IEB7IGxhYmVsPSdDYXN0JEZpZWxkTmFtZSc7ZXhwcmVzc2lvbj17IGAkIiArICJfLiRGaWVsZE5hbWUgLWFzIFskZHluYW1pY1R5cGVdIH19Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgcmV0dXJuIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHBpcGUgKz0gJHNlbGVjdE9iamVjdCArICIgfCBXaGVyZS1PYmplY3QgeyAkY29tcGFyaXNvbiB9Ig0KDQogICAgICAgICAgICAkZXhlY1BpcGUgPSBbc2NyaXB0YmxvY2tdOjpDcmVhdGUoJHBpcGUpDQogICAgICAgICAgICBpZiAoJG51bGwgLWVxICRleGVjUGlwZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkY291bnQNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgW29iamVjdFtdXSRyZXN1bHQgPSAkKEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkZXhlY1BpcGUpDQogICAgICAgICAgICAkY291bnQgPSAkcmVzdWx0LkNvdW50DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJGNvdW50DQp9DQoNCmZ1bmN0aW9uIFNhdmUtRGF0YVRvQ3N2RmlsZSAoW3N0cmluZ10kUGF0aCwgW3N0cmluZ10kRGVsaW1pdGVyLCBbb2JqZWN0W11dJENzdk9iamVjdHMsIFtzd2l0Y2hdJE92ZXJyaWRlKSB7DQogICAgSW5pdGlhbGl6ZS1Gb2xkZXIgLVBhdGggKFNwbGl0LVBhdGggLVBhdGggJFBhdGggLVBhcmVudCkNCg0KICAgIFtvYmplY3RbXV0kY3N2RGF0YSA9ICRudWxsDQoNCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRQYXRoKSB7DQogICAgICAgIGlmICgtbm90ICRPdmVycmlkZS5Jc1ByZXNlbnQpIHsNCiAgICAgICAgICAgICRjc3ZEYXRhICs9IEdldC1EYXRhRnJvbUNzdkZpbGUgLVBhdGggJFBhdGggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRGVsaW1pdGVyICREZWxpbWl0ZXINCiAgICAgICAgfQ0KICAgICAgICBSZW1vdmUtRmlsZSAtUGF0aCAkUGF0aA0KICAgIH0NCg0KICAgICRjc3ZEYXRhICs9ICRDc3ZPYmplY3RzDQogICAgJGNzdkRhdGEgfCBFeHBvcnQtQ3N2IC1QYXRoICRQYXRoIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgLURlbGltaXRlciAkRGVsaW1pdGVyIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgLUVuY29kaW5nICRDU1ZfREVGQVVMVF9FTkNPRElORyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC1Ob1R5cGVJbmZvcm1hdGlvbiAtTm9DbG9iYmVyDQp9DQoNCmZ1bmN0aW9uIEluaXRpYWxpemUtRm9sZGVyIChbc3RyaW5nXSRQYXRoKSB7DQogICAgdHJ5IHsNCiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCkpIHsNCiAgICAgICAgICAgIFt2b2lkXShOZXctSXRlbSAtUGF0aCAkUGF0aCAtSXRlbVR5cGUgJ0RpcmVjdG9yeScgLUZvcmNlIC1FcnJvckFjdGlvbiBTdG9wKQ0KICAgICAgICB9DQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgRXJyb3IgY3JlYXRpbmcgZm9sZGVyIGF0ICRQYXRoLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRGF0YUZyb21Dc3ZGaWxlIChbc3RyaW5nXSRQYXRoLCBbc3RyaW5nXSREZWxpbWl0ZXIpIHsNCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRQYXRoKSB7IHJldHVybiAoSW1wb3J0LUNzdiAtUGF0aCAkUGF0aCAtRGVsaW1pdGVyICREZWxpbWl0ZXIpIH0NCn0NCg0KZnVuY3Rpb24gUmVtb3ZlLUZpbGUgKFtzdHJpbmddJFBhdGgpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFBhdGgpIC1vciBgDQogICAgICAgICgtbm90IChUZXN0LVBhdGggLVBhdGggJFBhdGgpKSkgeyByZXR1cm4gfQ0KDQogICAgUmVtb3ZlLUl0ZW0gLVBhdGggJFBhdGggLVJlY3Vyc2UgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQp9DQoNCiMNCiMgR2V0IE5ldHdvcmsgU3BlZWQgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBJbml0aWFsaXplLU91dHB1dCB7DQogICAgcmV0dXJuIEB7TGFzdFdlYlJUVFRvRXh0ZXJuYWxVUkwgPSBbdGltZXNwYW5dMA0KICAgICAgICAgICAgIEF2ZXJhZ2VXZWJSVFRUb0V4dGVybmFsVVJMID0gW3RpbWVzcGFuXTANCiAgICAgICAgICAgICBUaW1lc0V4dGVybmFsVVJMQWJvdmVXZWJSVFRUaHJlc2hvbGQgPSBbaW50XTANCiAgICAgICAgICAgICBMYXN0V2ViUlRUVG9CdXNpbmVzc1VSTCA9IFt0aW1lc3Bhbl0wDQogICAgICAgICAgICAgQXZlcmFnZVdlYlJUVFRvQnVzaW5lc3NVUkwgPSBbdGltZXNwYW5dMA0KICAgICAgICAgICAgIFRpbWVzQnVzaW5lc3NVUkxBYm92ZVdlYlJUVFRocmVzaG9sZCA9IFtpbnRdMA0KICAgICAgICAgICAgIFR5cGVPZkNvbm5lY3Rpb24gPSBbc3RyaW5nXTo6RW1wdHkNCiAgICAgICAgICAgICBNZXRlcmVkQ29ubmVjdGlvbiA9ICRmYWxzZX0NCn0NCg0KZnVuY3Rpb24gVGVzdC1JbnB1dFBhcmFtZXRlcnMgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgIGlmICgtbm90IChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuQnVzaW5lc3NVUkwpIC1hbmQgYA0KICAgICAgICAtbm90IChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuRXh0ZXJuYWxVUkwpKSB7DQogICAgICAgIHRocm93ICJCb3RoICdCdXNpbmVzc1VSTCcgYW5kICdFeHRlcm5hbFVSTCcgYXJlIGVtcHR5LCBwbGVhc2UgcHJvdmlkZSBhdCBsZWFzdCBvbmUgb2YgdGhlbSBmb3IgdGhlIFJlbW90ZSBBY3Rpb24gdG8gcnVuLiAiDQogICAgfQ0KICAgIGlmIChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuRXh0ZXJuYWxVUkwpIHsNCiAgICAgICAgVGVzdC1VUkwgYA0KICAgICAgICAgICAgLVBhcmFtTmFtZSAnRXh0ZXJuYWxVUkwnIGANCiAgICAgICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuRXh0ZXJuYWxVUkwNCiAgICB9DQogICAgaWYgKENvbmZpcm0tU3RyaW5nSXNOb3RFbXB0eSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5CdXNpbmVzc1VSTCkgew0KICAgICAgICBUZXN0LVVSTCBgDQogICAgICAgICAgICAtUGFyYW1OYW1lICdCdXNpbmVzc1VSTCcgYA0KICAgICAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5CdXNpbmVzc1VSTA0KICAgIH0NCiAgICBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgYA0KICAgICAgICAtUGFyYW1OYW1lICdNYXhpbXVtRGVsYXlJblNlY29uZHMnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5NYXhpbXVtRGVsYXlJblNlY29uZHMgYA0KICAgICAgICAtTG93ZXJMaW1pdCAwIGANCiAgICAgICAgLVVwcGVyTGltaXQgJE1BWF9TQ1JJUFRfREVMQVlfU0VDDQogICAgVGVzdC1QYXJhbUluQWxsb3dlZFJhbmdlIGANCiAgICAgICAgLVBhcmFtTmFtZSAnV2ViUlRUVGhyZXNob2xkJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuV2ViUlRUVGhyZXNob2xkIGANCiAgICAgICAgLUxvd2VyTGltaXQgMCBgDQogICAgICAgIC1VcHBlckxpbWl0ICRNQVhfUlRUX1RIUkVTSE9MRA0KICAgIFRlc3QtUGFyYW1JbkFsbG93ZWRSYW5nZSBgDQogICAgICAgIC1QYXJhbU5hbWUgJ0J1c2luZXNzV2ViUlRUVGhyZXNob2xkJyBgDQogICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuQnVzaW5lc3NXZWJSVFRUaHJlc2hvbGQgYA0KICAgICAgICAtTG93ZXJMaW1pdCAwIGANCiAgICAgICAgLVVwcGVyTGltaXQgJE1BWF9SVFRfVEhSRVNIT0xEDQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1OZXR3b3JrU3BlZWQgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycywgW2hhc2h0YWJsZV0kT3V0cHV0KSB7DQogICAgVXBkYXRlLU1ldGVyZWRWYWx1ZSAtT3V0cHV0ICRPdXRwdXQNCiAgICBVcGRhdGUtQ3N2RGF0YSAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMgYA0KICAgICAgICAgICAgICAgICAgIC1PdXRwdXQgJE91dHB1dA0KfQ0KDQpmdW5jdGlvbiBVcGRhdGUtTWV0ZXJlZFZhbHVlIChbaGFzaHRhYmxlXSRPdXRwdXQpIHsNCiAgICBTZXQtSW50ZXJmYWNlQXNzZW1ibHkNCg0KICAgICRjdXJyZW50UHJvZmlsZSA9IEdldC1DdXJyZW50UHJvZmlsZQ0KICAgICRwcm9maWxlTWVkaWFUeXBlID0gR2V0LVBoeXNpY2FsTWVkaWFUeXBlDQogICAgaWYgKC1ub3QgKCRwcm9maWxlTWVkaWFUeXBlLkFsbG93ZWQpKSB7DQogICAgICAgICRPdXRwdXQuVHlwZU9mQ29ubmVjdGlvbiA9ICRVTktPV05fTUVESUFfTkFNRQ0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICdDb3VsZCBub3QgZ2V0IHBoeXNpY2FsIGFkYXB0ZXIgdHlwZSBmb3IgYWN0aXZlIGNvbm5lY3Rpb24uIFRoZSBkZXZpY2UgbWlnaHQgYmUgdXNpbmcgdmlydHVhbCBhZGFwdGVycyBvciBiZSBpbiBhIGZ1bGwgVlBOIGVudmlyb25tZW50LiAnDQogICAgfSBlbHNlIHsgJE91dHB1dC5UeXBlT2ZDb25uZWN0aW9uID0gJHByb2ZpbGVNZWRpYVR5cGUuTmFtZSB9DQoNCiAgICAkY29ubmVjdGlvbkNvc3QgPSBHZXQtQ29ubmVjdGlvbkNvc3QgLUNvbm5lY3Rpb25Qcm9maWxlICRjdXJyZW50UHJvZmlsZQ0KICAgIGlmICgkTUVURVJFRF9DT1NUX1ZBTFVFUy5Db250YWluc0tleSgkY29ubmVjdGlvbkNvc3QuTmV0d29ya0Nvc3RUeXBlLnZhbHVlX18pKSB7DQogICAgICAgICRPdXRwdXQuTWV0ZXJlZENvbm5lY3Rpb24gPSAkdHJ1ZQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gU2V0LUludGVyZmFjZUFzc2VtYmx5IHsNCiAgICB0cnkgew0KICAgICAgICBbdm9pZF1bV2luZG93cy5OZXR3b3JraW5nLkNvbm5lY3Rpdml0eS5OZXR3b3JrSW5mb3JtYXRpb24sV2luZG93cyxDb250ZW50VHlwZT1XaW5kb3dzUnVudGltZV0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIlVuYWJsZSB0byBsb2FkICd3aW5kb3dzLm5ldHdvcmtpbmcuY29ubmVjdGl2aXR5Lm5ldHdvcmtpbmZvcm1hdGlvbiBhc3NlbWJseScuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1DdXJyZW50UHJvZmlsZSB7DQogICAgJGN1cnJlbnRQcm9maWxlID0gW1dpbmRvd3MuTmV0d29ya2luZy5Db25uZWN0aXZpdHkuTmV0d29ya0luZm9ybWF0aW9uXTo6R2V0SW50ZXJuZXRDb25uZWN0aW9uUHJvZmlsZSgpDQogICAgaWYgKCRudWxsIC1lcSAkY3VycmVudFByb2ZpbGUpIHsNCiAgICAgICAgdGhyb3cgJ1VuYWJsZSB0byByZXRyaWV2ZSBjdXJyZW50IGNvbm5lY3Rpb24gcHJvZmlsZS4gJw0KICAgIH0NCg0KICAgIHJldHVybiAkY3VycmVudFByb2ZpbGUNCn0NCg0KZnVuY3Rpb24gR2V0LVBoeXNpY2FsTWVkaWFUeXBlIHsNCiAgICAkbWVkaWFJbmZvID0gQHtBbGxvd2VkID0gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgTmFtZSA9IFtzdHJpbmddOjpFbXB0eX0NCg0KICAgICRuZXR3b3JrQWRhcHRlciA9IEdldC1QaHlzaWNhbE5ldHdvcmtBZGFwdGVyDQoNCiAgICBbaW50XSRtZWRpYUtleSA9ICRuZXR3b3JrQWRhcHRlci5OZGlzUGh5c2ljYWxNZWRpdW0NCiAgICBpZiAoJFdJRklfTUVESUFfVFlQRVMuQ29udGFpbnNLZXkoJG1lZGlhS2V5KSkgew0KICAgICAgICAkbWVkaWFJbmZvLk5hbWUgPSAkV0lGSV9NRURJQV9OQU1FDQogICAgICAgICRtZWRpYUluZm8uQWxsb3dlZCA9ICR0cnVlDQogICAgfQ0KICAgIGlmICgkQ0FCTEVfTUVESUFfVFlQRVMuQ29udGFpbnNLZXkoJG1lZGlhS2V5KSkgew0KICAgICAgICAkbWVkaWFJbmZvLk5hbWUgPSAkQ0FCTEVfTUVESUFfTkFNRQ0KICAgICAgICAkbWVkaWFJbmZvLkFsbG93ZWQgPSAkdHJ1ZQ0KICAgIH0NCiAgICBpZiAoJE1PQklMRV9NRURJQV9UWVBFUy5Db250YWluc0tleSgkbWVkaWFLZXkpKSB7DQogICAgICAgICRtZWRpYUluZm8uTmFtZSA9ICRNT0JJTEVfTUVESUFfTkFNRQ0KICAgICAgICAkbWVkaWFJbmZvLkFsbG93ZWQgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgIHJldHVybiAkbWVkaWFJbmZvDQp9DQoNCmZ1bmN0aW9uIEdldC1QaHlzaWNhbE5ldHdvcmtBZGFwdGVyIHsNCiAgICBbYXJyYXldJGFjdGl2ZVBoeXNpY2FsQWRhcHRlcnMgPSBHZXQtQWN0aXZlUGh5c2ljYWxBZGFwdGVycw0KDQogICAgaWYgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICRhY3RpdmVQaHlzaWNhbEFkYXB0ZXJzKSB7DQogICAgICAgIHRocm93ICdDb3VsZCBub3QgZ2V0IGFueSBwaHlzaWNhbCBuZXR3b3JrIGFkYXB0ZXJzLiAnDQogICAgfQ0KDQogICAgaWYgKCRhY3RpdmVQaHlzaWNhbEFkYXB0ZXJzLkNvdW50IC1ndCAxKSB7DQogICAgICAgIEdldC1QaHlzaWNhbEFkYXB0ZXJDdXJyZW50bHlVc2VkIC1BZGFwdGVycyAkYWN0aXZlUGh5c2ljYWxBZGFwdGVycw0KICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiAkYWN0aXZlUGh5c2ljYWxBZGFwdGVyc1swXQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUFjdGl2ZVBoeXNpY2FsQWRhcHRlcnMgew0KICAgIHJldHVybiBAKEdldC1OZXRBZGFwdGVyIC1QaHlzaWNhbCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFdoZXJlLU9iamVjdCB7ICRfLlN0YXR1cyAtZXEgJ1VwJyB9KQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGh5c2ljYWxBZGFwdGVyQ3VycmVudGx5VXNlZCAoW2FycmF5XSRBZGFwdGVycykgew0KICAgICRtb3N0VXNlZEFkYXB0ZXIgPSAkbnVsbA0KICAgICRsYXN0Q291bnRlclN0YXRzID0gMA0KDQogICAgZm9yZWFjaCAoJGl0ZW0gaW4gJEFkYXB0ZXJzKSB7DQogICAgICAgICRjb3VudGVyVmFsdWUgPSBHZXQtQWRhcHRlckNvdW50ZXJCeXRlc1BlclNlY29uZCAtQWRhcHRlciAkaXRlbQ0KDQogICAgICAgIGlmICgkY291bnRlclZhbHVlIC1ndCAkbGFzdENvdW50ZXJTdGF0cykgew0KICAgICAgICAgICAgJG1vc3RVc2VkQWRhcHRlciA9ICRpdGVtDQogICAgICAgICAgICAkbGFzdENvdW50ZXJTdGF0cyA9ICRjb3VudGVyVmFsdWUNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGlmICgkbnVsbCAtZXEgJG1vc3RVc2VkQWRhcHRlcikgew0KICAgICAgICB0aHJvdyAnQ291bGQgbm90IGdldCBhY3RpdmUgcGh5c2ljYWwgYWRhcHRlciBkdWUgdG8gbGFjayBvZiBwZXJmb3JtYW5jZSBjb3VudGVyIGRhdGEuIFBsZWFzZSB0cnkgcnVubmluZyB0aGUgUmVtb3RlIEFjdGlvbiBvbiB0aGlzIGRldmljZSBhZ2Fpbi4gJw0KICAgIH0NCg0KICAgIHJldHVybiAkbW9zdFVzZWRBZGFwdGVyDQp9DQoNCmZ1bmN0aW9uIEdldC1BZGFwdGVyQ291bnRlckJ5dGVzUGVyU2Vjb25kIChbb2JqZWN0XSRBZGFwdGVyKSB7DQogICAgW3N0cmluZ1tdXSRwb3NzaWJsZUNvdW50ZXJJbnN0YW5jZU5hbWVzID0gR2V0LVBvc3NpYmxlQWRhcHRlckNvdW50ZXJJbnN0YW5jZU5hbWVzIC1BZGFwdGVyICRBZGFwdGVyDQoNCiAgICBmb3JlYWNoICgkaW5zdGFuY2VOYW1lIGluICRwb3NzaWJsZUNvdW50ZXJJbnN0YW5jZU5hbWVzKSB7DQogICAgICAgICRjb3VudGVyTmFtZSA9IEdldC1Gb3JtYXR0ZWRDb3VudGVyTmFtZSAtSW5zdGFuY2VOYW1lICRpbnN0YW5jZU5hbWUNCg0KICAgICAgICAkY291bnRlckRhdGEgPSBAKEdldC1Db3VudGVyIC1Db3VudGVyICRjb3VudGVyTmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkNCg0KICAgICAgICBpZiAoLW5vdCAoVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgLUNvbGxlY3Rpb24gJGNvdW50ZXJEYXRhKSkgew0KICAgICAgICAgICAgaWYgKC1ub3QgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICRjb3VudGVyRGF0YS5Db3VudGVyU2FtcGxlcykpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gKCRjb3VudGVyRGF0YS5Db3VudGVyU2FtcGxlcylbMF0uQ29va2VkVmFsdWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVBvc3NpYmxlQWRhcHRlckNvdW50ZXJJbnN0YW5jZU5hbWVzIChbb2JqZWN0XSRBZGFwdGVyKSB7DQogICAgcmV0dXJuIEAoR2V0LUFkYXB0ZXJDb3VudGVySW5zdGFuY2VOYW1lIC1BZGFwdGVyTmFtZSAkQWRhcHRlci5JbnRlcmZhY2VEZXNjcmlwdGlvbg0KICAgICAgICAgICAgIEdldC1BZGFwdGVyQ291bnRlckluc3RhbmNlTmFtZSAtQWRhcHRlck5hbWUgJEFkYXB0ZXIuSW50ZXJmYWNlQWxpYXMNCiAgICAgICAgICAgICBHZXQtQWRhcHRlckNvdW50ZXJJbnN0YW5jZU5hbWUgLUFkYXB0ZXJOYW1lICRBZGFwdGVyLkludGVyZmFjZU5hbWUNCiAgICAgICAgICAgICBHZXQtQWRhcHRlckNvdW50ZXJJbnN0YW5jZU5hbWUgLUFkYXB0ZXJOYW1lICRBZGFwdGVyLk5hbWUpDQp9DQoNCmZ1bmN0aW9uIEdldC1BZGFwdGVyQ291bnRlckluc3RhbmNlTmFtZSAoW3N0cmluZ10kQWRhcHRlck5hbWUpIHsNCiAgICAkZm9ybWF0dGVkTmFtZSA9ICRBZGFwdGVyTmFtZQ0KDQogICAgZm9yZWFjaCAoJGtleSBpbiAkQ09VTlRFUl9OQU1FX0NIQVJBQ1RFUlNfUkVQTEFDRS5LZXlzKSB7DQogICAgICAgICRmb3JtYXR0ZWROYW1lID0gJGZvcm1hdHRlZE5hbWUuUmVwbGFjZSgka2V5LCAkQ09VTlRFUl9OQU1FX0NIQVJBQ1RFUlNfUkVQTEFDRVska2V5XSkNCiAgICB9DQoNCiAgICByZXR1cm4gJGZvcm1hdHRlZE5hbWUNCn0NCg0KZnVuY3Rpb24gR2V0LUZvcm1hdHRlZENvdW50ZXJOYW1lIChbc3RyaW5nXSRJbnN0YW5jZU5hbWUpIHsNCiAgICAkbG9jYWxpemVkQ291bnRlck5hbWUgPSBHZXQtUGVyZm9ybWFuY2VDb3VudGVyTG9jYWxOYW1lIC1JRCAkTkVUV09SS19BREFQVEVSX0NPVU5URVJfSUQNCiAgICAkbG9jYWxpemVkQ291bnRlclR5cGVOYW1lID0gR2V0LVBlcmZvcm1hbmNlQ291bnRlckxvY2FsTmFtZSAtSUQgJEJZVEVTX1BFUl9TRUNPTkRfQ09VTlRFUl9JRA0KDQogICAgcmV0dXJuICJcJHtsb2NhbGl6ZWRDb3VudGVyTmFtZX0oJHtpbnN0YW5jZU5hbWV9KVwke2xvY2FsaXplZENvdW50ZXJUeXBlTmFtZX0iLlRvTG93ZXIoKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGVyZm9ybWFuY2VDb3VudGVyTG9jYWxOYW1lIChbdWludDMyXSAkSUQpIHsNCiAgICAkYnVmZmVyID0gTmV3LU9iamVjdCAtVHlwZSB0ZXh0LnN0cmluZ2J1aWxkZXIoMTAyNCkNCg0KICAgIFt1aW50MzJdJGJ1ZmZlclNpemUgPSAkYnVmZmVyLkNhcGFjaXR5DQoNCiAgICAkcGVyZkNvdW50ZXIgPSBBZGQtVHlwZSAtTWVtYmVyRGVmaW5pdGlvbiAkUEVSRl9DT1VOVEVSX05BTUVTX0NPREUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1OYW1lICdQZXJmQ291bnRlcicgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1OYW1lc3BhY2UgJ1V0aWxpdHknIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFzc1RocnUNCg0KICAgICRyZXN1bHRWYWx1ZSA9ICRwZXJmQ291bnRlcjo6UGRoTG9va3VwUGVyZk5hbWVCeUluZGV4KCRlbnY6Q09NUFVURVJOQU1FLCAkSUQsICRidWZmZXIsIFtyZWZdJGJ1ZmZlclNpemUpDQoNCiAgICBpZiAoJHJlc3VsdFZhbHVlIC1lcSAwKSB7DQogICAgICAgICRidWZmZXIuVG9TdHJpbmcoKS5TdWJzdHJpbmcoMCwgJGJ1ZmZlclNpemUgLSAxKQ0KICAgIH0gZWxzZSB7DQogICAgICAgIHRocm93ICdVbmFibGUgdG8gZ2V0IG5ldHdvcmsgYWRhcHRlciBwZXJmb3JtYW5jZSBjb3VudGVyIGxvY2FsaXplZCBuYW1lLiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ29ubmVjdGlvbkNvc3QgKFtvYmplY3RdJENvbm5lY3Rpb25Qcm9maWxlKSB7DQogICAgJGNvbm5lY3Rpb25Db3N0ID0gJENvbm5lY3Rpb25Qcm9maWxlLkdldENvbm5lY3Rpb25Db3N0KCkNCiAgICByZXR1cm4gJGNvbm5lY3Rpb25Db3N0DQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1Dc3ZEYXRhIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMsIFtoYXNodGFibGVdJE91dHB1dCkgew0KICAgICRjc3ZEYXRhID0gR2V0LUNzdkxhc3REYXRhDQogICAgJFJUVERhdGEgPSBHZXQtUlRURGF0YSAtVVJMICRJbnB1dFBhcmFtZXRlcnMuRXh0ZXJuYWxVUkwgLUJ1c2luZXNzVVJMICRJbnB1dFBhcmFtZXRlcnMuQnVzaW5lc3NVUkwgLU91dHB1dCAkT3V0cHV0DQoNCiAgICAkdXBkYXRlZERhdGEgPSBAKEFkZC1MYXRlc3REYXRhVG9Dc3YgLUNzdkRhdGEgJGNzdkRhdGEgLU5ld0RhdGEgJFJUVERhdGEpDQogICAgVXBkYXRlLVdpdGhMYXRlc3REYXRhIC1SVFRUaHJlc2hvbGQgJElucHV0UGFyYW1ldGVycy5XZWJSVFRUaHJlc2hvbGQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAtQnVzaW5lc3NSVFRUaHJlc2hvbGQgJElucHV0UGFyYW1ldGVycy5CdXNpbmVzc1dlYlJUVFRocmVzaG9sZCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC1Dc3ZEYXRhICR1cGRhdGVkRGF0YSAtT3V0cHV0ICRPdXRwdXQNCiAgICBTYXZlLURhdGFIaXN0b3J5VG9Dc3YgLUNzdkRhdGEgJHVwZGF0ZWREYXRhDQp9DQoNCmZ1bmN0aW9uIEdldC1Dc3ZMYXN0RGF0YSB7DQogICAgJGNzdiA9IEdldC1PcmRlcmVkRGF0YUZyb21Dc3ZGaWxlIC1QYXRoICRDU1ZfTkVUV09SS19TUEVFRF9EQVRBX1BBVEggYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRGVsaW1pdGVyICRDU1ZfREVGQVVMVF9ERUxJTUlURVIgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRmllbGQgJENTVl9USU1FU1RBTVBfRklFTERfTkFNRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1PcmRlciAnZGVzYycNCg0KICAgICRzaW5jZURhdGUgPSAoR2V0LURhdGUpLkFkZERheXMoLSRDU1ZfRklMVEVSX0JZX0xBU1RfREFZUykNCg0KICAgIHJldHVybiAoR2V0LUNzdkRhdGFGaWx0ZXJlZEJ5RGF0ZSAtQ3N2RGF0YSAkY3N2IC1TaW5jZURhdGUgJHNpbmNlRGF0ZSkNCn0NCg0KZnVuY3Rpb24gR2V0LVJUVERhdGEgKFtzdHJpbmddJFVSTCwgW3N0cmluZ10kQnVzaW5lc3NVUkwsIFtoYXNodGFibGVdJE91dHB1dCkgew0KICAgICRSVFREYXRhID0gQHtVUkxSVFQgPSAwDQogICAgICAgICAgICAgICAgIEJ1c2luZXNzVVJMUlRUID0gMA0KICAgICAgICAgICAgICAgICBUaW1lc3RhbXAgPSAkbnVsbH0NCg0KICAgIGlmIChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRVUkwpIHsNCiAgICAgICAgW2ludF0kUlRURGF0YS5VUkxSVFQgPSBHZXQtUlRUIC1VUkwgJFVSTA0KICAgIH0NCiAgICBpZiAoQ29uZmlybS1TdHJpbmdJc05vdEVtcHR5IC1WYWx1ZSAkQnVzaW5lc3NVUkwpIHsNCiAgICAgICAgW2ludF0kUlRURGF0YS5CdXNpbmVzc1VSTFJUVCA9IEdldC1SVFQgLVVSTCAkQnVzaW5lc3NVUkwNCiAgICB9DQogICAgJFJUVERhdGEuVGltZXN0YW1wID0gR2V0LURhdGUgLUZvcm1hdCAkREFURV9USU1FX0ZPUk1BVF9EQVNIRVMNCg0KICAgICRPdXRwdXQuTGFzdFdlYlJUVFRvRXh0ZXJuYWxVUkwgPSBbdGltZXNwYW5dOjpGcm9tTWlsbGlzZWNvbmRzKCRSVFREYXRhLlVSTFJUVCkNCiAgICAkT3V0cHV0Lkxhc3RXZWJSVFRUb0J1c2luZXNzVVJMID0gW3RpbWVzcGFuXTo6RnJvbU1pbGxpc2Vjb25kcygkUlRURGF0YS5CdXNpbmVzc1VSTFJUVCkNCg0KICAgIHJldHVybiAkUlRURGF0YQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUlRUIChbc3RyaW5nXSRVUkwpIHsNCiAgICB0cnkgew0KICAgICAgICBTZXQtU2VjdXJpdHlQcm90b2NvbA0KDQogICAgICAgIFt1cmldJGJsb2NrSW5wdXQgPSAkVVJMDQogICAgICAgICRyZXF1ZXN0U2NyaXB0QmxvY2sgPSBHZXQtUmVxdWVzdFNjcmlwdEJsb2NrDQogICAgICAgICRtZWFzdXJlbWVudCA9IE1lYXN1cmUtQ29tbWFuZCAtRXhwcmVzc2lvbiAkcmVxdWVzdFNjcmlwdEJsb2NrIC1JbnB1dE9iamVjdCAkYmxvY2tJbnB1dA0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiVW5hYmxlIHRvIG1lYXN1cmUgV2ViIFJUVCBmb3IgJFVSTC4gUmVhc29uOiAkXyAiDQogICAgfQ0KDQogICAgcmV0dXJuICRtZWFzdXJlbWVudC5Ub3RhbE1pbGxpc2Vjb25kcw0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVxdWVzdFNjcmlwdEJsb2NrIHsNCiAgICByZXR1cm4geyAkcmVxdWVzdCA9IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJF8gLVZlcmJvc2U6JGZhbHNlIC1Vc2VCYXNpY1BhcnNpbmcgfQ0KfQ0KDQpmdW5jdGlvbiBBZGQtTGF0ZXN0RGF0YVRvQ3N2IChbb2JqZWN0W11dJENzdkRhdGEsIFtoYXNodGFibGVdJE5ld0RhdGEpIHsNCiAgICAkbmV3Q3N2T2JqZWN0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgJ3Bzb2JqZWN0JyAtUHJvcGVydHkgJE5ld0RhdGENCg0KICAgIGlmICgoJG51bGwgLWVxICRDc3ZEYXRhKSAtb3IgKCRDc3ZEYXRhLkNvdW50IC1lcSAwKSkgew0KICAgICAgICAkbGF0ZXN0Q3N2RGF0YSA9IEAoJG5ld0Nzdk9iamVjdCkNCiAgICB9IGVsc2Ugew0KICAgICAgICAkbGF0ZXN0Q3N2RGF0YSA9ICwkbmV3Q3N2T2JqZWN0ICsgJENzdkRhdGENCiAgICB9DQoNCiAgICByZXR1cm4gJGxhdGVzdENzdkRhdGENCn0NCg0KZnVuY3Rpb24gVXBkYXRlLVdpdGhMYXRlc3REYXRhIChbaW50XSRSVFRUaHJlc2hvbGQsIFtpbnRdJEJ1c2luZXNzUlRUVGhyZXNob2xkLCBbb2JqZWN0W11dJENzdkRhdGEsIFtoYXNodGFibGVdJE91dHB1dCkgew0KICAgICR0b2RheURhdGEgPSBHZXQtVG9kYXlEYXRhIC1Dc3ZEYXRhICRDc3ZEYXRhDQoNCiAgICBpZiAoKCRudWxsIC1lcSAkdG9kYXlEYXRhKSAtb3IgKCR0b2RheURhdGEuQ291bnQgLWVxIDApKSB7IHJldHVybiB9DQoNCiAgICBVcGRhdGUtQXZlcmFnZXNGcm9tQ3N2RGF0YSAtQ3N2RGF0YSAkdG9kYXlEYXRhIC1PdXRwdXQgJE91dHB1dA0KICAgIFVwZGF0ZS1UaW1lc0Fib3ZlVGhyZXNob2xkIC1SVFRUaHJlc2hvbGQgJFJUVFRocmVzaG9sZCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUJ1c2luZXNzUlRUVGhyZXNob2xkICRCdXNpbmVzc1JUVFRocmVzaG9sZCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNzdkRhdGEgJHRvZGF5RGF0YSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU91dHB1dCAkT3V0cHV0DQp9DQoNCmZ1bmN0aW9uIEdldC1Ub2RheURhdGEgKFtvYmplY3RbXV0kQ3N2RGF0YSkgew0KICAgIHJldHVybiAoR2V0LUNzdkRhdGFGaWx0ZXJlZEJ5RGF0ZSAtQ3N2RGF0YSAkQ3N2RGF0YSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1TaW5jZURhdGUgKEdldC1Ub2RheU1pZE5pZ2h0RGF0ZSkpDQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1BdmVyYWdlc0Zyb21Dc3ZEYXRhIChbb2JqZWN0W11dJENzdkRhdGEsIFtoYXNodGFibGVdJE91dHB1dCkgew0KICAgICRPdXRwdXQuQXZlcmFnZVdlYlJUVFRvRXh0ZXJuYWxVUkwgPSBbdGltZXNwYW5dOjpGcm9tTWlsbGlzZWNvbmRzKChHZXQtQXZlcmFnZUZyb21Dc3ZEYXRhIC1GaWVsZE5hbWUgJENTVl9VUkxfUlRUX0ZJRUxETkFNRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNzdkRhdGEgJENzdkRhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1EaXNjYXJkWmVybyAkdHJ1ZSkpDQogICAgJE91dHB1dC5BdmVyYWdlV2ViUlRUVG9CdXNpbmVzc1VSTCA9IFt0aW1lc3Bhbl06OkZyb21NaWxsaXNlY29uZHMoKEdldC1BdmVyYWdlRnJvbUNzdkRhdGEgLUZpZWxkTmFtZSAkQ1NWX0JVU0lORVNTX1VSTF9SVFRfRklFTEROQU1FIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ3N2RGF0YSAkQ3N2RGF0YSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLURpc2NhcmRaZXJvICR0cnVlKSkNCn0NCg0KZnVuY3Rpb24gVXBkYXRlLVRpbWVzQWJvdmVUaHJlc2hvbGQgKFtpbnRdJFJUVFRocmVzaG9sZCwgW2Zsb2F0XSRCdXNpbmVzc1JUVFRocmVzaG9sZCwgW29iamVjdFtdXSRDc3ZEYXRhLCBbaGFzaHRhYmxlXSRPdXRwdXQpIHsNCiAgICAkT3V0cHV0LlRpbWVzRXh0ZXJuYWxVUkxBYm92ZVdlYlJUVFRocmVzaG9sZCA9IEdldC1Db3VudEZyb21Dc3ZEYXRhIC1GaWVsZE5hbWUgJENTVl9VUkxfUlRUX0ZJRUxETkFNRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtT3BlcmF0b3IgJ2d0JyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTWF0Y2hDb3VudFZhbHVlICRSVFRUaHJlc2hvbGQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNzdkRhdGEgJENzdkRhdGENCiAgICAkT3V0cHV0LlRpbWVzQnVzaW5lc3NVUkxBYm92ZVdlYlJUVFRocmVzaG9sZCA9IEdldC1Db3VudEZyb21Dc3ZEYXRhIC1GaWVsZE5hbWUgJENTVl9CVVNJTkVTU19VUkxfUlRUX0ZJRUxETkFNRSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtT3BlcmF0b3IgJ2d0JyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTWF0Y2hDb3VudFZhbHVlICRCdXNpbmVzc1JUVFRocmVzaG9sZCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ3N2RGF0YSAkQ3N2RGF0YQ0KfQ0KDQpmdW5jdGlvbiBTYXZlLURhdGFIaXN0b3J5VG9Dc3YgKFtvYmplY3RbXV0kQ3N2RGF0YSkgew0KICAgIFNhdmUtRGF0YVRvQ3N2RmlsZSAtUGF0aCAkQ1NWX05FVFdPUktfU1BFRURfREFUQV9QQVRIIGANCiAgICAgICAgICAgICAgICAgICAgICAgLURlbGltaXRlciAkQ1NWX0RFRkFVTFRfREVMSU1JVEVSIGANCiAgICAgICAgICAgICAgICAgICAgICAgLUNzdk9iamVjdHMgJENzdkRhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAtT3ZlcnJpZGUNCn0NCg0KIw0KIyBOZXh0aGluayBPdXRwdXQgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAoW2hhc2h0YWJsZV0kT3V0cHV0KSB7DQogICAgW254dF06OldyaXRlT3V0cHV0RHVyYXRpb24oJ0xhc3RXZWJSVFRUb0V4dGVybmFsVVJMJywgJE91dHB1dC5MYXN0V2ViUlRUVG9FeHRlcm5hbFVSTCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXREdXJhdGlvbignQXZlcmFnZVdlYlJUVFRvRXh0ZXJuYWxVUkwnLCAkT3V0cHV0LkF2ZXJhZ2VXZWJSVFRUb0V4dGVybmFsVVJMKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignVGltZXNFeHRlcm5hbFVSTEFib3ZlV2ViUlRUVGhyZXNob2xkJywgJE91dHB1dC5UaW1lc0V4dGVybmFsVVJMQWJvdmVXZWJSVFRUaHJlc2hvbGQpDQogICAgW254dF06OldyaXRlT3V0cHV0RHVyYXRpb24oJ0xhc3RXZWJSVFRUb0J1c2luZXNzVVJMJywgJE91dHB1dC5MYXN0V2ViUlRUVG9CdXNpbmVzc1VSTCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXREdXJhdGlvbignQXZlcmFnZVdlYlJUVFRvQnVzaW5lc3NVUkwnLCAkT3V0cHV0LkF2ZXJhZ2VXZWJSVFRUb0J1c2luZXNzVVJMKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignVGltZXNCdXNpbmVzc1VSTEFib3ZlV2ViUlRUVGhyZXNob2xkJywgJE91dHB1dC5UaW1lc0J1c2luZXNzVVJMQWJvdmVXZWJSVFRUaHJlc2hvbGQpDQogICAgW254dF06OldyaXRlT3V0cHV0U3RyaW5nKCdUeXBlT2ZDb25uZWN0aW9uJywgJE91dHB1dC5UeXBlT2ZDb25uZWN0aW9uKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dEJvb2woJ01ldGVyZWRDb25uZWN0aW9uJywgJE91dHB1dC5NZXRlcmVkQ29ubmVjdGlvbikNCn0NCg0KIw0KIyBNYWluIHNjcmlwdCBmbG93DQojDQpbZW52aXJvbm1lbnRdOjpFeGl0KChJbnZva2UtTWFpbiAtSW5wdXRQYXJhbWV0ZXJzICRNeUludm9jYXRpb24uQm91bmRQYXJhbWV0ZXJzKSkNCg0KIyBTSUcgIyBCZWdpbiBzaWduYXR1cmUgYmxvY2sNCiMgTUlJaW1RWUpLb1pJaHZjTkFRY0NvSUlpaWpDQ0lvWUNBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1Qmdvcg0KIyBCZ0VFQVlJM0FnRUVvR3N3YVRBMEJnb3JCZ0VFQVlJM0FnRWVNQ1lDQXdFQUFBUVFIOHc3WUZsTENFNjNKTkxHDQojIEtYN3pVUUlCQUFJQkFBSUJBQUlCQUFJQkFEQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDRDR5Mlo5Ky85MHhGRGQNCiMgZEhzWXVPWjVidVFZOTJmNE5NUU9lR2FPZVdGOGNxQ0NFVHN3Z2dQRk1JSUNyYUFEQWdFQ0FoQUNyRndtYWd0QQ0KIyBtNDhMZWZLdVJpVjNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hd3hDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLDQojIEV3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4S3pBcEJnTlYNCiMgQkFNVElrUnBaMmxEWlhKMElFaHBaMmdnUVhOemRYSmhibU5sSUVWV0lGSnZiM1FnUTBFd0hoY05NRFl4TVRFdw0KIyBNREF3TURBd1doY05NekV4TVRFd01EQXdNREF3V2pCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NDQojIFJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUUQNCiMgRXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUlJQklqQU5CZ2txaGtpRw0KIyA5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHN6bGMrYjcxTHZsTFMweXB0L2xnVC9KelNWSnRuRXF3OVdVDQojIE5HZWlDaHl3WDJtbVFMSEV0N0tQMEppa3FVRlpPdFBjbE5ZODIzUTRwRXJNVFNXQzkwcWxVeEk0N3ZOSmJYR1INCiMgZm1PMnE2WmZ3NlNFK0U5aVViNzR4ZXpiT0pMakJ1VUlrUXpFS0VGVis4dGFpUlYrY2VnMXYwMXlDVDIrT2poUQ0KIyBXM2N4RzQyenh5UkZtcWVzYlFBVVdnUzN1aFByVVFxWVFVRWlUbVZoaDRGQlVLWjVYSW5lR1VwWDFTN21YUnhUDQojIExINll6Um9HRnFSb2M5QTBCQk5jb1hIVFdueFYyMTVrNFRlSE1GWUU1UkcwS1lBUzhYazVpS0lDRVh3blpyZUkNCiMgdDNqeXlncW9PS3NLWk1LL1psMlZoTUdoSlI2SFhScFFDeUFTekVHN2JndFJPTGhMeXdJREFRQUJvMk13WVRBTw0KIyBCZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXNUN0RhUVA0DQojIHYwY0IxSmdtR2dnQzcyTmtLOE13SHdZRFZSMGpCQmd3Rm9BVXNUN0RhUVA0djBjQjFKZ21HZ2dDNzJOa0s4TXcNCiMgRFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUJ3YUJwZmMxNXlmUElobUJnaFhJZHNoUi9ncVo2cS9HREoyUUJCWA0KIyB3WXJ6ZXRrUlpZNDErcDc4UmJXZTJVd3hTN2lSNkVNc2pyTjR6dHZqVTNseDF1VWhsQUhhVlllYUpHVDJpbWJNDQojIDNwdzN6YWcwc1dtYkk4aWVlQ0lyY0VQalZVY3hZUm52V01XRkwwNHc5cUF4RmlQSTUrSmxGalBMdnhvYm9EMzQNCiMgeWw2TE1ZdGdDSWt0REFaY1VyZkUrUXFZMFJWZm54SytmRFpqT0wxRXBIL2tKaXNLeEpkcERlbU00c0FRVjdqSQ0KIyBkaEtSVmZKSWFkaThLZ0piRDBUVUlESGI5THB3SmwyUVlKNjhTeGNKTDdUTEhrTm95UWNud2RKYzkrb2h1V2dTDQojIG5EeWN2NTc4Z0Z5Ylk4M3NSNm9sSjJlZ04vTUFnbjFVMTZuNDZTNFRvM2ZvSDBvd2dnYXVNSUlGbHFBREFnRUMNCiMgQWhBS0dnMGJjbytVdUxkd0ZDQjhLZ3JFTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3d4Q3pBSkJnTlZCQVlUQWxWVA0KIyBNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqDQojIGIyMHhLekFwQmdOVkJBTVRJa1JwWjJsRFpYSjBJRVZXSUVOdlpHVWdVMmxuYm1sdVp5QkRRU0FvVTBoQk1pa3cNCiMgSGhjTk1qQXdPREUzTURBd01EQXdXaGNOTWpNd09ESXlNVEl3TURBd1dqQ0J3REVUTUJFR0N5c0dBUVFCZ2pjOA0KIyBBZ0VERXdKRFNERVZNQk1HQ3lzR0FRUUJnamM4QWdFQ0V3UldZWFZrTVIwd0d3WURWUVFQREJSUWNtbDJZWFJsDQojIElFOXlaMkZ1YVhwaGRHbHZiakVZTUJZR0ExVUVCUk1QUTBoRkxURXhNaTR3TURBdU5UYzVNUXN3Q1FZRFZRUUcNCiMgRXdKRFNERVBNQTBHQTFVRUJ4TUdVSEpwYkd4NU1SWXdGQVlEVlFRS0V3MU9SVmhVYUdsdWF5QlRMa0V1TVFzdw0KIyBDUVlEVlFRTEV3SlNSREVXTUJRR0ExVUVBeE1OVGtWWVZHaHBibXNnVXk1QkxqQ0NBaUl3RFFZSktvWklodmNODQojIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTWJyOGs1QjRVVDdFOSs2U2tvYTNJaHk4djZ2U0hXYTVUZnB0UG4NCiMgQjFKUTdCZ3N3NkVEQ0kvSHJJbGNSUkYrZmVYR1lQWWFrSjVuZzFja00yMnUvRnRBbXJsaGI1VkxGT2VNaXViLw0KIyBSNWNQUTZJaGpkQ25UaVZQckJiWWV2Q215SE9UZHFjNzRHRnlnQksrZy9aTFpxT1dKRGtod1ZpbVROVFAxUk8vDQojIEJlYzNKSTNycjBDdUlxcUd2Q3QvVHVjUHN6Vnl1S1JWaXc1Z3ZNa2F3UXZmd1Q4TW1MZkZrcjk4bHQ0QmxUWkcNCiMgU2tvUHVtRVMrYkpkV01UdGRUZlpJaytLUXY2MG9XbXNXbEkvTHhlK20xcUluQ0VETEZuU3NRSU4rSEdrYWJXNQ0KIyBVaUVKNmJEalpDSUI1UGhRWGp2MFdYTFRHWnFUY2JCZUJMSUFuMDZMOVRJSDZvQ0c4N1FsclhkeXNPRGNhcWlRDQojIFNrQUo3YlhRc2NmV3NSSFdQclJ6VTM2QTJtT3hES0VSR3hIM2lQRHhmVjlOQUViOGhkRlRmeEpSTWEraEVBcXQNCiMgNnF4NFB1VVpidTdtOFRyaCtmSEtvNVM5YndYa1ltaTBURE9OcFlFUW1iNytsZWZjSHFMTmFJZ3BmZEs1aC8wVg0KIyBsVWxwRHdsTkdYTWZFMmFCaE5SNkw1Tzk5cjExWTJxSkExT21NQmNQTm9ZN2xqWG1kTUh1MVY5L0RFMEpLNE9ZDQojIFZ4Ym5VVk1xVGYzL1ZnWnhHZWNZTU1mYW1qdjQyc1BGdk1kYUNqOEMzTjRjMGQ0c1dPbHRKa2pDbWk1Zkt3OXkNCiMgVUdMelV6V09meDl5MGFUUW45U2QveTY4Y0JQL0psLzFrd3MzeFA0T3Jzemw1dkFGZW5UUXd0T0hMZ3NvazBFRg0KIyBGdWFMQWdNQkFBR2pnZ0gxTUlJQjhUQWZCZ05WSFNNRUdEQVdnQlNQNkg3d2JUSnFBQVVqeDNDWGFqcVEvMnZxDQojIDFEQWRCZ05WSFE0RUZnUVVVbHVvelBDSW9ZQnl1RDRkVkJjQ2xidzQ2Mzh3TWdZRFZSMFJCQ3N3S2FBbkJnZ3INCiMgQmdFRkJRY0lBNkFiTUJrTUYwTklMVlpCVlVRdFEwaEZMVEV4TWk0d01EQXVOVGM1TUE0R0ExVWREd0VCL3dRRQ0KIyBBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QjdCZ05WSFI4RWREQnlNRGVnTmFBemhqRm9kSFJ3DQojIE9pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXRaekV1WTNKc01EZWcNCiMgTmFBemhqRm9kSFJ3T2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdA0KIyBaekV1WTNKc01Fc0dBMVVkSUFSRU1FSXdOd1lKWUlaSUFZYjliQU1DTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwDQojIGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNd0J3WUZaNEVNQVFNd2ZnWUlLd1lCQlFVSEFRRUUNCiMgY2pCd01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdTQVlJS3dZQg0KIyBCUVVITUFLR1BHaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFVldRMjlrDQojIFpWTnBaMjVwYm1kRFFTMVRTRUV5TG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVk2SUI0UG5OY3poZGVtVlZpZHRUOFhUMFArL0VqOWJiYU1JbVI2SEVMVGNZWDE5Z2prc0ZOVXJSNg0KIyAvWFVQZ2FqL25TcGxyNU9qM0RKNUpDUG8yQVZLd1kxbVVXUzJ1WW9aUmluRUFvZERmRVNxZlRpUjE5ODJ4cDcyDQojIGdvMzQ3R1RNbnBwazJFcGR1SWlvaStkY3diYncxRGYybkZ6STNGY1g3SDFVSVBkOE00cDNVQXQ1V0NpVk1QSFcNCiMgWHhyUXQ1bjhqeGdMY3Vzdk9SWFpxWk9zZFRsN0hacHNWSG5HVVk3ODdPdTBJSnh1RnNpVU02NGJLR3p2TnFxdA0KIyBZeUZ5Ujk5RXJDVHFkWjY2dXJhRmlsQWdqUHdhTEZ6SlV3NithSy93V3hLQjdRMHBpSUNwZVgxWDBJTFp1NTZHDQojIFIyMDZWRWNteFdJTFlqUUUyTlpjVCs3dmJVem1NSUlHdkRDQ0JhU2dBd0lCQWdJUUEvRzA0Vjg2Z3ZFVWxuaXoNCiMgMTloSFhEQU5CZ2txaGtpRzl3MEJBUXNGQURCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbg0KIyBhVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUURFeUpFDQojIGFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERURXlNRFF4T0RFeU1EQXcNCiMgTUZvWERUSTNNRFF4T0RFeU1EQXdNRm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuDQojIGFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXlLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUINCiMgQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2RUK2creXRSUHhaTStFZ1B5dWdEWFJ0dGZIb3l5c0dpeXM4WVNzT2pVUw0KIyBPcEtSdWxma3hNbnpMNmhJUExmV2J0eVhJcnBSZVdHdlF5OE50NXUwU1RHdVJGZytwS0dXcDRkUEkzN0RiR1VrDQojIGtGVStvY29qZk1WQzZjUjZZa1diZmQ1amRNdWVZeVg0aEpxYXJVVlBybjBmeUJQTGRadko0ZUdLK0FzTW1QVEsNCiMgUHRCRnFub2VwVmlUTmpTK0t5NHJNVmhtdERJUW41M3dVcUh2NkQ3VGR2SkFXdHo2YWowYlM2MTJzSXhjN2phNg0KIyBnK293cUV6ZThRc3FXRUdJcmdDSnF3UFJGb0lnSW5iclhsUTRFbUxoMG5BazIrMGZjTkprQ1lBdDRyYWR6aC95DQojIHV5SHpiTnZZc3hsN2lsQ2Y3K3cyQ2x5YXQwclRDS0E1ZWYzZHZ6MDZDU1VDQXdFQUFhT0NBMWd3Z2dOVU1CSUcNCiMgQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZEpRUU1NQW9HQ0NzRw0KIyBBUVVGQndNRE1IOEdDQ3NHQVFVRkJ3RUJCSE13Y1RBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1DQojIFpHbG5hV05sY25RdVkyOXRNRWtHQ0NzR0FRVUZCekFDaGoxb2RIUndPaTh2WTJGalpYSjBjeTVrYVdkcFkyVnkNCiMgZEM1amIyMHZSR2xuYVVObGNuUklhV2RvUVhOemRYSmhibU5sUlZaU2IyOTBRMEV1WTNKME1JR1BCZ05WSFI4RQ0KIyBnWWN3Z1lRd1FLQStvRHlHT21oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwDQojIFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXcwTG1ScFoybGoNCiMgWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dnZ0hFQmdOVg0KIyBIU0FFZ2dHN01JSUJ0ekNDQWJNR0NXQ0dTQUdHL1d3REFqQ0NBYVF3T2dZSUt3WUJCUVVIQWdFV0xtaDBkSEE2DQojIEx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwzTnpiQzFqY0hNdGNtVndiM05wZEc5eWVTNW9kRzB3Z2dGa0JnZ3INCiMgQmdFRkJRY0NBakNDQVZZZWdnRlNBRUVBYmdCNUFDQUFkUUJ6QUdVQUlBQnZBR1lBSUFCMEFHZ0FhUUJ6QUNBQQ0KIyBRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFkQUJsQUNBQVl3QnZBRzRBY3dCMEFHa0FkQUIxQUhRQVpRQnpBQ0FBDQojIFlRQmpBR01BWlFCd0FIUUFZUUJ1QUdNQVpRQWdBRzhBWmdBZ0FIUUFhQUJsQUNBQVJBQnBBR2NBYVFCREFHVUENCiMgY2dCMEFDQUFRd0JRQUM4QVF3QlFBRk1BSUFCaEFHNEFaQUFnQUhRQWFBQmxBQ0FBVWdCbEFHd0FlUUJwQUc0QQ0KIyBad0FnQUZBQVlRQnlBSFFBZVFBZ0FFRUFad0J5QUdVQVpRQnRBR1VBYmdCMEFDQUFkd0JvQUdrQVl3Qm9BQ0FBDQojIGJBQnBBRzBBYVFCMEFDQUFiQUJwQUdFQVlnQnBBR3dBYVFCMEFIa0FJQUJoQUc0QVpBQWdBR0VBY2dCbEFDQUENCiMgYVFCdUFHTUFid0J5QUhBQWJ3QnlBR0VBZEFCbEFHUUFJQUJvQUdVQWNnQmxBR2tBYmdBZ0FHSUFlUUFnQUhJQQ0KIyBaUUJtQUdVQWNnQmxBRzRBWXdCbEFDNHdIUVlEVlIwT0JCWUVGSS9vZnZCdE1tb0FCU1BIY0pkcU9wRC9hK3JVDQojIE1COEdBMVVkSXdRWU1CYUFGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVpNMG9NZ1RNMzI2MDJ5ZVRKT3J1MUd5NTZvdUwwUTBJWG5yOU9vVTNoc2R2cGdkMmZBZkxraU5YcA0KIyAvZ245SWNIc1hZRFM4TmJCUThMK2R5dmIrZGVSTTg1czFiSVpPK1l1MXNtVFQ0aEFqczNoOVg3eEQ4WlpWbkxvDQojIDYycEJ2UnpWUnRWOFNjcG1PQlhCditDUmNIZUgzTW1OTWNrTUthSXo3WTNpaDgySmpUOGIvOVhnR3BlTGZOcHQNCiMgKzZqR3NqcG1hM3NCczgzWXBqVHNFZ0dybFZpbHhGTlhxR0RtNXdJU29Ma2paS0pOdTN5QkpXUWh2cy91UWhoRA0KIyBsN3VsTndhdlRmOG1wVTFoUyt4R1FiaGx6cmg1bmdpV0M0R01panVQeDVtTW95cHVtRzFlWWNhV3Q0cTVZUzJUDQojIHVPc09CRVBYOWY2bThHTFVtV3Fsd2NId1pKU0FNWUlRdERDQ0VMQUNBUUV3Z1lBd2JERUxNQWtHQTFVRUJoTUMNCiMgVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMA0KIyBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5DQojIEtRSVFDaG9ORzNLUGxMaTNjQlFnZkNvS3hEQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQmhEQVlCZ29yQmdFRUFZSTMNCiMgQWdFTU1Rb3dDS0FDZ0FDaEFvQUFNQmtHQ1NxR1NJYjNEUUVKQXpFTUJnb3JCZ0VFQVlJM0FnRUVNQndHQ2lzRw0KIyBBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNCSjlQWVNuUGJJDQojIFBtYWM2Z2xHZnltOUNGTmp6T0l6TE1KRFZ5TERuMWdpSERBTkJna3Foa2lHOXcwQkFRRUZBQVNDQWdCaGk5VysNCiMgOVdwdDBMY1E4U0F6SEJKZGUyTjBJdFJGUlFhOFpja1dJZy9oeGJ2OVZQTjY2cXNLT2pzQ29OSFhnbGlKbGRvYg0KIyA5NEQ0ZTBaNTVwRjF0aDRWamtHbXRIdjNNVDdGZGR2YTdtMkxrK2VYN2JrZVcwYlQxY2hPcFdMeVYrU2tRdEFmDQojIFdWanBXNHRTcEFLeDArcCtiWmgxRXNMK1VacmFNSEZGOXV6bUZsdmJXdG9yWElkRlB2UThXVXZZenhZV2pYOFANCiMgUlhqT01ZMjhOcUcwdnNORm1IclVjQnBLTTkrMXhiMFdDY2syQTI2YjVJWHBIU21WWkEzYzN6Z25Kb0xzN1RRTg0KIyBXcmRtMm1RbUt6LzBpTEJSNFlVbTZJUjVoa1RscGhRUXl0aWQ5VndhVWMzdEQydkpLVk91aUp4cHQ4KytzOEVNDQojIHJQWm5rQWsrSkpWRVBibi8xL1h0RC9GYXN3cXBOb2RlcUhwK0h2Q2dnUktIS1h1T1Ntb2tmSUR5bU5UUWF6a0gNCiMgN3lpVkMrYTY5QXJweDAwdnV5MVExUHFib1FxOSthU3I2OGEwMkczQkVtYVNVd0pOMFlHRTJ1eVJ6NENFZ09lLw0KIyAvc2J3V0xXazZRRlRER09wMzdoSG5BMWk2eUZZeEwvUElqS1ZHaW5uTkcrVDR1ZEFNYThscjRUbkt4a3dBT0hZDQojIHIzSm1TdHo3VmI5UnpLYTRCd293aXAwRmlldCt0eTJNYTZPelBXbGkzN2JVRlBXUGZGS0cwTXlCc3pOcTJlUGUNCiMgeWdoY2pENFlQek1HV0RmSEJxMWdTc0FzQlhwNit1QTR6KzBYN3VSVlhuaW9uNDJJUDdRaWtyQ2ZDNGJzTnFkbQ0KIyBXVXYvWTRYUlRSMGlOLzZFV2hZTkVmcklxNEdZd3hHaWNIRlFrS0dDRFgwd2dnMTVCZ29yQmdFRUFZSTNBd01CDQojIE1ZSU5hVENDRFdVR0NTcUdTSWIzRFFFSEFxQ0NEVll3Z2cxU0FnRURNUTh3RFFZSllJWklBV1VEQkFJQkJRQXcNCiMgZHdZTEtvWklodmNOQVFrUUFRU2dhQVJtTUdRQ0FRRUdDV0NHU0FHRy9Xd0hBVEF4TUEwR0NXQ0dTQUZsQXdRQw0KIyBBUVVBQkNBYWF3UkhIdU1QQnRhd3c0WVJoZlVERkRyTWJhK3VzYitVblhhamxMQUNtQUlRZHZNSEJHN2FESGs1DQojIDQydXRLbHloL1JnUE1qQXlNVEE1TWpFd09ESXlNRGxhb0lJS056Q0NCUDR3Z2dQbW9BTUNBUUlDRUExQ1N1QysNCiMgT29qL1lFQWh6aFFBOE4wd0RRWUpLb1pJaHZjTkFRRUxCUUF3Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVg0KIyBCQW9UREVScFoybERaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXhNQzhHDQojIEExVUVBeE1vUkdsbmFVTmxjblFnVTBoQk1pQkJjM04xY21Wa0lFbEVJRlJwYldWemRHRnRjR2x1WnlCRFFUQWUNCiMgRncweU1UQXhNREV3TURBd01EQmFGdzB6TVRBeE1EWXdNREF3TURCYU1FZ3hDekFKQmdOVkJBWVRBbFZUTVJjdw0KIyBGUVlEVlFRS0V3NUVhV2RwUTJWeWRDd2dTVzVqTGpFZ01CNEdBMVVFQXhNWFJHbG5hVU5sY25RZ1ZHbHRaWE4wDQojIFlXMXdJREl3TWpFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURDNW1HRVo4V0sNCiMgOVEwSXBFWEtZMnRSMXpvUlFyMEtkWFZObExRTVVMVW1FUDRkeUcrUmF3eVc1eHBjU085RTViK2JZYzBWa1dKYQ0KIyB1UDluQzV4ai9UWnFnZm9wK04wcmNJWGVBaGp6ZUcyOGZmbkhiUWs5dm1wMmgrbUt2ZmlFWFI1MnllVEdkblk2DQojIFU5SFIwMW8yajhhajRTOGJPcmRoMW5Qc1RtMHppbnhkUlMxTHNWRG1RVG8zVm9iY2t5T045MUFsNkdUbTNkT1ANCiMgTDFlMWh5RHJEbzRzMVNQYTlFMTRSdU1EZ3pFcFNsd01NWXBLaklqRjl6QmErUlN2RlY5c1Ewa0ovU1lqVS9hTg0KIyBZK2dhcTF1eEhURENtMm1DdE52OFZsUzhINkdIcTc1Nld3b2dMMHNKeVpXbmpiTDYxbU9MVHFWeUhPNmZlZ0Z6DQojICtCblcvZzFKaEwwQkFnTUJBQUdqZ2dHNE1JSUJ0REFPQmdOVkhROEJBZjhFQkFNQ0I0QXdEQVlEVlIwVEFRSC8NCiMgQkFJd0FEQVdCZ05WSFNVQkFmOEVEREFLQmdnckJnRUZCUWNEQ0RCQkJnTlZIU0FFT2pBNE1EWUdDV0NHU0FHRw0KIyAvV3dIQVRBcE1DY0dDQ3NHQVFVRkJ3SUJGaHRvZEhSd09pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOURVRk13DQojIEh3WURWUjBqQkJnd0ZvQVU5TGJoSUIzK0thN1M1R0dsc3FJbHNzZ1hOVzR3SFFZRFZSME9CQllFRkRaRWhvNmsNCiMgdXJCbXZyd29MUjFFTnQzamFucThNSEVHQTFVZEh3UnFNR2d3TXFBd29DNkdMR2gwZEhBNkx5OWpjbXd6TG1ScA0KIyBaMmxqWlhKMExtTnZiUzl6YUdFeUxXRnpjM1Z5WldRdGRITXVZM0pzTURLZ01LQXVoaXhvZEhSd09pOHZZM0pzDQojIE5DNWthV2RwWTJWeWRDNWpiMjB2YzJoaE1pMWhjM04xY21Wa0xYUnpMbU55YkRDQmhRWUlLd1lCQlFVSEFRRUUNCiMgZVRCM01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdUd1lJS3dZQg0KIyBCUVVITUFLR1EyaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRGTklRVEpCDQojIGMzTjFjbVZrU1VSVWFXMWxjM1JoYlhCcGJtZERRUzVqY25Rd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFZ2MNCiMgM0xYcG1pTzg1eHJuSUE2T1owYjlRbkpSZEFvalI2T3JrdElseEhCWnZoU2c1U2VCcFUwVUZSa0hlZkRSQk1PRw0KIyAyVHU5L2tRQ1prM3RhYVFQOXJod3oyTG85VkZLZUhrMmVpZTM4K2RTbjVPbjdVT2VlK2UwM1VFaWlmdUhva1lEDQojIFR2ejAvcmRrZDJOZkkxSnBnNEw2R2xQdGtNeU5vUmR6RGZUelpUbHdTL09jMW5wNzJneThQVExRRzh2MVlmeDENCiMgQ0FCMnZJRU8rTURoWE0vRUVYTG5HMlJKMkNLYWRSVkM5UzB5T0lIYTlHQ2l1clJTKzF6Z1lTUWxUN0xmeVNtbw0KIyBjME5SMnIxajFoOWJtL2N1RzA4VEhmZEtEWEYrbDdmMFA0VHJ3ZU9qU2FINnpxZS9Wcys2V1haaGlWOStwN1NPDQojIFozajVOcGpoeXlqYVc0ZW1paTh3Z2dVeE1JSUVHYUFEQWdFQ0FoQUtvU1hXMWpJYmZrSGtCZG8ybDhJVk1BMEcNCiMgQ1NxR1NJYjNEUUVCQ3dVQU1HVXhDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSg0KIyBibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4SkRBaUJnTlZCQU1URzBScFoybERaWEowDQojIElFRnpjM1Z5WldRZ1NVUWdVbTl2ZENCRFFUQWVGdzB4TmpBeE1EY3hNakF3TURCYUZ3MHpNVEF4TURjeE1qQXcNCiMgTURCYU1ISXhDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVg0KIyBCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4TVRBdkJnTlZCQU1US0VScFoybERaWEowSUZOSVFUSWdRWE56DQojIGRYSmxaQ0JKUkNCVWFXMWxjM1JoYlhCcGJtY2dRMEV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcNCiMgZ2dFS0FvSUJBUUM5MERMdVM4MlBmOTJwdW9LWnhUbFVLRmUySTByRURnZEZNMUVRZmRENWZVMW9mdWUyb1BTTg0KIyBzNGprbDc5aklaQ1l2eE84VjlQRDRYNEkxbW9VQURqM0xoNDc3c3ltOWpKWi9sOWxQK0NiNitOR1J3WWFWWDRMDQojIEozN0FvdldnNE40aVB3Ny9mcFg3ODZPNklqNFlyQkhrOEprRGJUdUZmQW5UN2wzSW1ndFU0NmdKY1d2Z3p5SVENCiMgRDNYUGNYSk9DcTNmUURwY3QxSGhvWGtVeGswa0l6QmR2T3c4WUdxc0x3Zk0vZkRxUjltSVVGNzlabTVXWVNjcA0KIyBpWVJSNW9MblJsRDlsQ29zcCtSMVBycVlENFIvbnpFVTFxM1Y4bVRMZXg0RjBJUVpjaGZ4RndidlBjM1dUZThHDQojIFF2MmlVeXBQaFIzRUhUeXZ6OXFzRVBYZHJLenBWditUQWdNQkFBR2pnZ0hPTUlJQnlqQWRCZ05WSFE0RUZnUVUNCiMgOUxiaElCMytLYTdTNUdHbHNxSWxzc2dYTlc0d0h3WURWUjBqQkJnd0ZvQVVSZXVpci9TU3k0SXhMVkdMcDZjaA0KIyBuZk50eUE4d0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFEQU9CZ05WSFE4QkFmOEVCQU1DQVlZd0V3WURWUjBsDQojIEJBd3dDZ1lJS3dZQkJRVUhBd2d3ZVFZSUt3WUJCUVVIQVFFRWJUQnJNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUncNCiMgT2k4dmIyTnpjQzVrYVdkcFkyVnlkQzVqYjIwd1F3WUlLd1lCQlFVSE1BS0dOMmgwZEhBNkx5OWpZV05sY25Seg0KIyBMbVJwWjJsalpYSjBMbU52YlM5RWFXZHBRMlZ5ZEVGemMzVnlaV1JKUkZKdmIzUkRRUzVqY25Rd2dZRUdBMVVkDQojIEh3UjZNSGd3T3FBNG9EYUdOR2gwZEhBNkx5OWpjbXcwTG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFRnoNCiMgYzNWeVpXUkpSRkp2YjNSRFFTNWpjbXd3T3FBNG9EYUdOR2gwZEhBNkx5OWpjbXd6TG1ScFoybGpaWEowTG1Odg0KIyBiUzlFYVdkcFEyVnlkRUZ6YzNWeVpXUkpSRkp2YjNSRFFTNWpjbXd3VUFZRFZSMGdCRWt3UnpBNEJncGdoa2dCDQojIGh2MXNBQUlFTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwZEhCek9pOHZkM2QzTG1ScFoybGpaWEowTG1OdmJTOUQNCiMgVUZNd0N3WUpZSVpJQVliOWJBY0JNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ4bFJMcFVZZFdhYzN2M2RwOA0KIyBxbU42czNqUEJqZEFoTzlMaEwvS3p3TUMvY1dud3c0Z1FpeXZkL01ySHd3aFdpcTNCVFFkYXE2WitDZWlacjhKDQojIHFtRGZkcVE2a3cvNHN0SFlmQmxpNkY2Q0pSN0V1aHg3TENIaTFsc3NGRFZEQkdpeTIzVUM0SExIbU5ZOFpPVWYNCiMgU0JBWVg0azRZVTFpUmlTSFk0eVJVaXl2S1lubGVCL1dDeFNsZ05jU1IzQ3pkZFdUaFpOK3RwSm4rMU5oaWFqMQ0KIyBhNWJBOUZocERYeklBYkc1S0hXM21XT0ZJb3hoeW5tVWZsbjhqQS9qYjdVQkpyWnNwZTZIVVNIa1dHQ2J1Z3d0DQojIEsyMml4SDY3eENVclJ3SUlmRW11RTdiaGZFSkNLTVlZVnM5Qk5MWm1YYlowZS9WV015SXZJamF5UzZKS2xkajENCiMgcG81U01ZSUNoakNDQW9JQ0FRRXdnWVl3Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXhNQzhHQTFVRUF4TW9SR2xuDQojIGFVTmxjblFnVTBoQk1pQkJjM04xY21Wa0lFbEVJRlJwYldWemRHRnRjR2x1WnlCRFFRSVFEVUpLNEw0NmlQOWcNCiMgUUNIT0ZBRHczVEFOQmdsZ2hrZ0JaUU1FQWdFRkFLQ0IwVEFhQmdrcWhraUc5dzBCQ1FNeERRWUxLb1pJaHZjTg0KIyBBUWtRQVFRd0hBWUpLb1pJaHZjTkFRa0ZNUThYRFRJeE1Ea3lNVEE0TWpJd09Wb3dLd1lMS29aSWh2Y05BUWtRDQojIEFnd3hIREFhTUJnd0ZnUVU0ZGVDcU9HUnZ1OXJ5aGFSdGFxMGxLWWttL013THdZSktvWklodmNOQVFrRU1TSUUNCiMgSUpYajZoTkRWQlJIK2Y2TG4xRWdVaTJ3YnBJenk5QmZ2UFZ1eVdZOVZ1WUpNRGNHQ3lxR1NJYjNEUUVKRUFJdg0KIyBNU2d3SmpBa01DSUVJTE1Ra0FhOEN0bURCNUZYS2VCRUEwRmNnK01wSzJGUEpwWk1qVFZ4N1BXcE1BMEdDU3FHDQojIFNJYjNEUUVCQVFVQUJJSUJBSFZ2aXBDdDkrVkdabE1xYkdKU0VEbWVzNE9ia1MwK1l6NWx3NjJvQ0g1U1kxSnQNCiMgSjhsaVdBU0JCQW9GNU1LSi9jODZ1ZVQ4SHRpbmpCRDRqQlN0NUhZRG1maExpMllmdk5OVmp3UEhQR2VOY05veQ0KIyArVlBlcXU3Y1Vtay9rTStqZkhzbUg2MHZRem9BOEtkSWtNT1NxMnlHVkthUmRjZndSc2FiZEJxWFoycllpM1kyDQojIFhlQ21XcEtlYUw4UVJFbVhqOE1aVHpGQzBaL2plODRFM1FzbWJIUThGdUJMVmZtYTh0Wnl0cnU3RGNYQXhwc2oNCiMgSGtRZWtXODdRUjNSY2xUK0haWXZqcEwwNkF0RnREc3c3VEpLTFZhREtLNjR3SkJ3QVJlVjB3RlRNVzhkMXg3Rg0KIyByNVZhOFY2S21zR1hwRXlJNTRaVzVibXZSOXdGUjNYcXN6Zkw0aFU9DQojIFNJRyAjIEVuZCBzaWduYXR1cmUgYmxvY2sNCg=="}}}