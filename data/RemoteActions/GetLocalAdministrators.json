{"id": "Get_Local_Administrators_windows", "name": "Get Local Administrators", "description": "Obtains a list and total number of identities (local and domain users or groups) who are members of the target device Administrators group, filtered by provided whitelist.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Optional list of identities (users and groups) to be excluded from the data obtained. Multiple values are comma-separated. Example values are \"DOMAIN\\User, Admin, Local Admin, Admin Group\"", "id": "Whitelist", "name": "Whitelist", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "List of local identities (users and groups) added to Administrators group", "id": "LocalIdentities", "name": "LocalIdentities", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of domain identities (users and groups) added to Administrators group", "id": "DomainIdentities", "name": "DomainIdentities", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of identities (users and groups) added to Administrators group, excluding the ones present in the whitelist", "id": "TotalIdentities", "name": "TotalIdentities", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-LocalAdministrators.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KUmV0cmlldmVzIGN1cnJlbnQgbWVtYmVycyBvZiB0aGUgQWRtaW5pc3RyYXRvcnMgZ3JvdXAgb24gYSB0YXJnZXQgZGV2aWNlIGJhc2VkIG9uIHByb3ZpZGVkIHdoaXRlbGlzdC4NCg0KLkRFU0NSSVBUSU9ODQpPYnRhaW5zIGEgbGlzdCBhbmQgdG90YWwgbnVtYmVyIG9mIGlkZW50aXRpZXMgKGxvY2FsIGFuZCBkb21haW4gdXNlcnMgb3IgZ3JvdXBzKSB3aG8gYXJlIG1lbWJlcnMgb2YgdGhlIHRhcmdldCBkZXZpY2UgQWRtaW5pc3RyYXRvcnMgZ3JvdXAsIGZpbHRlcmVkIGJ5IHByb3ZpZGVkIHdoaXRlbGlzdC4NCg0KLkZVTkNUSU9OQUxJVFkNCk9uLWRlbWFuZA0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIFdoaXRlbGlzdCAgICAgICAgICAgICAgICAgICAgICAgT3B0aW9uYWwgbGlzdCBvZiBpZGVudGl0aWVzICh1c2VycyBhbmQgZ3JvdXBzKSB0byBiZSBleGNsdWRlZCBmcm9tIHRoZSBkYXRhIG9idGFpbmVkLiBNdWx0aXBsZSB2YWx1ZXMgYXJlIGNvbW1hLXNlcGFyYXRlZC4gRXhhbXBsZSB2YWx1ZXMgYXJlICJET01BSU5cVXNlciwgQWRtaW4sIExvY2FsIEFkbWluLCBBZG1pbiBHcm91cCINCg0KLk9VVFBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIExvY2FsSWRlbnRpdGllcyAgICAgICAgICAgICAgICAgU3RyaW5nTGlzdCAgICAgIExpc3Qgb2YgbG9jYWwgaWRlbnRpdGllcyAodXNlcnMgYW5kIGdyb3VwcykgYWRkZWQgdG8gQWRtaW5pc3RyYXRvcnMgZ3JvdXANCjIgICBEb21haW5JZGVudGl0aWVzICAgICAgICAgICAgICAgIFN0cmluZ0xpc3QgICAgICBMaXN0IG9mIGRvbWFpbiBpZGVudGl0aWVzICh1c2VycyBhbmQgZ3JvdXBzKSBhZGRlZCB0byBBZG1pbmlzdHJhdG9ycyBncm91cA0KMyAgIFRvdGFsSWRlbnRpdGllcyAgICAgICAgICAgICAgICAgSW50ICAgICAgICAgICAgIFRvdGFsIG51bWJlciBvZiBpZGVudGl0aWVzICh1c2VycyBhbmQgZ3JvdXBzKSBhZGRlZCB0byBBZG1pbmlzdHJhdG9ycyBncm91cCwgZXhjbHVkaW5nIHRoZSBvbmVzIHByZXNlbnQgaW4gdGhlIHdoaXRlbGlzdA0KDQouTk9URVMNCkNvbnRleHQ6ICAgICAgICAgICAgTG9jYWxTeXN0ZW0NClZlcnNpb246ICAgICAgICAgICAgMS4wLjAuMCAtIEluaXRpYWwgcmVsZWFzZQ0KTGFzdCBHZW5lcmF0ZWQ6ICAgICAyMiBKdWwgMjAxOSAtIDExOjM4OjU2DQpDb3B5cmlnaHQgKEMpIDIwMTkgTmV4dGhpbmsgU0EsIFN3aXR6ZXJsYW5kDQojPg0KDQojDQojIElucHV0IHBhcmFtZXRlcnMgZGVmaW5pdGlvbg0KIw0KcGFyYW0oDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kV2hpdGVsaXN0DQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVNT1RFX0FDVElPTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dHJlbW90ZWFjdGlvbnMuZGxsIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQURNSU5fR1JPVVBfU0VDVVJJVFlfSUQnIC1WYWx1ZSAnUy0xLTUtMzItNTQ0JyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ05FVF9FWEUnIC1WYWx1ZSAiJGVudjpTWVNURU1ST09UXFN5c3RlbTMyXG5ldC5leGUiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQUNDT1VOVF9JTlZBTElEX0NIQVJBQ1RFUlMnIC1WYWx1ZSBAKCciJywgJy8nLCAnWycsICddJywgJzonLCAnOycsICd8JywgJz0nLCAnLCcsICcrJywgJyonLCAnPycsICc8JywgJz4nKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0FDQ09VTlRfTUFYX0xFTkdUSCcgLVZhbHVlIDIwIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnRE9NQUlOX1NFUEFSQVRPUicgLVZhbHVlICdcJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ05FVF9PVVRQVVRfSEVBREVSX0xFTkdUSCcgLVZhbHVlIDQgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdORVRfT1VUUFVUX0ZPT1RFUl9MRU5HVEgnIC1WYWx1ZSAyIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnU0lOR0xFX1FVT1RFUycgLVZhbHVlICInJyIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdET1VCTEVfUVVPVEVTJyAtVmFsdWUgJyIiJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCiMNCiMgSW52b2tlIE1haW4NCiMNCmZ1bmN0aW9uIEludm9rZS1NYWluIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICAkZXhpdENvZGUgPSAwDQogICAgJGFkbWluSWRlbnRpdGllcyA9IEluaXRpYWxpemUtQWRtaW5JZGVudGl0aWVzT3V0cHV0DQoNCiAgICB0cnkgew0KICAgICAgICBBZGQtTmV4dGhpbmtSZW1vdGVBY3Rpb25ETEwNCg0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0xvY2FsU3lzdGVtDQogICAgICAgIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uDQogICAgICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCg0KICAgICAgICBbc3RyaW5nW11dJHdoaXRlTGlzdCA9IFNwbGl0LVBhcmFtZXRlciAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5XaGl0ZWxpc3QgLVNlcGFyYXRvciAnLCcNCiAgICAgICAgJGFkbWluSWRlbnRpdGllcyA9IEdldC1BZG1pbklkZW50aXRpZXNCeUdyb3VwIC1XaGl0ZWxpc3QgJHdoaXRlTGlzdA0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9IGZpbmFsbHkgew0KICAgICAgICBVcGRhdGUtRW5naW5lT3V0cHV0VmFyaWFibGVzIC1BZG1pbklkZW50aXRpZXMgJGFkbWluSWRlbnRpdGllcw0KICAgIH0NCg0KICAgIHJldHVybiAkZXhpdENvZGUNCn0NCg0KZnVuY3Rpb24gSW5pdGlhbGl6ZS1BZG1pbklkZW50aXRpZXNPdXRwdXQgew0KICAgIHJldHVybiBAe0xvY2FsSWRlbnRpdGllcyA9ICctJw0KICAgICAgICAgICAgIERvbWFpbklkZW50aXRpZXMgPSAnLScNCiAgICAgICAgICAgICBUb3RhbElkZW50aXRpZXMgPSAwfQ0KfQ0KDQojDQojIFRlbXBsYXRlIGZ1bmN0aW9ucw0KIw0KZnVuY3Rpb24gQWRkLU5leHRoaW5rUmVtb3RlQWN0aW9uRExMIHsNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAnTmV4dGhpbmsgUmVtb3RlIEFjdGlvbiBETEwgbm90IGZvdW5kLiAnDQogICAgfQ0KICAgIEFkZC1UeXBlIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUnVubmluZ0FzTG9jYWxTeXN0ZW0gew0KICAgICRjdXJyZW50SWRlbnRpdHkgPSBHZXQtQ3VycmVudElkZW50aXR5DQogICAgaWYgKCRjdXJyZW50SWRlbnRpdHkgLW5lICRMT0NBTF9TWVNURU1fSURFTlRJVFkpIHsNCiAgICAgICAgdGhyb3cgJ1RoaXMgc2NyaXB0IG11c3QgYmUgcnVuIGFzIExvY2FsU3lzdGVtLiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ3VycmVudElkZW50aXR5IHsNCiAgICByZXR1cm4gW3NlY3VyaXR5LnByaW5jaXBhbC53aW5kb3dzaWRlbnRpdHldOjpHZXRDdXJyZW50KCkuVXNlci5Ub1N0cmluZygpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uIHsNCiAgICAkT1NWZXJzaW9uID0gKEdldC1PU1ZlcnNpb24pIC1hcyBbdmVyc2lvbl0NCiAgICBpZiAoLW5vdCAoJE9TVmVyc2lvbikpIHsNCiAgICAgICAgdGhyb3cgJ1RoaXMgc2NyaXB0IGNvdWxkIG5vdCByZXR1cm4gT1MgdmVyc2lvbi4gJw0KICAgIH0NCiAgICBpZiAoKCRPU1ZlcnNpb24uTWFqb3IgLW5lIDYgLW9yICRPU1ZlcnNpb24uTWlub3IgLW5lIDEpIC1hbmQgYA0KICAgICAgICAoJE9TVmVyc2lvbi5NYWpvciAtbmUgMTApKSB7DQogICAgICAgIHRocm93ICdUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyA3IGFuZCAxMCBvbmx5LiAnDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCiAgICByZXR1cm4gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfT3BlcmF0aW5nU3lzdGVtIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsdGVyICdQcm9kdWN0VHlwZSA9IDEnIC1FcnJvckFjdGlvbiBTdG9wIHwgYA0KICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgVmVyc2lvbg0KfQ0KDQpmdW5jdGlvbiBXcml0ZS1TdGF0dXNNZXNzYWdlIChbcHNvYmplY3RdJE1lc3NhZ2UpIHsNCiAgICAkZXhjZXB0aW9uID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJGVycm9yTGluZU1lc3NhZ2UgPSAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKScuICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JMaW5lTWVzc2FnZSArICRleGNlcHRpb24pDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1Qcm9jZXNzIChbc3RyaW5nXSRGaWxlUGF0aCwgW3N0cmluZ10kQXJndW1lbnRzKSB7DQogICAgJG91dHB1dCA9IEB7RXhpdENvZGUgPSAtMQ0KICAgICAgICAgICAgICAgIFN0ZE91dCA9ICRudWxsDQogICAgICAgICAgICAgICAgU3RkRXJyID0gJG51bGx9DQogICAgJHByb2Nlc3NJbmZvID0gTmV3LW9iamVjdCAtVHlwZU5hbWUgRGlhZ25vc3RpY3MuUHJvY2Vzc1N0YXJ0SW5mbw0KICAgICRwcm9jZXNzSW5mby5DcmVhdGVOb1dpbmRvdyA9ICR0cnVlDQogICAgJHByb2Nlc3NJbmZvLlVzZVNoZWxsRXhlY3V0ZSA9ICRmYWxzZQ0KICAgICRwcm9jZXNzSW5mby5SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ID0gJHRydWUNCiAgICAkcHJvY2Vzc0luZm8uUmVkaXJlY3RTdGFuZGFyZEVycm9yID0gJHRydWUNCiAgICAkcHJvY2Vzc0luZm8uRmlsZU5hbWUgPSAkRmlsZVBhdGgNCiAgICAkcHJvY2Vzc0luZm8uQXJndW1lbnRzID0gJEFyZ3VtZW50cw0KICAgICRwcm9jZXNzSW5mby5Xb3JraW5nRGlyZWN0b3J5ID0gU3BsaXQtUGF0aCAkRmlsZVBhdGggLVBhcmVudA0KICAgICRwcm9jZXNzID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgRGlhZ25vc3RpY3MuUHJvY2Vzcw0KICAgICRwcm9jZXNzLlN0YXJ0SW5mbyA9ICRwcm9jZXNzSW5mbw0KDQogICAgdHJ5IHsNCiAgICAgICAgW3ZvaWRdJHByb2Nlc3MuU3RhcnQoKQ0KICAgICAgICAkb3V0cHV0LlN0ZE91dCA9ICRwcm9jZXNzLlN0YW5kYXJkT3V0cHV0LlJlYWRUb0VuZCgpDQogICAgICAgICRvdXRwdXQuU3RkRXJyID0gJHByb2Nlc3MuU3RhbmRhcmRFcnJvci5SZWFkVG9FbmQoKQ0KICAgICAgICAkcHJvY2Vzcy5XYWl0Rm9yRXhpdCgpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICInJEZpbGVQYXRoJyBleGVjdXRpb24gZmFpbGVkLiAiDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgJG91dHB1dC5FeGl0Q29kZSA9ICRwcm9jZXNzLkV4aXRDb2RlDQogICAgICAgICRwcm9jZXNzLkRpc3Bvc2UoKQ0KICAgIH0NCg0KICAgIHJldHVybiAkb3V0cHV0DQp9DQoNCmZ1bmN0aW9uIEVkaXQtU3RyaW5nTGlzdFJlc3VsdCAoW3N0cmluZ1tdXSRTdHJpbmdMaXN0KSB7DQogICAgcmV0dXJuICQoaWYgKCRTdHJpbmdMaXN0LkNvdW50IC1ndCAwKSB7ICRTdHJpbmdMaXN0IH0gZWxzZSB7ICctJyB9KQ0KfQ0KDQojDQojIElucHV0IHBhcmFtZXRlciB2YWxpZGF0aW9uDQojDQpmdW5jdGlvbiBUZXN0LUlucHV0UGFyYW1ldGVycyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgVGVzdC1XaGl0ZWxpc3RJbnB1dFBhcmFtZXRlciBgDQogICAgICAgIC1QYXJhbU5hbWUgJ1doaXRlbGlzdCcgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuV2hpdGVsaXN0DQp9DQoNCmZ1bmN0aW9uIFRlc3QtV2hpdGVsaXN0SW5wdXRQYXJhbWV0ZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmKFtzdHJpbmddOjpJc051bGxPckVtcHR5KChGb3JtYXQtVmFsdWUgLVZhbHVlICRQYXJhbVZhbHVlKSkpIHsgcmV0dXJuIH0NCg0KICAgICR3aGl0ZWxpc3QgPSBTcGxpdC1QYXJhbWV0ZXIgLVZhbHVlICRQYXJhbVZhbHVlIC1TZXBhcmF0b3IgJywnDQogICAgZm9yZWFjaCAoJGlkZW50aXR5TmFtZSBpbiAkd2hpdGVsaXN0KSB7DQogICAgICAgIFRlc3QtSWRlbnRpdHlMZW5ndGggLUlkZW50aXR5ICRpZGVudGl0eU5hbWUNCiAgICAgICAgVGVzdC1JZGVudGl0eUludmFsaWRDaGFycyAtSWRlbnRpdHkgJGlkZW50aXR5TmFtZQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgkRE9VQkxFX1FVT1RFUywgJycpLlJlcGxhY2UoJFNJTkdMRV9RVU9URVMsICcnKS5UcmltKCkNCn0NCg0KZnVuY3Rpb24gU3BsaXQtUGFyYW1ldGVyIChbc3RyaW5nXSRWYWx1ZSwgW3N0cmluZ10kU2VwYXJhdG9yKSB7DQogICAgW3N0cmluZ1tdXSRwYXJhbXMgPSBAKCcnKQ0KICAgIFtzdHJpbmddJHZhbHVlQ2xlYW4gPSBGb3JtYXQtVmFsdWUgLVZhbHVlICRWYWx1ZQ0KDQogICAgaWYoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJHZhbHVlQ2xlYW4pKSB7IHJldHVybiAkcGFyYW1zIH0NCg0KICAgIFtzdHJpbmdbXV0kcGFyYW1zID0gJHZhbHVlQ2xlYW4uU3BsaXQoJFNlcGFyYXRvciwgW3N0cmluZ3NwbGl0b3B0aW9uc106OlJlbW92ZUVtcHR5RW50cmllcykNCiAgICAkcGFyYW1Db3VudCA9ICRwYXJhbXMuTGVuZ3RoDQogICAgZm9yICgkaSA9IDA7ICRpIC1sdCAkcGFyYW1Db3VudDsgJGkrKykgew0KICAgICAgICAkcGFyYW1zWyRpXSA9ICRwYXJhbXNbJGldLlRyaW0oKQ0KICAgIH0NCg0KICAgIHJldHVybiAkcGFyYW1zDQp9DQoNCmZ1bmN0aW9uIFRlc3QtSWRlbnRpdHlMZW5ndGggKFtzdHJpbmddJElkZW50aXR5KSB7DQogICAgJGlkZW50aXR5TGVuZ3RoID0gJElkZW50aXR5Lkxlbmd0aA0KICAgIGlmIChUZXN0LURvbWFpbklkZW50aXR5IC1JZGVudGl0eSAkSWRlbnRpdHkpIHsNCiAgICAgICAgJGlkZW50aXR5TGVuZ3RoID0gKCRpZGVudGl0eU5hbWUuU3BsaXQoJERPTUFJTl9TRVBBUkFUT1IpWzFdKS5MZW5ndGgNCiAgICB9DQogICAgaWYgKCRpZGVudGl0eUxlbmd0aCAtZ3QgJEFDQ09VTlRfTUFYX0xFTkdUSCkgew0KICAgICAgICB0aHJvdyAiSWRlbnRpdHkgTmFtZSAnJElkZW50aXR5JyBpcyBsb25nZXIgdGhhbiAkQUNDT1VOVF9NQVhfTEVOR1RIIGNoYXJhY3RlcnMuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtRG9tYWluSWRlbnRpdHkgKFtzdHJpbmddJElkZW50aXR5KSB7DQogICAgcmV0dXJuICgkSWRlbnRpdHkgLW1hdGNoIFtyZWdleF06OkVzY2FwZSgkRE9NQUlOX1NFUEFSQVRPUikpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtSWRlbnRpdHlJbnZhbGlkQ2hhcnMgKFtzdHJpbmddJElkZW50aXR5KSB7DQogICAgZm9yZWFjaCAoJGludmFsaWRDaGFyYWN0ZXIgaW4gJEFDQ09VTlRfSU5WQUxJRF9DSEFSQUNURVJTKSB7DQogICAgICAgIGlmICgkSWRlbnRpdHkuSW5kZXhPZigkaW52YWxpZENoYXJhY3RlcikgLWd0IDApIHsNCiAgICAgICAgICAgIHRocm93ICJJZGVudGl0eSBOYW1lICckSWRlbnRpdHknIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVyICckaW52YWxpZENoYXJhY3RlcicuICINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LUFkbWluSWRlbnRpdGllc0J5R3JvdXAgKFtzdHJpbmdbXV0kV2hpdGVsaXN0KSB7DQogICAgJHdoaXRlTGlzdEhhc2hUYWJsZSA9IENvbnZlcnQtU3RyaW5nTGlzdFRvSGFzaFRhYmxlIC1TdHJpbmdMaXN0ICRXaGl0ZWxpc3QNCg0KICAgIFtzdHJpbmdbXV0kbG9jYWxJZGVudGl0aWVzID0gR2V0LUFkbWluSWRlbnRpdGllc0ZpbHRlcmVkIC1GaWx0ZXJEb21haW5JZGVudGl0aWVzICRmYWxzZQ0KICAgIFtzdHJpbmdbXV0kZG9tYWluSWRlbnRpdGllcyA9IEdldC1BZG1pbklkZW50aXRpZXNGaWx0ZXJlZCAtRmlsdGVyRG9tYWluSWRlbnRpdGllcyAkdHJ1ZQ0KDQogICAgcmV0dXJuIEB7TG9jYWxJZGVudGl0aWVzID0gW3N0cmluZ1tdXShSZW1vdmUtV2hpdGVsaXN0ZWRJZGVudGl0aWVzIC1JZGVudGl0aWVzICRsb2NhbElkZW50aXRpZXMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtV2hpdGVsaXN0ICR3aGl0ZUxpc3RIYXNoVGFibGUpDQogICAgICAgICAgICAgRG9tYWluSWRlbnRpdGllcyA9IFtzdHJpbmdbXV0oUmVtb3ZlLVdoaXRlbGlzdGVkSWRlbnRpdGllcyAtSWRlbnRpdGllcyAkZG9tYWluSWRlbnRpdGllcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtV2hpdGVsaXN0ICR3aGl0ZUxpc3RIYXNoVGFibGUpDQogICAgICAgICAgICAgVG90YWxJZGVudGl0aWVzID0gKFtzdHJpbmdbXV0oUmVtb3ZlLVdoaXRlbGlzdGVkSWRlbnRpdGllcyAtSWRlbnRpdGllcyAoR2V0LUFkbWluSWRlbnRpdGllcykgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVdoaXRlbGlzdCAkd2hpdGVMaXN0SGFzaFRhYmxlKSkuQ291bnR9DQp9DQoNCmZ1bmN0aW9uIEdldC1BZG1pbklkZW50aXRpZXNGaWx0ZXJlZCAoW2Jvb2xdJEZpbHRlckRvbWFpbklkZW50aXRpZXMpIHsNCiAgICBbc3RyaW5nW11dJGZpbHRlcmVkQWRtaW5JZGVudGl0aWVzID0gQCgpDQoNCiAgICAkYWRtaW5JZGVudGl0aWVzID0gR2V0LUFkbWluSWRlbnRpdGllcw0KICAgIGZvcmVhY2ggKCRhZG1pbiBpbiAkYWRtaW5JZGVudGl0aWVzKSB7DQogICAgICAgICRpc0RvbWFpbklkZW50aXR5ID0gVGVzdC1Eb21haW5JZGVudGl0eSAtSWRlbnRpdHkgJGFkbWluDQogICAgICAgIGlmICgkRmlsdGVyRG9tYWluSWRlbnRpdGllcyAtZXEgJGlzRG9tYWluSWRlbnRpdHkpIHsNCiAgICAgICAgICAgICRmaWx0ZXJlZEFkbWluSWRlbnRpdGllcyArPSAkYWRtaW4NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkZmlsdGVyZWRBZG1pbklkZW50aXRpZXMNCn0NCg0KZnVuY3Rpb24gR2V0LUFkbWluSWRlbnRpdGllcyB7DQogICAgcmV0dXJuIEZvcm1hdC1BZG1pbklkZW50aXRpZXMgLUFkbWluc0NtZE91dHB1dCAoSW52b2tlLU5ldExvY2FsR3JvdXApDQp9DQoNCmZ1bmN0aW9uIEludm9rZS1OZXRMb2NhbEdyb3VwIHsNCiAgICAkYWRtaW5Hcm91cE5hbWUgPSBHZXQtQWRtaW5Hcm91cE5hbWUNCiAgICAkb3V0cHV0ID0gSW52b2tlLVByb2Nlc3MgLUZpbGVQYXRoICRORVRfRVhFIC1Bcmd1bWVudHMgImxvY2FsZ3JvdXAgJGFkbWluR3JvdXBOYW1lIg0KICAgIGlmICgkb3V0cHV0LkV4aXRDb2RlIC1uZSAwKSB7IHRocm93ICdBbiBlcnJvciBvY2N1cmVkIHdoaWxlIGV4ZWN1dGluZyBOZXQgbG9jYWxncm91cCBjb21tYW5kOiBDaGVjayBsb2dzIGZvciBtb3JlIGRldGFpbHMuICcgfQ0KDQogICAgcmV0dXJuICRvdXRwdXQuU3RkT3V0LlNwbGl0KFtlbnZpcm9ubWVudF06Ok5ld0xpbmUsIFtzdHJpbmdzcGxpdG9wdGlvbnNdOjpSZW1vdmVFbXB0eUVudHJpZXMpDQp9DQoNCmZ1bmN0aW9uIEdldC1BZG1pbkdyb3VwTmFtZSB7DQogICAgJGFkbWluR3JvdXBPYmplY3QgPSBHZXQtQWRtaW5Hcm91cE9iamVjdCAtQWRtaW5Hcm91cFNlY3VyaXR5SWQgJEFETUlOX0dST1VQX1NFQ1VSSVRZX0lEDQogICAgcmV0dXJuIEZvcm1hdC1BZG1pbkdyb3VwTmFtZSAtQWRtaW5Hcm91cE9iamVjdCAkYWRtaW5Hcm91cE9iamVjdA0KfQ0KDQpmdW5jdGlvbiBHZXQtQWRtaW5Hcm91cE9iamVjdCAoW3N0cmluZ10kQWRtaW5Hcm91cFNlY3VyaXR5SWQpIHsNCiAgICByZXR1cm4gTmV3LU9iamVjdCAtVHlwZSBzZWN1cml0eS5wcmluY2lwYWwuc2VjdXJpdHlpZGVudGlmaWVyICRBZG1pbkdyb3VwU2VjdXJpdHlJZA0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtQWRtaW5Hcm91cE5hbWUgKFtwc29iamVjdF0kQWRtaW5Hcm91cE9iamVjdCkgew0KICAgIHJldHVybiAkQWRtaW5Hcm91cE9iamVjdC5UcmFuc2xhdGUoW3NlY3VyaXR5LnByaW5jaXBhbC5udGFjY291bnRdKS5WYWx1ZS5TcGxpdCgkRE9NQUlOX1NFUEFSQVRPUilbMV0uVHJpbSgpDQp9DQoNCmZ1bmN0aW9uIEZvcm1hdC1BZG1pbklkZW50aXRpZXMgKFtzdHJpbmdbXV0kQWRtaW5zQ21kT3V0cHV0KSB7DQogICAgW3N0cmluZ1tdXSRhZG1pbnNFeHRyYWN0ZWRGcm9tT3V0cHV0ID0gQCgpDQoNCiAgICAkZm9vdGVySW5kZXggPSAkQWRtaW5zQ21kT3V0cHV0Lkxlbmd0aCAtICRORVRfT1VUUFVUX0ZPT1RFUl9MRU5HVEgNCg0KICAgIGZvciAoJGkgPSAkTkVUX09VVFBVVF9IRUFERVJfTEVOR1RIOyAkaSAtbGUgJGZvb3RlckluZGV4OyAkaSsrKSB7DQogICAgICAgICRhZG1pbnNFeHRyYWN0ZWRGcm9tT3V0cHV0ICs9ICRBZG1pbnNDbWRPdXRwdXRbJGldLlRyaW0oKQ0KICAgIH0NCg0KICAgIHJldHVybiAkYWRtaW5zRXh0cmFjdGVkRnJvbU91dHB1dA0KfQ0KDQpmdW5jdGlvbiBDb252ZXJ0LVN0cmluZ0xpc3RUb0hhc2hUYWJsZSAoW3N0cmluZ1tdXSRTdHJpbmdMaXN0KSB7DQogICAgJGhhc2hUYWJsZSA9IEB7fQ0KICAgIGlmICgkU3RyaW5nTGlzdC5Db3VudCAtZXEgMCkgeyByZXR1cm4gJGhhc2hUYWJsZSB9DQogICAgZm9yZWFjaCAoJGl0ZW0gaW4gJFN0cmluZ0xpc3QpIHsgJGhhc2hUYWJsZVskaXRlbV0gPSAkbnVsbCB9DQoNCiAgICByZXR1cm4gJGhhc2hUYWJsZQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtV2hpdGVsaXN0ZWRJZGVudGl0aWVzIChbc3RyaW5nW11dJElkZW50aXRpZXMsIFtoYXNodGFibGVdJFdoaXRlbGlzdCkgew0KICAgIGlmICgoTWVhc3VyZS1PYmplY3QgLUlucHV0T2JqZWN0ICRJZGVudGl0aWVzKS5Db3VudCAtZXEgMCkgeyByZXR1cm4gJElkZW50aXRpZXMgfQ0KICAgIFtzdHJpbmdbXV0kcmVzdWx0ID0gQCgpDQogICAgZm9yZWFjaCAoJGkgaW4gJElkZW50aXRpZXMpIHsNCiAgICAgICAgaWYgKC1ub3QgKCRXaGl0ZWxpc3QuQ29udGFpbnNLZXkoJGkpKSkgeyAkcmVzdWx0ICs9ICRpIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQojDQojIE5leHRoaW5rIE91dHB1dCBtYW5hZ2VtZW50DQojDQpmdW5jdGlvbiBVcGRhdGUtRW5naW5lT3V0cHV0VmFyaWFibGVzIChbaGFzaHRhYmxlXSRBZG1pbklkZW50aXRpZXMpIHsNCiAgICBbc3RyaW5nW11dJE91dHB1dExvY2FsQWRtaW5zID0gRWRpdC1TdHJpbmdMaXN0UmVzdWx0IC1TdHJpbmdMaXN0ICRBZG1pbklkZW50aXRpZXMuTG9jYWxJZGVudGl0aWVzDQogICAgW254dF06OldyaXRlT3V0cHV0U3RyaW5nTGlzdCgnTG9jYWxJZGVudGl0aWVzJywgJE91dHB1dExvY2FsQWRtaW5zKQ0KDQogICAgW3N0cmluZ1tdXSRPdXRwdXREb21haW5BZG1pbnMgPSBFZGl0LVN0cmluZ0xpc3RSZXN1bHQgLVN0cmluZ0xpc3QgJEFkbWluSWRlbnRpdGllcy5Eb21haW5JZGVudGl0aWVzDQogICAgW254dF06OldyaXRlT3V0cHV0U3RyaW5nTGlzdCgnRG9tYWluSWRlbnRpdGllcycsICRPdXRwdXREb21haW5BZG1pbnMpDQoNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRVSW50MzIoJ1RvdGFsSWRlbnRpdGllcycsICRBZG1pbklkZW50aXRpZXMuVG90YWxJZGVudGl0aWVzKQ0KfQ0KDQojDQojIE1haW4gc2NyaXB0IGZsb3cNCiMNCltlbnZpcm9ubWVudF06OkV4aXQoKEludm9rZS1NYWluIC1JbnB1dFBhcmFtZXRlcnMgJE15SW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnMpKQ0KIyBTSUcgIyBCZWdpbiBzaWduYXR1cmUgYmxvY2sNCiMgTUlJajVRWUpLb1pJaHZjTkFRY0NvSUlqMWpDQ0k5SUNBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1Qmdvcg0KIyBCZ0VFQVlJM0FnRUVvR3N3YVRBMEJnb3JCZ0VFQVlJM0FnRWVNQ1lDQXdFQUFBUVFIOHc3WUZsTENFNjNKTkxHDQojIEtYN3pVUUlCQUFJQkFBSUJBQUlCQUFJQkFEQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDQk40R3ZCckhHNGNUdisNCiMgTHVPaFVDODBvSTI5NGtBSUtuVnQ3UHdkWFZoWnhhQ0NFVHN3Z2dQRk1JSUNyYUFEQWdFQ0FoQUNyRndtYWd0QQ0KIyBtNDhMZWZLdVJpVjNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hd3hDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLDQojIEV3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4S3pBcEJnTlYNCiMgQkFNVElrUnBaMmxEWlhKMElFaHBaMmdnUVhOemRYSmhibU5sSUVWV0lGSnZiM1FnUTBFd0hoY05NRFl4TVRFdw0KIyBNREF3TURBd1doY05NekV4TVRFd01EQXdNREF3V2pCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NDQojIFJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUUQNCiMgRXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUlJQklqQU5CZ2txaGtpRw0KIyA5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHN6bGMrYjcxTHZsTFMweXB0L2xnVC9KelNWSnRuRXF3OVdVDQojIE5HZWlDaHl3WDJtbVFMSEV0N0tQMEppa3FVRlpPdFBjbE5ZODIzUTRwRXJNVFNXQzkwcWxVeEk0N3ZOSmJYR1INCiMgZm1PMnE2WmZ3NlNFK0U5aVViNzR4ZXpiT0pMakJ1VUlrUXpFS0VGVis4dGFpUlYrY2VnMXYwMXlDVDIrT2poUQ0KIyBXM2N4RzQyenh5UkZtcWVzYlFBVVdnUzN1aFByVVFxWVFVRWlUbVZoaDRGQlVLWjVYSW5lR1VwWDFTN21YUnhUDQojIExINll6Um9HRnFSb2M5QTBCQk5jb1hIVFdueFYyMTVrNFRlSE1GWUU1UkcwS1lBUzhYazVpS0lDRVh3blpyZUkNCiMgdDNqeXlncW9PS3NLWk1LL1psMlZoTUdoSlI2SFhScFFDeUFTekVHN2JndFJPTGhMeXdJREFRQUJvMk13WVRBTw0KIyBCZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXNUN0RhUVA0DQojIHYwY0IxSmdtR2dnQzcyTmtLOE13SHdZRFZSMGpCQmd3Rm9BVXNUN0RhUVA0djBjQjFKZ21HZ2dDNzJOa0s4TXcNCiMgRFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUJ3YUJwZmMxNXlmUElobUJnaFhJZHNoUi9ncVo2cS9HREoyUUJCWA0KIyB3WXJ6ZXRrUlpZNDErcDc4UmJXZTJVd3hTN2lSNkVNc2pyTjR6dHZqVTNseDF1VWhsQUhhVlllYUpHVDJpbWJNDQojIDNwdzN6YWcwc1dtYkk4aWVlQ0lyY0VQalZVY3hZUm52V01XRkwwNHc5cUF4RmlQSTUrSmxGalBMdnhvYm9EMzQNCiMgeWw2TE1ZdGdDSWt0REFaY1VyZkUrUXFZMFJWZm54SytmRFpqT0wxRXBIL2tKaXNLeEpkcERlbU00c0FRVjdqSQ0KIyBkaEtSVmZKSWFkaThLZ0piRDBUVUlESGI5THB3SmwyUVlKNjhTeGNKTDdUTEhrTm95UWNud2RKYzkrb2h1V2dTDQojIG5EeWN2NTc4Z0Z5Ylk4M3NSNm9sSjJlZ04vTUFnbjFVMTZuNDZTNFRvM2ZvSDBvd2dnYXVNSUlGbHFBREFnRUMNCiMgQWhBS0dnMGJjbytVdUxkd0ZDQjhLZ3JFTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3d4Q3pBSkJnTlZCQVlUQWxWVA0KIyBNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqDQojIGIyMHhLekFwQmdOVkJBTVRJa1JwWjJsRFpYSjBJRVZXSUVOdlpHVWdVMmxuYm1sdVp5QkRRU0FvVTBoQk1pa3cNCiMgSGhjTk1qQXdPREUzTURBd01EQXdXaGNOTWpNd09ESXlNVEl3TURBd1dqQ0J3REVUTUJFR0N5c0dBUVFCZ2pjOA0KIyBBZ0VERXdKRFNERVZNQk1HQ3lzR0FRUUJnamM4QWdFQ0V3UldZWFZrTVIwd0d3WURWUVFQREJSUWNtbDJZWFJsDQojIElFOXlaMkZ1YVhwaGRHbHZiakVZTUJZR0ExVUVCUk1QUTBoRkxURXhNaTR3TURBdU5UYzVNUXN3Q1FZRFZRUUcNCiMgRXdKRFNERVBNQTBHQTFVRUJ4TUdVSEpwYkd4NU1SWXdGQVlEVlFRS0V3MU9SVmhVYUdsdWF5QlRMa0V1TVFzdw0KIyBDUVlEVlFRTEV3SlNSREVXTUJRR0ExVUVBeE1OVGtWWVZHaHBibXNnVXk1QkxqQ0NBaUl3RFFZSktvWklodmNODQojIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTWJyOGs1QjRVVDdFOSs2U2tvYTNJaHk4djZ2U0hXYTVUZnB0UG4NCiMgQjFKUTdCZ3N3NkVEQ0kvSHJJbGNSUkYrZmVYR1lQWWFrSjVuZzFja00yMnUvRnRBbXJsaGI1VkxGT2VNaXViLw0KIyBSNWNQUTZJaGpkQ25UaVZQckJiWWV2Q215SE9UZHFjNzRHRnlnQksrZy9aTFpxT1dKRGtod1ZpbVROVFAxUk8vDQojIEJlYzNKSTNycjBDdUlxcUd2Q3QvVHVjUHN6Vnl1S1JWaXc1Z3ZNa2F3UXZmd1Q4TW1MZkZrcjk4bHQ0QmxUWkcNCiMgU2tvUHVtRVMrYkpkV01UdGRUZlpJaytLUXY2MG9XbXNXbEkvTHhlK20xcUluQ0VETEZuU3NRSU4rSEdrYWJXNQ0KIyBVaUVKNmJEalpDSUI1UGhRWGp2MFdYTFRHWnFUY2JCZUJMSUFuMDZMOVRJSDZvQ0c4N1FsclhkeXNPRGNhcWlRDQojIFNrQUo3YlhRc2NmV3NSSFdQclJ6VTM2QTJtT3hES0VSR3hIM2lQRHhmVjlOQUViOGhkRlRmeEpSTWEraEVBcXQNCiMgNnF4NFB1VVpidTdtOFRyaCtmSEtvNVM5YndYa1ltaTBURE9OcFlFUW1iNytsZWZjSHFMTmFJZ3BmZEs1aC8wVg0KIyBsVWxwRHdsTkdYTWZFMmFCaE5SNkw1Tzk5cjExWTJxSkExT21NQmNQTm9ZN2xqWG1kTUh1MVY5L0RFMEpLNE9ZDQojIFZ4Ym5VVk1xVGYzL1ZnWnhHZWNZTU1mYW1qdjQyc1BGdk1kYUNqOEMzTjRjMGQ0c1dPbHRKa2pDbWk1Zkt3OXkNCiMgVUdMelV6V09meDl5MGFUUW45U2QveTY4Y0JQL0psLzFrd3MzeFA0T3Jzemw1dkFGZW5UUXd0T0hMZ3NvazBFRg0KIyBGdWFMQWdNQkFBR2pnZ0gxTUlJQjhUQWZCZ05WSFNNRUdEQVdnQlNQNkg3d2JUSnFBQVVqeDNDWGFqcVEvMnZxDQojIDFEQWRCZ05WSFE0RUZnUVVVbHVvelBDSW9ZQnl1RDRkVkJjQ2xidzQ2Mzh3TWdZRFZSMFJCQ3N3S2FBbkJnZ3INCiMgQmdFRkJRY0lBNkFiTUJrTUYwTklMVlpCVlVRdFEwaEZMVEV4TWk0d01EQXVOVGM1TUE0R0ExVWREd0VCL3dRRQ0KIyBBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QjdCZ05WSFI4RWREQnlNRGVnTmFBemhqRm9kSFJ3DQojIE9pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXRaekV1WTNKc01EZWcNCiMgTmFBemhqRm9kSFJ3T2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdA0KIyBaekV1WTNKc01Fc0dBMVVkSUFSRU1FSXdOd1lKWUlaSUFZYjliQU1DTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwDQojIGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNd0J3WUZaNEVNQVFNd2ZnWUlLd1lCQlFVSEFRRUUNCiMgY2pCd01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdTQVlJS3dZQg0KIyBCUVVITUFLR1BHaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFVldRMjlrDQojIFpWTnBaMjVwYm1kRFFTMVRTRUV5TG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVk2SUI0UG5OY3poZGVtVlZpZHRUOFhUMFArL0VqOWJiYU1JbVI2SEVMVGNZWDE5Z2prc0ZOVXJSNg0KIyAvWFVQZ2FqL25TcGxyNU9qM0RKNUpDUG8yQVZLd1kxbVVXUzJ1WW9aUmluRUFvZERmRVNxZlRpUjE5ODJ4cDcyDQojIGdvMzQ3R1RNbnBwazJFcGR1SWlvaStkY3diYncxRGYybkZ6STNGY1g3SDFVSVBkOE00cDNVQXQ1V0NpVk1QSFcNCiMgWHhyUXQ1bjhqeGdMY3Vzdk9SWFpxWk9zZFRsN0hacHNWSG5HVVk3ODdPdTBJSnh1RnNpVU02NGJLR3p2TnFxdA0KIyBZeUZ5Ujk5RXJDVHFkWjY2dXJhRmlsQWdqUHdhTEZ6SlV3NithSy93V3hLQjdRMHBpSUNwZVgxWDBJTFp1NTZHDQojIFIyMDZWRWNteFdJTFlqUUUyTlpjVCs3dmJVem1NSUlHdkRDQ0JhU2dBd0lCQWdJUUEvRzA0Vjg2Z3ZFVWxuaXoNCiMgMTloSFhEQU5CZ2txaGtpRzl3MEJBUXNGQURCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbg0KIyBhVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUURFeUpFDQojIGFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERURXlNRFF4T0RFeU1EQXcNCiMgTUZvWERUSTNNRFF4T0RFeU1EQXdNRm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuDQojIGFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXlLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUINCiMgQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2RUK2creXRSUHhaTStFZ1B5dWdEWFJ0dGZIb3l5c0dpeXM4WVNzT2pVUw0KIyBPcEtSdWxma3hNbnpMNmhJUExmV2J0eVhJcnBSZVdHdlF5OE50NXUwU1RHdVJGZytwS0dXcDRkUEkzN0RiR1VrDQojIGtGVStvY29qZk1WQzZjUjZZa1diZmQ1amRNdWVZeVg0aEpxYXJVVlBybjBmeUJQTGRadko0ZUdLK0FzTW1QVEsNCiMgUHRCRnFub2VwVmlUTmpTK0t5NHJNVmhtdERJUW41M3dVcUh2NkQ3VGR2SkFXdHo2YWowYlM2MTJzSXhjN2phNg0KIyBnK293cUV6ZThRc3FXRUdJcmdDSnF3UFJGb0lnSW5iclhsUTRFbUxoMG5BazIrMGZjTkprQ1lBdDRyYWR6aC95DQojIHV5SHpiTnZZc3hsN2lsQ2Y3K3cyQ2x5YXQwclRDS0E1ZWYzZHZ6MDZDU1VDQXdFQUFhT0NBMWd3Z2dOVU1CSUcNCiMgQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZEpRUU1NQW9HQ0NzRw0KIyBBUVVGQndNRE1IOEdDQ3NHQVFVRkJ3RUJCSE13Y1RBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1DQojIFpHbG5hV05sY25RdVkyOXRNRWtHQ0NzR0FRVUZCekFDaGoxb2RIUndPaTh2WTJGalpYSjBjeTVrYVdkcFkyVnkNCiMgZEM1amIyMHZSR2xuYVVObGNuUklhV2RvUVhOemRYSmhibU5sUlZaU2IyOTBRMEV1WTNKME1JR1BCZ05WSFI4RQ0KIyBnWWN3Z1lRd1FLQStvRHlHT21oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwDQojIFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXcwTG1ScFoybGoNCiMgWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dnZ0hFQmdOVg0KIyBIU0FFZ2dHN01JSUJ0ekNDQWJNR0NXQ0dTQUdHL1d3REFqQ0NBYVF3T2dZSUt3WUJCUVVIQWdFV0xtaDBkSEE2DQojIEx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwzTnpiQzFqY0hNdGNtVndiM05wZEc5eWVTNW9kRzB3Z2dGa0JnZ3INCiMgQmdFRkJRY0NBakNDQVZZZWdnRlNBRUVBYmdCNUFDQUFkUUJ6QUdVQUlBQnZBR1lBSUFCMEFHZ0FhUUJ6QUNBQQ0KIyBRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFkQUJsQUNBQVl3QnZBRzRBY3dCMEFHa0FkQUIxQUhRQVpRQnpBQ0FBDQojIFlRQmpBR01BWlFCd0FIUUFZUUJ1QUdNQVpRQWdBRzhBWmdBZ0FIUUFhQUJsQUNBQVJBQnBBR2NBYVFCREFHVUENCiMgY2dCMEFDQUFRd0JRQUM4QVF3QlFBRk1BSUFCaEFHNEFaQUFnQUhRQWFBQmxBQ0FBVWdCbEFHd0FlUUJwQUc0QQ0KIyBad0FnQUZBQVlRQnlBSFFBZVFBZ0FFRUFad0J5QUdVQVpRQnRBR1VBYmdCMEFDQUFkd0JvQUdrQVl3Qm9BQ0FBDQojIGJBQnBBRzBBYVFCMEFDQUFiQUJwQUdFQVlnQnBBR3dBYVFCMEFIa0FJQUJoQUc0QVpBQWdBR0VBY2dCbEFDQUENCiMgYVFCdUFHTUFid0J5QUhBQWJ3QnlBR0VBZEFCbEFHUUFJQUJvQUdVQWNnQmxBR2tBYmdBZ0FHSUFlUUFnQUhJQQ0KIyBaUUJtQUdVQWNnQmxBRzRBWXdCbEFDNHdIUVlEVlIwT0JCWUVGSS9vZnZCdE1tb0FCU1BIY0pkcU9wRC9hK3JVDQojIE1COEdBMVVkSXdRWU1CYUFGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVpNMG9NZ1RNMzI2MDJ5ZVRKT3J1MUd5NTZvdUwwUTBJWG5yOU9vVTNoc2R2cGdkMmZBZkxraU5YcA0KIyAvZ245SWNIc1hZRFM4TmJCUThMK2R5dmIrZGVSTTg1czFiSVpPK1l1MXNtVFQ0aEFqczNoOVg3eEQ4WlpWbkxvDQojIDYycEJ2UnpWUnRWOFNjcG1PQlhCditDUmNIZUgzTW1OTWNrTUthSXo3WTNpaDgySmpUOGIvOVhnR3BlTGZOcHQNCiMgKzZqR3NqcG1hM3NCczgzWXBqVHNFZ0dybFZpbHhGTlhxR0RtNXdJU29Ma2paS0pOdTN5QkpXUWh2cy91UWhoRA0KIyBsN3VsTndhdlRmOG1wVTFoUyt4R1FiaGx6cmg1bmdpV0M0R01panVQeDVtTW95cHVtRzFlWWNhV3Q0cTVZUzJUDQojIHVPc09CRVBYOWY2bThHTFVtV3Fsd2NId1pKU0FNWUlTQURDQ0Vmd0NBUUV3Z1lBd2JERUxNQWtHQTFVRUJoTUMNCiMgVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMA0KIyBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5DQojIEtRSVFDaG9ORzNLUGxMaTNjQlFnZkNvS3hEQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQmhEQVlCZ29yQmdFRUFZSTMNCiMgQWdFTU1Rb3dDS0FDZ0FDaEFvQUFNQmtHQ1NxR1NJYjNEUUVKQXpFTUJnb3JCZ0VFQVlJM0FnRUVNQndHQ2lzRw0KIyBBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNBTGszSDh5cXZLDQojIFRRZ1hlRUtCMTZteFBBckRLKzlRNVluWXVoOXhzTDN5NURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQWdCTWtJSysNCiMgYmJVUkU4cmdCZHFnRXQydVh2SmdjdHdFY3lKQWlHYTFuNDVaRE5MRDlQN2hUZ1luTDZVbUl3bHlYdDVZVmZHTA0KIyBCTUdBeE9LUmxYTnY0enlwZGFmK3Z2UFZkZ0lvSVNOUU9LZHozQ0FuTm1qNkNVcFRJRXllRTh0bklRb2lYU29pDQojIHZpSlVHVDVNVTg4RE9JTDJ3cWd0Uld0djJNeVJFOUx2MVZ1bHl5R04veVR4WlhFWjlHNk1qd0xsQjZDVEZJUmgNCiMgdlVPUXlHbE94bmU5YzZ0RGtEUTd4ZlNIUVIyRUdnMDk5RUswbXM0c3V6YnB4S256RjJUTkpSUFM5aXdURFJGRg0KIyBDSnpLRDJ2QjlzWldKNlRUSGhjWURCWXNIUzNoa3U2RmVidGREMllEcWU4blZhRmYxRzFDaExkWkZiWGErM3NYDQojIGYrRlRMQWhOTnJhWFJLeUwxTEtTMzcxNnAraG1CcFZoa0gxODlHNVBPQ2ljQkQxVE5kU3psRWRvRHBsbGp0Q3ANCiMgVGdmcldVK2krUzlEWVJRSTlBdkk5L3BmS1puOFpidzBXYnloemdOOElqcDNLTm9vWEtBYlJBOFpSQUJkTUg5UA0KIyBXVjArSUZtMXMwSENBbFpxb0JEQ1hkVE5pYnlRWVV2SkRESkZFTW8vKzlzSHYydEczSW43ZkEzMm56OE9qRWpxDQojIFhQMzBXUkFGSTZ6R0VISWp5ckVzUW13TllGQzVJL2xZSlBjcUM4Q096ZllxQlYxdXVLS05oL05wVTg4QzlWNG0NCiMgMEpmSlZ2d1RHMEsrQU9WS0Ezcm1vVndhUDgzT0U0cEU5TmpjY3NMNS80ZnBXa2d1bEZpVXNydTFuMHV4dUVQVw0KIyB3N0swa2JuaGxuWGFOQVh4WERpWXhCeWZ3QytKbEJCWFp1WUpTcUdDRHNrd2dnN0ZCZ29yQmdFRUFZSTNBd01CDQojIE1ZSU90VENDRHJFR0NTcUdTSWIzRFFFSEFxQ0NEcUl3Z2c2ZUFnRURNUTh3RFFZSllJWklBV1VEQkFJQkJRQXcNCiMgZUFZTEtvWklodmNOQVFrUUFRU2dhUVJuTUdVQ0FRRUdDV0NHU0FHRy9Xd0hBVEF4TUEwR0NXQ0dTQUZsQXdRQw0KIyBBUVVBQkNERnloM3J4ZGNSME93VTNhMVovZW9pWFNmMXdZSDVlTGY0QnFxUFhVeDkvd0lSQU5IOCszbkFCdTVHDQojIDVuYjd0aGJBbVZjWUR6SXdNakF3T0RFNU1UWXpOek0xV3FDQ0M3c3dnZ2FDTUlJRmFxQURBZ0VDQWhBRXpUK0YNCiMgYUs1MnhodXcvbkZnektkdE1BMEdDU3FHU0liM0RRRUJDd1VBTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRA0KIyBWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhNVEF2DQojIEJnTlZCQU1US0VScFoybERaWEowSUZOSVFUSWdRWE56ZFhKbFpDQkpSQ0JVYVcxbGMzUmhiWEJwYm1jZ1EwRXcNCiMgSGhjTk1Ua3hNREF4TURBd01EQXdXaGNOTXpBeE1ERTNNREF3TURBd1dqQk1NUXN3Q1FZRFZRUUdFd0pWVXpFWA0KIyBNQlVHQTFVRUNoTU9SR2xuYVVObGNuUXNJRWx1WXk0eEpEQWlCZ05WQkFNVEcxUkpUVVZUVkVGTlVDMVRTRUV5DQojIE5UWXRNakF4T1MweE1DMHhOVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPbGsNCiMgTlp6NnFaaGxaQnZrRjl5NEtUYk1ad2xZaFUwdzRNbi81VHM4RVNoUXJ3Y3g0bDBKR01MMmlZeHBDQVFqNEhjdA0KIyBuUlhsdU9paGFvNy8xSzdTZWhiditFRzFIVGwxd2M4dnA2eEZmcFJ0ckFNQm1UeGlQbjU2L1VXWE1iVDZ0OWxDDQojIFBxZFZtOTlhVDFnQ3FESnBJaE8raTRJdHhwaXJhNXUweWZKbEVReDBEYkx3Q0paMHhPaXlTS0toRktYNCt1R0oNCiMgY0VRN2plLzdwUFREdWIwVUxPc01LQ2NsZ0tzUVN4WVNZQXRwSW94T3pjYlZzbVZaSWVCOExCS05jQTZQaXNyZw0KIyAwOWV6T1hkUTBFSXNMbnJPbkdkNk9IZFVRUDlQbFFRZzFPdkl6b2NVQ1A0ZGdOM1E1eXQ0NnI4ZmNNYnVRaFpUDQojIE5rV2JVeGxKWXAxNkFwdVZGS01DQXdFQUFhT0NBemd3Z2dNME1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlYNCiMgSFJNQkFmOEVBakFBTUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TUlNSUlCdndZRFZSMGdCSUlCdGpDQw0KIyBBYkl3Z2dHaEJnbGdoa2dCaHYxc0J3RXdnZ0dTTUNnR0NDc0dBUVVGQndJQkZoeG9kSFJ3Y3pvdkwzZDNkeTVrDQojIGFXZHBZMlZ5ZEM1amIyMHZRMUJUTUlJQlpBWUlLd1lCQlFVSEFnSXdnZ0ZXSG9JQlVnQkJBRzRBZVFBZ0FIVUENCiMgY3dCbEFDQUFid0JtQUNBQWRBQm9BR2tBY3dBZ0FFTUFaUUJ5QUhRQWFRQm1BR2tBWXdCaEFIUUFaUUFnQUdNQQ0KIyBid0J1QUhNQWRBQnBBSFFBZFFCMEFHVUFjd0FnQUdFQVl3QmpBR1VBY0FCMEFHRUFiZ0JqQUdVQUlBQnZBR1lBDQojIElBQjBBR2dBWlFBZ0FFUUFhUUJuQUdrQVF3QmxBSElBZEFBZ0FFTUFVQUF2QUVNQVVBQlRBQ0FBWVFCdUFHUUENCiMgSUFCMEFHZ0FaUUFnQUZJQVpRQnNBSGtBYVFCdUFHY0FJQUJRQUdFQWNnQjBBSGtBSUFCQkFHY0FjZ0JsQUdVQQ0KIyBiUUJsQUc0QWRBQWdBSGNBYUFCcEFHTUFhQUFnQUd3QWFRQnRBR2tBZEFBZ0FHd0FhUUJoQUdJQWFRQnNBR2tBDQojIGRBQjVBQ0FBWVFCdUFHUUFJQUJoQUhJQVpRQWdBR2tBYmdCakFHOEFjZ0J3QUc4QWNnQmhBSFFBWlFCa0FDQUENCiMgYUFCbEFISUFaUUJwQUc0QUlBQmlBSGtBSUFCeUFHVUFaZ0JsQUhJQVpRQnVBR01BWlFBdU1Bc0dDV0NHU0FHRw0KIyAvV3dERlRBZkJnTlZIU01FR0RBV2dCVDB0dUVnSGY0cHJ0TGtZYVd5b2lXeXlCYzFiakFkQmdOVkhRNEVGZ1FVDQojIFZsTVB3Y1lIcDAzWDJHNVhjb0JRVE9Uc25zRXdjUVlEVlIwZkJHb3dhREF5b0RDZ0xvWXNhSFIwY0RvdkwyTnkNCiMgYkRNdVpHbG5hV05sY25RdVkyOXRMM05vWVRJdFlYTnpkWEpsWkMxMGN5NWpjbXd3TXFBd29DNkdMR2gwZEhBNg0KIyBMeTlqY213MExtUnBaMmxqWlhKMExtTnZiUzl6YUdFeUxXRnpjM1Z5WldRdGRITXVZM0pzTUlHRkJnZ3JCZ0VGDQojIEJRY0JBUVI1TUhjd0pBWUlLd1lCQlFVSE1BR0dHR2gwZEhBNkx5OXZZM053TG1ScFoybGpaWEowTG1OdmJUQlANCiMgQmdnckJnRUZCUWN3QW9aRGFIUjBjRG92TDJOaFkyVnlkSE11WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEWlhKMA0KIyBVMGhCTWtGemMzVnlaV1JKUkZScGJXVnpkR0Z0Y0dsdVowTkJMbU55ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DDQojIEFRRUFMb09oUkFWS0JPTzVNbEw2MllId0dydjRDWTBqdVQzWWtxSG1SaHhLTDI1NlBHTnVOeGVqR3I5WUk3SkQNCiMgbkpTRFRqa0pzQ3pveCtIaXpPM0xlV3ZPM2lNQlIrMlZWSUhnZ0hzU3NhOENocWs2YzJyKytKL0JqZEVoak9RcA0KIyBnc09LQzJBQUFwMGZSOFNmdEFwb1UzOWFFS2I0SXViNFU1SXhYOWlDZ3kxdEUwS3VnOEVRVHFRazlFZWMzZzhpDQojIGNuZGNmMC9wT1pnclY1SkUxKzl1azlsRHh3UXpZMUUzVnA1SEJCSERvMWhVSWRqaWpsYlhTVDlYL0FxZkkxNTcNCiMgOUpTTjNaMGF1OTk2S3FiU1JhWlZESS8yVElyeWxzK0pSdHd4c3BHUW8xOHpNR0JWOWZ4ck1LeWg3ZVJIVGpPZQ0KIyBaMm9vdFUzQzdWdVhndmpMcVFoc1V3bTA5ekNDQlRFd2dnUVpvQU1DQVFJQ0VBcWhKZGJXTWh0K1FlUUYyamFYDQojIHdoVXdEUVlKS29aSWh2Y05BUUVMQlFBd1pURUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybEQNCiMgWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEVrTUNJR0ExVUVBeE1iUkdsbg0KIyBhVU5sY25RZ1FYTnpkWEpsWkNCSlJDQlNiMjkwSUVOQk1CNFhEVEUyTURFd056RXlNREF3TUZvWERUTXhNREV3DQojIE56RXlNREF3TUZvd2NqRUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVoNCiMgTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMExtTnZiVEV4TUM4R0ExVUVBeE1vUkdsbmFVTmxjblFnVTBoQg0KIyBNaUJCYzNOMWNtVmtJRWxFSUZScGJXVnpkR0Z0Y0dsdVp5QkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQojIGdnRVBBRENDQVFvQ2dnRUJBTDNRTXU1THpZOS8zYW02Z3BuRk9WUW9WN1lqU3NRT0IwVXpVUkI5MFBsOVRXaCsNCiMgNTdhZzlJMnppT1NYdjJNaGtKaS9FN3hYMDhQaGZnaldhaFFBT1BjdUhqdnV6S2IyTWxuK1gyVS80SnZyNDBaSA0KIyBCaHBWZmdzbmZzQ2k5YURnM2lJL0R2OStsZnZ6bzdvaVBoaXNFZVR3bVFOdE80VjhDZFB1WGNpYUMxVGpxQWx4DQojIGErRFBJaEFQZGM5eGNrNEtyZDlBT2x5M1VlR2hlUlRHVFNRak1GMjg3RHhnYXF3dkI4ejk4T3BIMlloUVh2MW0NCiMgYmxaaEp5bUpoRkhtZ3VkR1VQMlVLaXluNUhVK3VwZ1BoSCtmTVJUV3JkWHlaTXQ3SGdYUWhCbHlGL0VYQnU4OQ0KIyB6ZFpON3daQy9hSlRLaytGSGNRZFBLL1AycXdROWQyc3JPbFcvNU1DQXdFQUFhT0NBYzR3Z2dIS01CMEdBMVVkDQojIERnUVdCQlQwdHVFZ0hmNHBydExrWWFXeW9pV3l5QmMxYmpBZkJnTlZIU01FR0RBV2dCUkY2Nkt2OUpMTGdqRXQNCiMgVVl1bnB5R2Q4MjNJRHpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lCaGpBVA0KIyBCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RDREI1QmdnckJnRUZCUWNCQVFSdE1Hc3dKQVlJS3dZQkJRVUhNQUdHDQojIEdHaDBkSEE2THk5dlkzTndMbVJwWjJsalpYSjBMbU52YlRCREJnZ3JCZ0VGQlFjd0FvWTNhSFIwY0RvdkwyTmgNCiMgWTJWeWRITXVaR2xuYVdObGNuUXVZMjl0TDBScFoybERaWEowUVhOemRYSmxaRWxFVW05dmRFTkJMbU55ZERDQg0KIyBnUVlEVlIwZkJIb3dlREE2b0RpZ05vWTBhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEDQojIFpYSjBRWE56ZFhKbFpFbEVVbTl2ZEVOQkxtTnliREE2b0RpZ05vWTBhSFIwY0RvdkwyTnliRE11WkdsbmFXTmwNCiMgY25RdVkyOXRMMFJwWjJsRFpYSjBRWE56ZFhKbFpFbEVVbTl2ZEVOQkxtTnliREJRQmdOVkhTQUVTVEJITURnRw0KIyBDbUNHU0FHRy9Xd0FBZ1F3S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0hNNkx5OTNkM2N1WkdsbmFXTmxjblF1DQojIFkyOXRMME5RVXpBTEJnbGdoa2dCaHYxc0J3RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSEdWRXVsUmgxWnANCiMgemUvZDJueXFZM3F6ZU04R04wQ0U3MHVFdjhyUEF3TDl4YWZERGlCQ0xLOTM4eXNmRENGYUtyY0ZOQjFxcnBuNA0KIyBKNkptdndtcVlOOTJwRHFURC9peTBkaDhHV0xvWG9JbEhzUzZISHNzSWVMV1d5d1VOVU1FYUxMYmRRTGdjc2VZDQojIDFqeGs1UjlJRUJoZmlUaGhUV0pHSklkampKRlNMSzhwaWVWNEg5WUxGS1dBMXhKSGNMTjExWk9GazM2MmttZjcNCiMgVTJHSnFQVnJsc0QwV0drTmZNZ0JzYmtvZGJlWlk0VWlqR0hLZVpSK1dmeU1EK052dFFFbXRteWw3b2RSSWVSWQ0KIyBZSnU2REMwcmJhTEVmcnZFSlN0SEFnaDhTYTRUdHVGOFFrSW94aGhXejBFMHRtWmR0blI3OVZZeklpOGlOckpMDQojIG9rcVYyUFdtamxJeGdnSk5NSUlDU1FJQkFUQ0JoakJ5TVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU0NCiMgUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1URXdMd1lEVlFRRA0KIyBFeWhFYVdkcFEyVnlkQ0JUU0VFeUlFRnpjM1Z5WldRZ1NVUWdWR2x0WlhOMFlXMXdhVzVuSUVOQkFoQUV6VCtGDQojIGFLNTJ4aHV3L25GZ3pLZHRNQTBHQ1dDR1NBRmxBd1FDQVFVQW9JR1lNQm9HQ1NxR1NJYjNEUUVKQXpFTkJnc3ENCiMgaGtpRzl3MEJDUkFCQkRBY0Jna3Foa2lHOXcwQkNRVXhEeGNOTWpBd09ERTVNVFl6TnpNMVdqQXJCZ3NxaGtpRw0KIyA5dzBCQ1JBQ0RERWNNQm93R0RBV0JCUURKYjFRWHRxV01DM0NMMCtnSGt3b3ZpZzB4VEF2QmdrcWhraUc5dzBCDQojIENRUXhJZ1FnUkUrdndQYkVrY0sxbjF2VDFmWTd1TzZLS1RMbUxobTUvSERRNlNUd2VMNHdEUVlKS29aSWh2Y04NCiMgQVFFQkJRQUVnZ0VBUE9aOEsvYkhMODlmR1VuS1FIZzMyZ1hMTWFoVXE4WERJeVFzTXljTDdVeURPWTZSVmM2Rw0KIyBSak5WWVRYTnh0dGFqajJPc29VT3N6RElhMW9SbDVxYzdpNUZvWlc1ZUU1QlNyOTVMTWdqR0hJUThSUkMxVmp2DQojIHpGMGJQSHpvRy9xUkZKZ2JtVUNaRHBmUEt3MkUxbVU3VERtenJJWldVTHJCZnZtZlFFL3FITW9WNXRENnZ6OGMNCiMgMEEwZFNhYmh1VTRJNXBXUVRNakZPR1Frd24xWXV5M0lHNjVFbXFVRUxYeFdsdllkTmwreWFpTDJVbDNWdWFBTQ0KIyBwUWl5ekI0NDI2S1FCUSs4V2VsSThEQjcyQ2ZlUXpZdDZoOEhPdUp4QmFPdFkyYllNNzZzMWdEVWYyUVE4R0JNDQojIEdmTExrcmtNZzVscXZ0T3QrZlVvUms0OFN6NGlxNUJ2OFE9PQ0KIyBTSUcgIyBFbmQgc2lnbmF0dXJlIGJsb2NrDQo="}}}