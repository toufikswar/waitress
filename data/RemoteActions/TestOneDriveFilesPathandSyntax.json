{"id": "Test_OneDrive_Files_Path_and_Syntax_windows", "name": "Test OneDrive Files Path and Syntax", "description": "Tests if the files meet all the OneDrive specifications (size, name, path length, etc..) so a migration won't have any conflicts.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 10020, "inputs": [{"description": "Full path of the folder to be checked. Allows environment variables, e.g. $env:USERPROFILE, %HOMEDRIVE%%HOMEPATH%", "id": "MigrationPath", "name": "MigrationPath", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "If provided input migration path is ready for OneDrive", "id": "MigrationReadiness", "name": "MigrationReadiness", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of detected files with invalid characters in name", "id": "InvalidCharacters", "name": "InvalidCharacters", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of detected files/folders with invalid names", "id": "InvalidNames", "name": "InvalidNames", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of files/folders with path longer than accepted", "id": "InvalidPathLengths", "name": "InvalidPathLengths", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of detected folders as symbolic links or junction points", "id": "ReparsePoints", "name": "ReparsePoints", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of detected files with greater size than allowed", "id": "InvalidSizes", "name": "InvalidSizes", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of detected one note files", "id": "OneNoteFiles", "name": "OneNoteFiles", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-OneDriveFilesPathAndSyntax.ps1", "script": ""}}}