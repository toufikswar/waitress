{"id": "Enable_BitLocker_Encryption_windows", "name": "Enable BitLocker Encryption", "description": "Enables BitLocker encryption in the drive where the OS is installed. By using inputs parameters, you can choose the drive encryption type and the encryption method.\nTake a look at the [https://docs.microsoft.com/en-us/windows/security/information-protection/bitlocker/bitlocker-overview official Microsoft documentation] to get more information about BitLocker capabilities.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "If set to 'true' it will not trigger the encryption unless Active Directory backup GPO is enabled. If set to false it will always trigger the encryption and it will display a warning in case the GPO is disabled. Acceptable values are 'true' or 'false'", "id": "EnforceADBackup", "name": "EnforceADBackup", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Defines drive encryption type used by BitLocker. To encrypt entire drive set to 'false'. Acceptable values are 'true' or 'false'. For more information, please visit [https://docs.microsoft.com/en-us/windows/security/information-protection/bitlocker/bitlocker-device-encryption-overview-windows-10 this link]", "id": "UsedSpaceOnly", "name": "UsedSpaceOnly", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Defines encryption method used by BitLocker. Acceptable values are 'Aes128', 'Aes256', 'XtsAes128' or 'XtsAes256'", "id": "EncryptionMethod", "name": "EncryptionMethod", "allowCustomValue": false, "options": ["Aes256", "Aes128", "XtsAes256", "XtsAes128"], "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Enable-BitLockerEncryption.ps1", "script": ""}}}