{"id": "Skype_for_Business_Diagnostics_windows", "name": "Skype for Business Diagnostics", "description": "Creates files with information about Skype calls and calculates metrics of the last 24h.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 165, "inputs": [{"description": "Minimum number of seconds to consider a call as a short call", "id": "MinSecondsForCall", "name": "MinSecondsForCall", "options": ["15"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of hours to consider an unfinished call as a dropped call", "id": "NumHoursForTimeout", "name": "NumHoursForTimeout", "options": ["7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Total number of calls (audio + video + screen sharing)", "id": "TotalCalls", "name": "TotalCalls", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of audio calls", "id": "TotalAudio", "name": "TotalAudio", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls", "id": "PoorAudioPerc", "name": "PoorAudioPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls over Ethernet", "id": "PoorAudioWiredPerc", "name": "PoorAudioWiredPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls over Wifi", "id": "PoorAudioWifiPerc", "name": "PoorAudioWifiPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of failed audio calls", "id": "FailedAudioPerc", "name": "FailedAudioPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of dropped audio calls", "id": "DroppedAudioPerc", "name": "DroppedAudioPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of short audio calls", "id": "ShortAudioPerc", "name": "ShortAudioPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of bad audio calls (either failed, dropped or poor)", "id": "BadAudioPerc", "name": "BadAudioPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for failed audio calls", "id": "MainReasonFailedAudio", "name": "MainReasonFailedAudio", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for dropped audio calls", "id": "MainReasonDroppedAudio", "name": "MainReasonDroppedAudio", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls due to \"Jitter &gt; 30 ms\"", "id": "PoorAudioJitterPerc", "name": "PoorAudioJitterPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls due to \"NetworkMOSDegradation &gt; 1.0\"", "id": "PoorAudioMOSPerc", "name": "PoorAudioMOSPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls due to \"RoundTripTime &gt; 500 ms\"", "id": "PoorAudioRoundTripPerc", "name": "PoorAudioRoundTripPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls due to \"PacketLossRate &gt; 0.1\"", "id": "PoorAudioPacketLossPerc", "name": "PoorAudioPacketLossPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality audio calls due to \"RatioConcealedSamples &gt; 0.07\"", "id": "PoorAudioConcealedPerc", "name": "PoorAudioConcealedPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of video calls", "id": "TotalVideo", "name": "TotalVideo", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls", "id": "PoorVideoPerc", "name": "PoorVideoPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls over Ethernet", "id": "PoorVideoWiredPerc", "name": "PoorVideoWiredPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls over Wifi", "id": "PoorVideoWifiPerc", "name": "PoorVideoWifiPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of failed video calls", "id": "FailedVideoPerc", "name": "FailedVideoPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of dropped video calls", "id": "DroppedVideoPerc", "name": "DroppedVideoPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of short video calls", "id": "ShortVideoPerc", "name": "ShortVideoPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of bad video calls (either failed, dropped or poor)", "id": "BadVideoPerc", "name": "BadVideoPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for failed video calls", "id": "MainReasonFailedVideo", "name": "MainReasonFailedVideo", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for dropped video calls", "id": "MainReasonDroppedVideo", "name": "MainReasonDroppedVideo", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"Jitter &gt; 30 ms\"", "id": "PoorVideoJitterPerc", "name": "PoorVideoJitterPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"NetworkMOSDegradation &gt; 1.0\"", "id": "PoorVideoMOSPerc", "name": "PoorVideoMOSPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"RoundTripTime &gt; 500 ms\"", "id": "PoorVideoRoundTripPerc", "name": "PoorVideoRoundTripPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"PacketLossRate &gt; 0.1\"", "id": "PoorVideoPacketLossPerc", "name": "PoorVideoPacketLossPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"RatioConcealedSamples &gt; 0.07\"", "id": "PoorVideoConcealedPerc", "name": "PoorVideoConcealedPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"VideoPostFECPLR &gt; 0.1\"", "id": "PoorVideoPostFECPLRPerc", "name": "PoorVideoPostFECPLRPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"VideoLocalFrameLossPercentage &gt; 10%\"", "id": "PoorVideoLocalFrameLossPerc", "name": "PoorVideoLocalFrameLossPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"RecvFrameRate &lt; 7\"", "id": "PoorRecvFrameRatePerc", "name": "PoorRecvFrameRatePerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"LowFrameRateCallPercentage &gt; 10%\"", "id": "PoorLowFrameRatePerc", "name": "PoorLowFrameRatePerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"VideoPacketLossRate &gt; 0.1\"", "id": "PoorVideoPacketLossRatePerc", "name": "PoorVideoPacketLossRatePerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"VideoFrameRate &lt; 7\"", "id": "PoorVideoFrameRatePerc", "name": "PoorVideoFrameRatePerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality video calls due to \"DynamicCapabilityPercentage &gt; 10%\"", "id": "PoorDynamicCapabilityPerc", "name": "PoorDynamicCapabilityPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of screen sharing calls", "id": "TotalSharing", "name": "TotalSharing", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality screen sharing calls", "id": "PoorSharingPerc", "name": "PoorSharingPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality screen sharing calls over Ethernet", "id": "PoorSharingWiredPerc", "name": "PoorSharingWiredPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality screen sharing calls over Wifi", "id": "PoorSharingWifiPerc", "name": "PoorSharingWifiPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of failed screen sharing calls", "id": "FailedSharingPerc", "name": "FailedSharingPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of dropped screen sharing calls", "id": "DroppedSharingPerc", "name": "DroppedSharingPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of bad screen sharing calls (either failed, dropped or poor)", "id": "BadSharingPerc", "name": "BadSharingPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for failed screen sharing calls", "id": "MainReasonFailedSharing", "name": "MainReasonFailedSharing", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Main reason for dropped screen sharing calls", "id": "MainReasonDroppedSharing", "name": "MainReasonDroppedSharing", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality screen sharing calls due to \"Jitter &gt; 30 ms\"", "id": "PoorSharingJitterPerc", "name": "PoorSharingJitterPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of poor quality screen sharing calls due to \"RelativeOneWay &gt; 1.75\"", "id": "PoorRelativeOneWayPerc", "name": "PoorRelativeOneWayPerc", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Version and tracing level configured", "id": "VersionAndTracingLevel", "name": "VersionAndTracingLevel", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-SkypeForBusinessDiagnostics.ps1", "script": ""}}}