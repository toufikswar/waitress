{"id": "Get_Detailed_Device_Location_windows", "name": "Get Detailed Device Location", "description": "Retrieves the device geolocation retrieved through various means, the coordinates, and engages the user by asking for feedback about their current location.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid external API overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "API key to be used for the external Microsoft Bing Maps geolocation service. Provide empty value (\"\") to skip its retrieval", "id": "BingMapsAPIKey", "name": "BingMapsAPIKey", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "API key to be used for the external IPAPI geolocation service. Provide empty value (\"\") to skip its retrieval", "id": "IPAPIKey", "name": "IPAPIKey", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "IPAPI HTTPS enabled. Valid values are true/false. This value will be evaluated only if a IPAPI Key was provided", "id": "EnableIPAPIHTTPS", "name": "EnableIPAPIHTTPS", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "ID of the Campaign to be launched. Leave empty if to skip it. Provide empty value (\"\") to skip its retrieval", "id": "LocationFeedbackCampaignId", "name": "LocationFeedbackCampaignId", "options": ["c05e48f9-630e-4df5-b934-c16e45f416c9"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Coordinates of the device", "id": "WindowsLocationServicesCoordinates", "name": "WindowsLocationServicesCoordinates", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "CSV list with the Bing Maps API location details", "id": "BingMapsLocationDetails", "name": "BingMapsLocationDetails", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "CSV list with the IPAPI location details", "id": "IPAPILocationDetails", "name": "IPAPILocationDetails", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "CSV list with the location details provided by the user through the campaign", "id": "UserFeedbackLocationDetails", "name": "UserFeedbackLocationDetails", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-DetailedDeviceLocation.ps1", "script": ""}}}