{"id": "Get_MS_Office_information_windows", "name": "Get MS Office information", "description": "Returns several Microsoft Office-related information, such as the version of the suite, the applications installed, the language preferences, the size of the user's Outlook Data Files and the used space in the OneDrive business account folder.\nUseful for troubleshooting both Office-related and disk space issues and for managing the Office migration to the cloud. The script is developed for Windows 10 and 7 and Microsoft Office 2010 onwards.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Version of the Microsoft Office suite installed on the device", "id": "MSOfficeVersion", "name": "MSOfficeVersion", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of installed Office applications", "id": "InstalledApplications", "name": "InstalledApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Display language currently in use", "id": "ActiveDisplayLanguage", "name": "ActiveDisplayLanguage", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of display languages installed on the device", "id": "InstalledDisplayLanguages", "name": "InstalledDisplayLanguages", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of editing languages installed on the device", "id": "InstalledEditingLanguages", "name": "InstalledEditingLanguages", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of .PST files stored on the device", "id": "NumberOfPSTfiles", "name": "NumberOfPSTfiles", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of .OST files stored on the device", "id": "NumberOfOSTfiles", "name": "NumberOfOSTfiles", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Size of the .PST file, or sum of all .PST files' sizes", "id": "PSTOverallSize", "name": "PSTOverallSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Size of the .OST file, or sum of all .OST files' sizes", "id": "OSTOverallSize", "name": "OSTOverallSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Size on the disk of the OneDrive folder", "id": "OneDriveSyncFilesSize", "name": "OneDriveSyncFilesSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Size on the disk of all other data locally synchronized through OneDrive agent", "id": "OtherOneDriveSyncFilesSize", "name": "OtherOneDriveSyncFilesSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MSOfficeInfo.ps1", "script": ""}}}