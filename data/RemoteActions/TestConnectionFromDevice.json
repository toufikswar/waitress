{"id": "Test_Connection_From_Device_windows", "name": "Test Connection From Device", "description": "Performs connection test using ICMP protocol, and if port is specified also TCP connection to target destination. Allows a destination in a IPv4 or domain name format.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading target destination with too many connections. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Destination name, accepted values are IPv4 and domain names, provided with port if necessary. Examples are \"192.168.1.1\", \"nexthink.com\", \"google.com:8080\"", "id": "Destination", "name": "Destination", "allowCustomValue": true, "options": ["-"], "usedByWindows": true, "usedByMacOs": false}, {"description": "Default value of tested connection timeout. Should be adjusted, depending on the performance of tested network route. Provide number of milliseconds between (1000, 60000)", "id": "TimeoutInMilliseconds", "name": "TimeoutInMilliseconds", "options": ["5000"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Result of a connection test using ICMP protocol from a device to given destination", "id": "ReachableOverICMP", "name": "ReachableOverICMP", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Result of a connection test using TCP protocol from a device to given destination", "id": "ReachableOverTCP", "name": "ReachableOverTCP", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Time in milliseconds that a web request takes to reach the caller", "id": "ResponseTime", "name": "ResponseTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of packets that are lost during a client/server two way communication", "id": "PacketLoss", "name": "PacketLoss", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-ConnectionFromDevice.ps1", "script": ""}}}