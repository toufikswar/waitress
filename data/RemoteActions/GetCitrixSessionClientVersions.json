{"id": "Get_Citrix_Session_Client_Versions_windows", "name": "Get Citrix Session Client Versions", "description": "Retrieves the client version of the device from the current Citrix server and checks their compliance against a provided list of compatible versions with the format 'Major.Minor.Build' or 'Major.Minor'.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay to avoid network overload. Provide a number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of client versions considered as compliant. Provide values which match 'Major.Minor.Build' or 'Major.Minor' format, such as '14.12, 14.12.1'", "id": "CompatibleVersionsList", "name": "CompatibleVersionsList", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Total count of sessions considered as incompatible or non-compliant with the compatible version list", "id": "IncompatibleSessions", "name": "IncompatibleSessions", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Ratio of incompatible sessions", "id": "IncompatibleSessionsRatio", "name": "IncompatibleSessionsRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of properties of incompatible sessions, separated by a colon. Each list item will describe separate sessions. The expected output format is CSV", "id": "IncompatibleSessionsDetails", "name": "IncompatibleSessionsDetails", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-CitrixSessionClientVersions.ps1", "script": ""}}}