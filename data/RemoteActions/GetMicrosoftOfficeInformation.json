{"id": "Get_Microsoft_Office_Information_windows", "name": "Get Microsoft Office Information", "description": "Allows to detect issues linked to installed MS office productivity applications by returning the version, the installed application list, and the update channel used.\nVerifies Microsoft Office installation compliance by checking if it meets a minimum version provided as input parameter.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "The minimum version that the Microsoft Office suite installed on the device must be compliant with. Provide any of the following version formats\":\" <major>.<minor>, <major>.<minor>.<build>, <major>.<minor>.<build>.<revision>", "id": "MinimumVersion", "name": "MinimumVersion", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Version number of the Microsoft Office suite installed on the device", "id": "MSOfficeVersion", "name": "MSOfficeVersion", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Build number of the Microsoft Office suite installed on the device", "id": "MSOfficeBuild", "name": "MSOfficeBuild", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Version name of the Microsoft Office suite installed on the device", "id": "MSOfficeVersionName", "name": "MSOfficeVersionName", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of installed Office applications", "id": "InstalledApplications", "name": "InstalledApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Channel which control how often Microsoft Office suite is updated on the device", "id": "UpdateChannel", "name": "UpdateChannel", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether the Microsoft Office suite installed on the device is compliant with the given minimum version as input", "id": "VersionCompliance", "name": "VersionCompliance", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-MSOfficeInfo.ps1", "script": ""}}}