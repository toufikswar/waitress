{"id": "Install_Windows_Update_windows", "name": "Install Windows Update", "description": "Using Windows Update Standalone Installer (wusa.exe), performs .msu patch installation from a given either URL or UNC path.\n\n'''''Warning:''' This Remote Action starts the simultaneous download of Windows patches on all targeted devices. Please ensure that the available network capacity is appropriate for the number of targeted devices.''", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 1200, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Provide URL or UNC path to retrieve the msu file. Example values: http(s)://domain/folder/windows6.1-kb4503292-x64.msu, \\\\server\\SharedFolder\\windows6.1-kb4503292-x64.msu", "id": "HotfixSource", "name": "HotfixSource", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Whether the patch requires device reboot or not", "id": "RebootRequired", "name": "RebootRequired", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Install-WindowsUpdate.ps1", "script": ""}}}