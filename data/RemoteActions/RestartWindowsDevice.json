{"id": "Restart_Windows_Device_windows", "name": "Restart Windows Device", "description": ". Retrieves information if restart is necessary due to too long device uptime or pending reboot, and based on provided input configures restart of target device.  Campaign is displayed to enable user immediate restart, or postpone till next script execution.  After restart, previously opened user's applications are restored. \n\n'''''Warning:''' The 'Device Restart' Remote Action restarts devices based on the provided input parameters", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Number of days considered as maximum allowed without device restart. Accepted values are (0-60)", "id": "NumberOfDaysSinceLastReboot", "name": "NumberOfDaysSinceLastReboot", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Test if a reboot is needed. Accepted values are (True/False)", "id": "TestPendingRestart", "name": "TestPendingRestart", "options": ["True"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Determines under what circumstances the campaign should be shown. Accepted values are (Always/DuringGracePeriod/OnlyFirstExecution/Never)", "id": "ShowCampaign", "name": "ShowCampaign", "options": ["Always"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Id of a campaign to be presented to user before triggering restart", "id": "CampaignId", "name": "CampaignId", "options": ["4fc67441-e4e3-4905-b533-620eb4083c2b"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days provided for user to postpone campaign, verified with hourly precision. Once due date is passed, restart will be scheduled. Accepted values are (1-30)", "id": "PostponeGracePeriodInDays", "name": "PostponeGracePeriodInDays", "options": ["7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of seconds provided as delay before restart is executed. Accepted values are (45-86400)", "id": "RestartDelayInSeconds", "name": "RestartDelayInSeconds", "options": ["300"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Restart-Device.ps1", "script": ""}}}