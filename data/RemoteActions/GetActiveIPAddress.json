{"id": "Get_Active_IP_Address_windows", "name": "Get Active IP Address", "description": "Restarts some Nexthink Services on devices that have recently connected to a VPN so the information shown in the finder is up-to-date.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Name of the VPN used in your organization. The name of the VPN should be present in the output of this Powershell command \"Get-WMIObject -Query 'Select Name,NetEnabled from Win32_NetworkAdapter'\"", "id": "VPNName", "name": "VPNName", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Get-ActiveIPAddress.ps1", "script": ""}}}