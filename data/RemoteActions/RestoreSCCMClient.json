{"id": "Restore_SCCM_Client_windows", "name": "Restore SCCM Client", "description": "Restores SCCM-related client services (SMS Agent, BITS, WMI, etc) and retrieves information about SCCM client on devices.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Status of the SMS Agent Service", "id": "SMSAgentStatus", "name": "SMSAgentStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of the Background Intelligent Transfer Service", "id": "BITSStatus", "name": "BITSStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of the Windows Management Instrumentation Service", "id": "WMIStatus", "name": "WMIStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of the Remote Procedure Call Subsystem Service", "id": "RPCSubsystemStatus", "name": "RPCSubsystemStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of the Windows Time Service", "id": "WindowsTimeServiceStatus", "name": "WindowsTimeServiceStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "If SCCM client is installed or is not", "id": "ClientInstalled", "name": "ClientInstalled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Site where the device is connecting to", "id": "ManagementSite", "name": "ManagementSite", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Last communication date with server", "id": "LastAttemptedCommunication", "name": "LastAttemptedCommunication", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Last cumulative update installed on the device", "id": "LastCumulativeUpdate", "name": "LastCumulativeUpdate", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Restore-SCCMClient.ps1", "script": ""}}}