{"id": "Test_Chrome_Plugins_Compliance_Windows", "name": "Test Chrome Plugins Compliance Windows", "description": "Compares a list of required Chrome plugins against the current ones installed on the device.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "List of comma separated plugins names to check if they are installed. Plugin names must be provided for exact match. To check the status and/or version compliance you can use three different formats. To check only the version, 'name' ('version'). To check only the status, 'name' (Enabled/Disabled). Or to check both, 'name' ('version'; Enabled/Disabled). E.g. Gmail, Docs (Enabled), Google Drive (34.67.0.2; Disabled), Chrome Media Router (7719.805.0.3)", "id": "PluginsToCheck", "name": "PluginsToCheck", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "When 'false', the compliance is met when all provided plugins match the installed ones. When 'true', the compliance is met whet all plugins listed match with the installed ones and those are the only plugins installed", "id": "StrictCompliance", "name": "StrictCompliance", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Returns if device is compliant", "id": "PluginCompliance", "name": "PluginCompliance", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of expected plugins that are not installed", "id": "MissingPlugins", "name": "MissingPlugins", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of plugins with a different version than the desired one", "id": "IncorrectVersionPlugins", "name": "IncorrectVersionPlugins", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of plugins with a different status than the desired one", "id": "IncorrectStatusPlugins", "name": "IncorrectStatusPlugins", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of installed plugins not listed in PluginsToCheck", "id": "OtherPlugins", "name": "OtherPlugins", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Test-ChromePluginsCompliance.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KQ2hlY2sgaWYgdGhlIENocm9tZSBwbHVnaW5zIGluc3RhbGxlZCBpbiB0aGUgZGV2aWNlIGFyZSBjb21wbGlhbnQuDQoNCi5ERVNDUklQVElPTg0KQ29tcGFyZXMgYSBsaXN0IG9mIHJlcXVpcmVkIENocm9tZSBwbHVnaW5zIGFnYWluc3QgdGhlIGN1cnJlbnQgb25lcyBpbnN0YWxsZWQgb24gdGhlIGRldmljZS4NCg0KLkZVTkNUSU9OQUxJVFkNCk9uLWRlbWFuZA0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIFBsdWdpbnNUb0NoZWNrICAgICAgICAgICAgICAgICAgTGlzdCBvZiBjb21tYSBzZXBhcmF0ZWQgcGx1Z2lucyBuYW1lcyB0byBjaGVjayBpZiB0aGV5IGFyZSBpbnN0YWxsZWQuIFBsdWdpbiBuYW1lcyBtdXN0IGJlIHByb3ZpZGVkIGZvciBleGFjdCBtYXRjaC4gVG8gY2hlY2sgdGhlIHN0YXR1cyBhbmQvb3IgdmVyc2lvbiBjb21wbGlhbmNlIHlvdSBjYW4gdXNlIHRocmVlIGRpZmZlcmVudCBmb3JtYXRzLiBUbyBjaGVjayBvbmx5IHRoZSB2ZXJzaW9uLCAnbmFtZScgKCd2ZXJzaW9uJykuIFRvIGNoZWNrIG9ubHkgdGhlIHN0YXR1cywgJ25hbWUnIChFbmFibGVkL0Rpc2FibGVkKS4gT3IgdG8gY2hlY2sgYm90aCwgJ25hbWUnICgndmVyc2lvbic7IEVuYWJsZWQvRGlzYWJsZWQpLiBFLmcuIEdtYWlsLCBEb2NzIChFbmFibGVkKSwgR29vZ2xlIERyaXZlICgzNC42Ny4wLjI7IERpc2FibGVkKSwgQ2hyb21lIE1lZGlhIFJvdXRlciAoNzcxOS44MDUuMC4zKQ0KMiAgIFN0cmljdENvbXBsaWFuY2UgICAgICAgICAgICAgICAgV2hlbiAnZmFsc2UnLCB0aGUgY29tcGxpYW5jZSBpcyBtZXQgd2hlbiBhbGwgcHJvdmlkZWQgcGx1Z2lucyBtYXRjaCB0aGUgaW5zdGFsbGVkIG9uZXMuIFdoZW4gJ3RydWUnLCB0aGUgY29tcGxpYW5jZSBpcyBtZXQgd2hldCBhbGwgcGx1Z2lucyBsaXN0ZWQgbWF0Y2ggd2l0aCB0aGUgaW5zdGFsbGVkIG9uZXMgYW5kIHRob3NlIGFyZSB0aGUgb25seSBwbHVnaW5zIGluc3RhbGxlZA0KDQouT1VUUFVUUw0KSUQgIExhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgICAgICAgIERlc2NyaXB0aW9uDQoxICAgUGx1Z2luQ29tcGxpYW5jZSAgICAgICAgICAgICAgICBCb29sICAgICAgICAgICAgUmV0dXJucyBpZiBkZXZpY2UgaXMgY29tcGxpYW50DQoyICAgTWlzc2luZ1BsdWdpbnMgICAgICAgICAgICAgICAgICBTdHJpbmdMaXN0ICAgICAgTGlzdCBvZiBleHBlY3RlZCBwbHVnaW5zIHRoYXQgYXJlIG5vdCBpbnN0YWxsZWQNCjMgICBJbmNvcnJlY3RWZXJzaW9uUGx1Z2lucyAgICAgICAgIFN0cmluZ0xpc3QgICAgICBMaXN0IG9mIHBsdWdpbnMgd2l0aCBhIGRpZmZlcmVudCB2ZXJzaW9uIHRoYW4gdGhlIGRlc2lyZWQgb25lDQo0ICAgSW5jb3JyZWN0U3RhdHVzUGx1Z2lucyAgICAgICAgICBTdHJpbmdMaXN0ICAgICAgTGlzdCBvZiBwbHVnaW5zIHdpdGggYSBkaWZmZXJlbnQgc3RhdHVzIHRoYW4gdGhlIGRlc2lyZWQgb25lDQo1ICAgT3RoZXJQbHVnaW5zICAgICAgICAgICAgICAgICAgICBTdHJpbmdMaXN0ICAgICAgTGlzdCBvZiBpbnN0YWxsZWQgcGx1Z2lucyBub3QgbGlzdGVkIGluIFBsdWdpbnNUb0NoZWNrDQoNCi5GVVJUSEVSIElORk9STUFUSU9ODQpUaGUgb3V0cHV0IG9mIEdldCBDaHJvbWUgUGx1Z2lucyBjYW4gYmUgY29waWVkIGFuZCBwYXN0ZWQgZGlyZWN0bHkgaW50byBQbHVnaW5zVG9DaGVjayBpbnB1dCBwYXJhbWV0ZXIsIHNpbmNlIGJvdGggdXNlIHRoZSBzYW1lIGZvcm1hdC4NCklmIHRoZSBpbnB1dCBlbmZvcmNlcyBhbiBzcGVjaWZpYyB2ZXJzaW9uLCBpdCB3aWxsIG9ubHkgYmUgY29tcGxpYW50IGlmIHRoZSBpbnN0YWxsZWQgdmVyc2lvbiBpcyBleGFjdGx5IHRoZSBzYW1lLiBBIGhpZ2hlciB2ZXJzaW9uIHdpbGwgYmUgbm90IGNvbXBsaWFudC4NCg0KLlJFU1RSSUNUSU9OUw0KLSBUaGUgQ2hyb21lIHZlcnNpb24gaW5zdGFsbGVkIHNob3VsZCBiZSA2NSBvciBvbndhcmRzLg0KLSBJZiBDaHJvbWUgJ1ByZWZlcmVuY2VzJyBmaWxlIGNhbid0IGJlIHBhcnNlZCwgdGhlIHN0YXR1cyBvZiBhbGwgcGx1Z2lucyB3aWxsIGJlIHVua25vd24uDQotIElmIHRoZSBpbnN0YWxsZWQgc3RhdHVzIG9mIHRoZSBwbHVnaW4gaXMgdW5rbm93biBhbmQgdGhlIGlucHV0IGVuZm9yY2UgYW4gc3BlY2lmaWMgc3RhdHVzLCB0aGUgcmVzdWx0IHdpbGwgbm90IGJlIGNvbXBsaWFudC4NCg0KLk5PVEVTDQpDb250ZXh0OiAgICAgICAgICAgIEludGVyYWN0aXZlVXNlcg0KVmVyc2lvbjogICAgICAgICAgICAxLjAuMi4wIC0gQWRkZWQgT1MgaW5mb3JtYXRpb24gdG8gdGhlIG5hbWUgb2YgdGhlIFJlbW90ZSBBY3Rpb24NCiAgICAgICAgICAgICAgICAgICAgMS4wLjEuMCAtIFVwZGF0ZWQgZG9jdW1lbnRhdGlvbg0KICAgICAgICAgICAgICAgICAgICAxLjAuMC4wIC0gSW5pdGlhbCByZWxlYXNlDQpMYXN0IEdlbmVyYXRlZDogICAgIDIzIFNlcCAyMDIxIC0gMTU6MjE6MjENCkNvcHlyaWdodCAoQykgMjAyMSBOZXh0aGluayBTQSwgU3dpdHplcmxhbmQNCiM+DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVycyBkZWZpbml0aW9uDQojDQpwYXJhbSgNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRQbHVnaW5zVG9DaGVjaywNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRTdHJpY3RDb21wbGlhbmNlDQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCg0KIw0KIyBDb25zdGFudHMgZGVmaW5pdGlvbg0KIw0KTmV3LVZhcmlhYmxlIC1OYW1lICdFUlJPUl9FWENFUFRJT05fVFlQRScgYA0KICAgIC1WYWx1ZSBAe0Vudmlyb25tZW50ID0gJ1tFbnZpcm9ubWVudCBlcnJvcl0nDQogICAgICAgICAgICAgSW5wdXQgPSAnW0lucHV0IGVycm9yXScNCiAgICAgICAgICAgICBJbnRlcm5hbCA9ICdbSW50ZXJuYWwgZXJyb3JdJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdMT0NBTF9TWVNURU1fSURFTlRJVFknIGANCiAgICAtVmFsdWUgJ1MtMS01LTE4JyAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUkVNT1RFX0FDVElPTl9ETExfUEFUSCcgYA0KICAgIC1WYWx1ZSAiJGVudjpORVhUSElOS1xSZW1vdGVBY3Rpb25zXG54dHJlbW90ZWFjdGlvbnMuZGxsIiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ0hST01FX1JFR19QQVRIJyBgDQogICAgLVZhbHVlICdIS0xNOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxBcHAgUGF0aHNcY2hyb21lLmV4ZScgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQ0hST01FX1VTRVJfREFUQV9QQVRIJyBgDQogICAgLVZhbHVlICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0IiBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdQTFVHSU5fTkFNRV9SRUdFWCcgYA0KICAgIC1WYWx1ZSAnKFteXChcKV0rKScgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnUExVR0lOX1ZFUlNJT05fUkVHRVgnIGANCiAgICAtVmFsdWUgJyhcZCt8XGQrXC5cZCt8XGQrXC5cZCtcLlxkK3xcZCtcLlxkK1wuXGQrXC5cZCspJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdQTFVHSU5fU1RBVFVTX1JFR0VYJyBgDQogICAgLVZhbHVlICcoRW5hYmxlZHxEaXNhYmxlZCknIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ1BMVUdJTl9QQVRURVJOU19SRUdFWCcgYA0KICAgIC1WYWx1ZSBAe09ubHlOYW1lID0gIl4kUExVR0lOX05BTUVfUkVHRVgkIg0KICAgICAgICAgICAgIFZlcnNpb24gPSAiXiRQTFVHSU5fTkFNRV9SRUdFWCBcKCRQTFVHSU5fVkVSU0lPTl9SRUdFWFwpJCINCiAgICAgICAgICAgICBTdGF0dXMgPSAiXiRQTFVHSU5fTkFNRV9SRUdFWCBcKCRQTFVHSU5fU1RBVFVTX1JFR0VYXCkkIg0KICAgICAgICAgICAgIFZlcnNpb25BbmRTdGF0dXMgPSAiXiRQTFVHSU5fTkFNRV9SRUdFWCBcKCRQTFVHSU5fVkVSU0lPTl9SRUdFWDsgJFBMVUdJTl9TVEFUVVNfUkVHRVhcKSQifSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdQTFVHSU5fTVNHX05BTUVfUkVHRVgnIGANCiAgICAtVmFsdWUgJ19fTVNHXyguKilfXycgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KIw0KIyBJbnZva2UgTWFpbg0KIw0KZnVuY3Rpb24gSW52b2tlLU1haW4gKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRleGl0Q29kZSA9IDANCiAgICAkcGx1Z2luQ29tcGxpYW5jZURhdGEgPSBJbml0aWFsaXplLVBsdWdpbkNvbXBsaWFuY2VEYXRhDQogICAgdHJ5IHsNCiAgICAgICAgQWRkLU5leHRoaW5rUmVtb3RlQWN0aW9uRExMDQogICAgICAgIFRlc3QtUnVubmluZ0FzSW50ZXJhY3RpdmVVc2VyDQogICAgICAgIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uDQogICAgICAgIFRlc3QtQnJvd3NlclZlcnNpb24NCiAgICAgICAgVGVzdC1JbnB1dFBhcmFtZXRlcnMgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzDQoNCiAgICAgICAgJHBsdWdpbkxpc3QgPSBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5QbHVnaW5zVG9DaGVjayBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVNlcGFyYXRvciAnLCcNCiAgICAgICAgVXBkYXRlLVBsdWdpbnNDb21wbGlhbmNlRGF0YSAtUGx1Z2luc1RvQ2hlY2sgJHBsdWdpbkxpc3QgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1QbHVnaW5Db21wbGlhbmNlRGF0YSAkcGx1Z2luQ29tcGxpYW5jZURhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1TdHJpY3RDb21wbGlhbmNlIChbYm9vbF06OlBhcnNlKCRJbnB1dFBhcmFtZXRlcnMuU3RyaWN0Q29tcGxpYW5jZSkpDQogICAgfSBjYXRjaCB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJF8NCiAgICAgICAgJGV4aXRDb2RlID0gMQ0KICAgIH0gZmluYWxseSB7DQogICAgICAgIFVwZGF0ZS1FbmdpbmVPdXRwdXRWYXJpYWJsZXMgLVBsdWdpbkNvbXBsaWFuY2VEYXRhICRwbHVnaW5Db21wbGlhbmNlRGF0YQ0KICAgIH0NCg0KICAgIHJldHVybiAkZXhpdENvZGUNCn0NCg0KZnVuY3Rpb24gSW5pdGlhbGl6ZS1QbHVnaW5Db21wbGlhbmNlRGF0YSB7DQogICAgcmV0dXJuIEB7UGx1Z2luQ29tcGxpYW5jZSA9ICRmYWxzZQ0KICAgICAgICAgICAgIE1pc3NpbmdQbHVnaW5zID0gW3N0cmluZ1tdXUAoKQ0KICAgICAgICAgICAgIEluY29ycmVjdFZlcnNpb25QbHVnaW5zID0gW3N0cmluZ1tdXUAoKQ0KICAgICAgICAgICAgIEluY29ycmVjdFN0YXR1c1BsdWdpbnMgPSBbc3RyaW5nW11dQCgpDQogICAgICAgICAgICAgT3RoZXJQbHVnaW5zID0gW3N0cmluZ1tdXUAoKX0NCn0NCg0KIw0KIyBUZW1wbGF0ZSBmdW5jdGlvbnMNCiMNCmZ1bmN0aW9uIEFkZC1OZXh0aGlua1JlbW90ZUFjdGlvbkRMTCB7DQoNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIE5leHRoaW5rIFJlbW90ZSBBY3Rpb24gRExMIG5vdCBmb3VuZC4gIg0KICAgIH0NCiAgICBBZGQtVHlwZSAtUGF0aCAkUkVNT1RFX0FDVElPTl9ETExfUEFUSA0KfQ0KDQpmdW5jdGlvbiBUZXN0LVJ1bm5pbmdBc0ludGVyYWN0aXZlVXNlciB7DQoNCiAgICBpZiAoQ29uZmlybS1DdXJyZW50VXNlcklzTG9jYWxTeXN0ZW0pIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBhcyBJbnRlcmFjdGl2ZVVzZXIuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpcm0tQ3VycmVudFVzZXJJc0xvY2FsU3lzdGVtIHsNCg0KICAgICRjdXJyZW50SWRlbnRpdHkgPSBHZXQtQ3VycmVudElkZW50aXR5DQogICAgcmV0dXJuICRjdXJyZW50SWRlbnRpdHkgLWVxICRMT0NBTF9TWVNURU1fSURFTlRJVFkNCn0NCg0KZnVuY3Rpb24gR2V0LUN1cnJlbnRJZGVudGl0eSB7DQoNCiAgICByZXR1cm4gW3NlY3VyaXR5LnByaW5jaXBhbC53aW5kb3dzaWRlbnRpdHldOjpHZXRDdXJyZW50KCkuVXNlci5Ub1N0cmluZygpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uIHsNCg0KICAgICRPU1ZlcnNpb24gPSAoR2V0LU9TVmVyc2lvbikgLWFzIFt2ZXJzaW9uXQ0KICAgIGlmICgtbm90ICgkT1NWZXJzaW9uKSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoaXMgc2NyaXB0IGNvdWxkIG5vdCByZXR1cm4gT1MgdmVyc2lvbi4gIg0KICAgIH0NCiAgICBpZiAoKCRPU1ZlcnNpb24uTWFqb3IgLW5lIDYgLW9yICRPU1ZlcnNpb24uTWlub3IgLW5lIDEpIC1hbmQgYA0KICAgICAgICAoJE9TVmVyc2lvbi5NYWpvciAtbmUgMTApKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgaXMgY29tcGF0aWJsZSB3aXRoIFdpbmRvd3MgNyBhbmQgMTAgb25seS4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LU9TVmVyc2lvbiB7DQoNCiAgICByZXR1cm4gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfT3BlcmF0aW5nU3lzdGVtIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAtRmlsdGVyICdQcm9kdWN0VHlwZSA9IDEnIC1FcnJvckFjdGlvbiBTdG9wIHwgYA0KICAgICAgICAgICAgICAgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgVmVyc2lvbg0KfQ0KDQpmdW5jdGlvbiBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAoW3N0cmluZ10kVmFsdWUsIFtzdHJpbmddJFNlcGFyYXRvcikgew0KICAgIFtzdHJpbmddJGZvcm1hdHRlZFN0cmluZyA9IEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFZhbHVlDQogICAgJHZhbHVlTGlzdCA9ICRmb3JtYXR0ZWRTdHJpbmcuU3BsaXQoJFNlcGFyYXRvciwgW3N0cmluZ3NwbGl0b3B0aW9uc106OlJlbW92ZUVtcHR5RW50cmllcykNCiAgICBbc3RyaW5nW11dJHJlc3VsdCA9IEAoKQ0KDQogICAgaWYgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICR2YWx1ZUxpc3QpIHsgcmV0dXJuICRyZXN1bHQgfQ0KDQogICAgZm9yZWFjaCAoJHZhbHVlIGluICR2YWx1ZUxpc3QpIHsNCiAgICAgICAgJHJlc3VsdCArPSAkdmFsdWUuVHJpbSgpDQogICAgfQ0KDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAoW3Bzb2JqZWN0W11dJENvbGxlY3Rpb24pIHsNCiAgICByZXR1cm4gJG51bGwgLWVxICRDb2xsZWN0aW9uIC1vciAoJENvbGxlY3Rpb24gfCBNZWFzdXJlLU9iamVjdCkuQ291bnQgLWVxIDANCn0NCg0KZnVuY3Rpb24gV3JpdGUtU3RhdHVzTWVzc2FnZSAoW3Bzb2JqZWN0XSRNZXNzYWdlKSB7DQogICAgJGV4Y2VwdGlvbk1lc3NhZ2UgPSAkTWVzc2FnZS5Ub1N0cmluZygpDQoNCiAgICBpZiAoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlcikgew0KICAgICAgICAkdmVyc2lvbiA9IEdldC1TY3JpcHRWZXJzaW9uDQogICAgICAgIGlmICgtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCR2ZXJzaW9uKSkgew0KICAgICAgICAgICAgJHNjcmlwdFZlcnNpb24gPSAiVmVyc2lvbjogJHZlcnNpb24uICINCiAgICAgICAgfQ0KDQogICAgICAgICRlcnJvck1lc3NhZ2VMaW5lID0gJHNjcmlwdFZlcnNpb24gKyAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKSc6ICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JNZXNzYWdlTGluZSArICRleGNlcHRpb25NZXNzYWdlKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtU2NyaXB0VmVyc2lvbiB7DQoNCiAgICAkc2NyaXB0Q29udGVudCA9IEdldC1Db250ZW50ICRNeUludm9jYXRpb24uU2NyaXB0TmFtZSB8IE91dC1TdHJpbmcNCiAgICBpZiAoJHNjcmlwdENvbnRlbnQgLW5vdG1hdGNoICc8I1tcclxuXXsyfS5TWU5PUFNJU1teXCNcPl0qKC5OT1RFU1teXCNcPl0qKVwjPicpIHsgcmV0dXJuIH0NCg0KICAgICRoZWxwQmxvY2sgPSAkTWF0Y2hlc1sxXS5TcGxpdChbZW52aXJvbm1lbnRdOjpOZXdMaW5lKQ0KDQogICAgZm9yZWFjaCAoJGxpbmUgaW4gJGhlbHBCbG9jaykgew0KICAgICAgICBpZiAoJGxpbmUgLW1hdGNoICdWZXJzaW9uOicpIHsNCiAgICAgICAgICAgIHJldHVybiAkbGluZS5TcGxpdCgnOicpWzFdLlNwbGl0KCctJylbMF0uVHJpbSgpDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtQm9vbGVhblBhcmFtZXRlciAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgJHZhbHVlID0gJFBhcmFtVmFsdWUuVG9Mb3dlcigpDQogICAgaWYgKCR2YWx1ZSAtbmUgJ3RydWUnIC1hbmQgJHZhbHVlIC1uZSAnZmFsc2UnKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnB1dCkgRXJyb3IgaW4gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gSXQgbXVzdCBiZSAndHJ1ZScgb3IgJ2ZhbHNlJy4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1TdHJpbmdOdWxsT3JFbXB0eSAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KChGb3JtYXQtU3RyaW5nVmFsdWUgLVZhbHVlICRQYXJhbVZhbHVlKSkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSAnJFBhcmFtTmFtZScgY2Fubm90IGJlIGVtcHR5IG5vciBudWxsLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnlLZXkgKFtzdHJpbmddJEtleSwgW3N0cmluZ10kUHJvcGVydHkpIHsNCiAgICByZXR1cm4gKEdldC1JdGVtUHJvcGVydHkgLVBhdGggJEtleSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1OYW1lICRQcm9wZXJ0eSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKS4kUHJvcGVydHkNCn0NCg0KZnVuY3Rpb24gR2V0LUpzb25Db250ZW50IChbc3RyaW5nXSRQYXRoKSB7DQogICAgQWRkLVdlYkV4dGVuc2lvbnMNCg0KICAgIHRyeSB7DQogICAgICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJFBhdGgNCiAgICAgICAgJGpzb24gPSBOZXctT2JqZWN0IHdlYi5zY3JpcHQuc2VyaWFsaXphdGlvbi5qYXZhc2NyaXB0c2VyaWFsaXplcg0KICAgICAgICByZXR1cm4gJGpzb24uRGVzZXJpYWxpemVPYmplY3QoJGNvbnRlbnQpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgSW1wb3NzaWJsZSB0byBsb2FkIEpTT04gY29udGVudCAnJFBhdGgnLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBBZGQtV2ViRXh0ZW5zaW9ucyB7DQoNCiAgICB0cnkgeyBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIHN5c3RlbS53ZWIuZXh0ZW5zaW9ucyB9DQogICAgY2F0Y2ggeyB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFdlYiBleHRlbnNpb25zIG5vdCBmb3VuZC4gIiB9DQp9DQoNCmZ1bmN0aW9uIEVkaXQtU3RyaW5nTGlzdFJlc3VsdCAoW3N0cmluZ1tdXSRTdHJpbmdMaXN0KSB7DQogICAgcmV0dXJuICQoaWYgKCRTdHJpbmdMaXN0LkNvdW50IC1ndCAwKSB7ICRTdHJpbmdMaXN0IH0gZWxzZSB7ICctJyB9KQ0KfQ0KDQojDQojIElucHV0IHBhcmFtZXRlciB2YWxpZGF0aW9uDQojDQpmdW5jdGlvbiBUZXN0LUlucHV0UGFyYW1ldGVycyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgVGVzdC1Cb29sZWFuUGFyYW1ldGVyIGANCiAgICAgICAgLVBhcmFtTmFtZSAnU3RyaWN0Q29tcGxpYW5jZScgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLlN0cmljdENvbXBsaWFuY2UNCiAgICBUZXN0LVBsdWdpbkxpc3RGb3JtYXQgYA0KICAgICAgICAtUGFyYW1OYW1lICdQbHVnaW5zVG9DaGVjaycgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLlBsdWdpbnNUb0NoZWNrDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGx1Z2luTGlzdEZvcm1hdCAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgVGVzdC1TdHJpbmdOdWxsT3JFbXB0eSAtUGFyYW1OYW1lICRQYXJhbU5hbWUgLVBhcmFtVmFsdWUgJFBhcmFtVmFsdWUNCg0KICAgICRwbHVnaW5MaXN0ID0gU3BsaXQtU2VwYXJhdGVkVmFsdWUgLVZhbHVlICRQYXJhbVZhbHVlIC1TZXBhcmF0b3IgJywnDQogICAgJHJlZ2V4R3JvdXBzID0gR2V0LVJlZ2V4R3JvdXBzRnJvbUxpc3QgLUxpc3QgJFBMVUdJTl9QQVRURVJOU19SRUdFWC5WYWx1ZXMNCg0KICAgIGZvcmVhY2ggKCRwbHVnaW4gaW4gJHBsdWdpbkxpc3QpIHsNCiAgICAgICAgaWYgKCRwbHVnaW4gLW5vdG1hdGNoICRyZWdleEdyb3Vwcykgew0KICAgICAgICAgICAgdGhyb3cgIlBsdWdpbiAnJHBsdWdpbicgaW4gJyRQYXJhbU5hbWUnIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBmb3JtYXQuIENvbnN1bHQgdGhpcyBSZW1vdGUgQWN0aW9uIERvY3VtZW50YXRpb24gZm9yIG1vcmUgZGV0YWlscy4gIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnZXhHcm91cHNGcm9tTGlzdCAoW3N0cmluZ1tdXSRMaXN0KSB7DQogICAgcmV0dXJuICcoJyArICgkTGlzdCAtam9pbiAnfCcpICsgJyknDQp9DQoNCiMNCiMgQnJvd3NlciBjaGVjaw0KIw0KZnVuY3Rpb24gVGVzdC1Ccm93c2VyVmVyc2lvbiB7DQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkQ0hST01FX1JFR19QQVRIKSkgeyB0aHJvdyAnQ2hyb21lIGJyb3dzZXIgaXMgbm90IGluc3RhbGxlZC4gJyB9DQoNCiAgICB0cnkgew0KICAgICAgICAkYnJvd3NlckV4ZWNQYXRoID0gR2V0LVJlZ2lzdHJ5S2V5IC1LZXkgJENIUk9NRV9SRUdfUEFUSCAtUHJvcGVydHkgJyhEZWZhdWx0KScNCiAgICAgICAgJGJyb3dzZXJFeGVjSXRlbSA9IEdldC1JdGVtIC1QYXRoICRicm93c2VyRXhlY1BhdGgNCiAgICAgICAgW3ZlcnNpb25dJGNocm9tZVZlcnNpb24gPSAkYnJvd3NlckV4ZWNJdGVtLlZlcnNpb25JbmZvLlByb2R1Y3RWZXJzaW9uDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICdDaHJvbWUgdmVyc2lvbiBub3QgZm91bmQuICcNCiAgICB9DQoNCiAgICBpZiAoJGNocm9tZVZlcnNpb24uTWFqb3IgLWx0IDY1KSB7IHRocm93ICdUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggQ2hyb21lIDY1IG9ud2FyZHMuICcgfQ0KfQ0KDQojDQojIENocm9tZSBQbHVnaW5zIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIFVwZGF0ZS1QbHVnaW5zQ29tcGxpYW5jZURhdGEgKFtzdHJpbmdbXV0kUGx1Z2luc1RvQ2hlY2ssDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGFzaHRhYmxlXSRQbHVnaW5Db21wbGlhbmNlRGF0YSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtib29sXSRTdHJpY3RDb21wbGlhbmNlKSB7DQogICAgJGluc3RhbGxlZFBsdWdpbnMgPSBHZXQtSW5zdGFsbGVkQ2hyb21lUGx1Z2lucw0KDQogICAgJHBsdWdpbnNUb0NoZWNrRGF0YSA9IEB7fQ0KICAgIGZvcmVhY2ggKCRwbHVnaW4gaW4gJFBsdWdpbnNUb0NoZWNrKSB7DQogICAgICAgIFVwZGF0ZS1QbHVnaW5Db21wbGlhbmNlIC1QbHVnaW5JbnB1dCAkcGx1Z2luIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUluc3RhbGxlZFBsdWdpbnMgJGluc3RhbGxlZFBsdWdpbnMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGx1Z2luQ29tcGxpYW5jZURhdGEgJFBsdWdpbkNvbXBsaWFuY2VEYXRhIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUV4cGVjdGVkUGx1Z2luc0luZm8gJHBsdWdpbnNUb0NoZWNrRGF0YQ0KICAgIH0NCg0KICAgIFVwZGF0ZS1PdGhlclBsdWdpbnMgLUluc3RhbGxlZFBsdWdpbnMgJGluc3RhbGxlZFBsdWdpbnMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgLUV4cGVjdGVkUGx1Z2lucyAkcGx1Z2luc1RvQ2hlY2tEYXRhIGANCiAgICAgICAgICAgICAgICAgICAgICAgIC1QbHVnaW5Db21wbGlhbmNlRGF0YSAkUGx1Z2luQ29tcGxpYW5jZURhdGENCiAgICAkUGx1Z2luQ29tcGxpYW5jZURhdGEuUGx1Z2luQ29tcGxpYW5jZSA9IGANCiAgICAgICAgVGVzdC1Db21wbGlhbmNlIC1QbHVnaW5Db21wbGlhbmNlRGF0YSAkUGx1Z2luQ29tcGxpYW5jZURhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAgLVN0cmljdENvbXBsaWFuY2UgJFN0cmljdENvbXBsaWFuY2UNCn0NCg0KZnVuY3Rpb24gVXBkYXRlLVBsdWdpbkNvbXBsaWFuY2UgKFtzdHJpbmddJFBsdWdpbklucHV0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtoYXNodGFibGVdJEluc3RhbGxlZFBsdWdpbnMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2hhc2h0YWJsZV0kUGx1Z2luQ29tcGxpYW5jZURhdGEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2hhc2h0YWJsZV0kRXhwZWN0ZWRQbHVnaW5zSW5mbykgew0KICAgICRwbHVnaW5EYXRhID0gTmV3LVBsdWdpbkZyb21JbnB1dFN0cmluZyAtUGx1Z2luICRQbHVnaW5JbnB1dA0KICAgIFVwZGF0ZS1FeHBlY3RlZFBsdWdpbnNJbmZvIC1FeHBlY3RlZFBsdWdpbnNJbmZvICRFeHBlY3RlZFBsdWdpbnNJbmZvIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGx1Z2luVG9BZGQgJHBsdWdpbkRhdGENCg0KICAgIGlmICgtbm90ICRJbnN0YWxsZWRQbHVnaW5zLkNvbnRhaW5zS2V5KCRwbHVnaW5EYXRhLk5hbWUpKSB7DQogICAgICAgICRQbHVnaW5Db21wbGlhbmNlRGF0YS5NaXNzaW5nUGx1Z2lucyArPSAkcGx1Z2luRGF0YS5OYW1lDQogICAgICAgIHJldHVybg0KICAgIH0NCg0KICAgICRpbnN0YWxsZWRQbHVnaW4gPSAkSW5zdGFsbGVkUGx1Z2lucy4oJHBsdWdpbkRhdGEuTmFtZSkNCiAgICBVcGRhdGUtUHJvcGVydHlDb21wbGlhbmNlIC1FeHBlY3RlZFBsdWdpbiAkcGx1Z2luRGF0YSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtSW5zdGFsbGVkUGx1Z2luICRpbnN0YWxsZWRQbHVnaW4gYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVBsdWdpbkNvbXBsaWFuY2VEYXRhICRQbHVnaW5Db21wbGlhbmNlRGF0YSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUHJvcGVydHkgJ1ZlcnNpb24nDQogICAgVXBkYXRlLVByb3BlcnR5Q29tcGxpYW5jZSAtRXhwZWN0ZWRQbHVnaW4gJHBsdWdpbkRhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUluc3RhbGxlZFBsdWdpbiAkaW5zdGFsbGVkUGx1Z2luIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1QbHVnaW5Db21wbGlhbmNlRGF0YSAkUGx1Z2luQ29tcGxpYW5jZURhdGEgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb3BlcnR5ICdTdGF0dXMnDQp9DQoNCmZ1bmN0aW9uIE5ldy1QbHVnaW5Gcm9tSW5wdXRTdHJpbmcgKFtzdHJpbmddJFBsdWdpbikgew0KICAgICRwbHVnaW5EYXRhID0gQHt9DQoNCiAgICBpZiAoJFBsdWdpbiAtbWF0Y2ggJFBMVUdJTl9QQVRURVJOU19SRUdFWC5WZXJzaW9uQW5kU3RhdHVzKSB7DQogICAgICAgICRwbHVnaW5EYXRhLk5hbWUgPSAkTWF0Y2hlc1sxXQ0KICAgICAgICAkcGx1Z2luRGF0YS5WZXJzaW9uID0gJE1hdGNoZXNbMl0NCiAgICAgICAgJHBsdWdpbkRhdGEuU3RhdHVzID0gJE1hdGNoZXNbM10NCiAgICB9IGVsc2VpZiAoJFBsdWdpbiAtbWF0Y2ggJFBMVUdJTl9QQVRURVJOU19SRUdFWC5WZXJzaW9uKSB7DQogICAgICAgICRwbHVnaW5EYXRhLk5hbWUgPSAkTWF0Y2hlc1sxXQ0KICAgICAgICAkcGx1Z2luRGF0YS5WZXJzaW9uID0gJE1hdGNoZXNbMl0NCiAgICB9IGVsc2VpZiAoJFBsdWdpbiAtbWF0Y2ggJFBMVUdJTl9QQVRURVJOU19SRUdFWC5TdGF0dXMpIHsNCiAgICAgICAgJHBsdWdpbkRhdGEuTmFtZSA9ICRNYXRjaGVzWzFdDQogICAgICAgICRwbHVnaW5EYXRhLlN0YXR1cyA9ICRNYXRjaGVzWzJdDQogICAgfSBlbHNlIHsNCiAgICAgICAgJHBsdWdpbkRhdGEuTmFtZSA9ICRQbHVnaW4NCiAgICB9DQoNCiAgICByZXR1cm4gJHBsdWdpbkRhdGENCn0NCg0KZnVuY3Rpb24gVXBkYXRlLUV4cGVjdGVkUGx1Z2luc0luZm8gKFtoYXNodGFibGVdJEV4cGVjdGVkUGx1Z2luc0luZm8sIFtoYXNodGFibGVdJFBsdWdpblRvQWRkKSB7DQogICAgJEV4cGVjdGVkUGx1Z2luc0luZm9bJFBsdWdpblRvQWRkLk5hbWVdID0gQHtWZXJzaW9uID0gJFBsdWdpblRvQWRkLlZlcnNpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1cyA9ICRQbHVnaW5Ub0FkZC5TdGF0dXN9DQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1Qcm9wZXJ0eUNvbXBsaWFuY2UgKFtoYXNodGFibGVdJEV4cGVjdGVkUGx1Z2luLCBbaGFzaHRhYmxlXSRJbnN0YWxsZWRQbHVnaW4sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGFzaHRhYmxlXSRQbHVnaW5Db21wbGlhbmNlRGF0YSwgW3N0cmluZ10kUHJvcGVydHkpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJEV4cGVjdGVkUGx1Z2luLiRQcm9wZXJ0eSkpIHsgcmV0dXJuIH0NCg0KICAgIGlmICgkRXhwZWN0ZWRQbHVnaW4uJFByb3BlcnR5IC1uZSAkSW5zdGFsbGVkUGx1Z2luLiRQcm9wZXJ0eSkgew0KICAgICAgICAkUGx1Z2luQ29tcGxpYW5jZURhdGEuIkluY29ycmVjdCQoJFByb3BlcnR5KVBsdWdpbnMiICs9ICIkKCRFeHBlY3RlZFBsdWdpbi5OYW1lKSAoJCgkSW5zdGFsbGVkUGx1Z2luLiRQcm9wZXJ0eSkpIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVXBkYXRlLU90aGVyUGx1Z2lucyAoW2hhc2h0YWJsZV0kSW5zdGFsbGVkUGx1Z2lucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtoYXNodGFibGVdJEV4cGVjdGVkUGx1Z2lucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtoYXNodGFibGVdJFBsdWdpbkNvbXBsaWFuY2VEYXRhKSB7DQogICAgZm9yZWFjaCAoJHBsdWdpbk5hbWUgaW4gJEluc3RhbGxlZFBsdWdpbnMuS2V5cykgew0KICAgICAgICBpZiAoLW5vdCAkRXhwZWN0ZWRQbHVnaW5zLkNvbnRhaW5zS2V5KCRwbHVnaW5OYW1lKSkgew0KICAgICAgICAgICAgJFBsdWdpbkNvbXBsaWFuY2VEYXRhLk90aGVyUGx1Z2lucyArPSAkcGx1Z2luTmFtZQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUNvbXBsaWFuY2UgKFtoYXNodGFibGVdJFBsdWdpbkNvbXBsaWFuY2VEYXRhLCBbYm9vbF0kU3RyaWN0Q29tcGxpYW5jZSkgew0KICAgIHJldHVybiAkUGx1Z2luQ29tcGxpYW5jZURhdGEuTWlzc2luZ1BsdWdpbnMuQ291bnQgLWVxIDAgLWFuZCBgDQogICAgICAgICAgICRQbHVnaW5Db21wbGlhbmNlRGF0YS5JbmNvcnJlY3RWZXJzaW9uUGx1Z2lucy5Db3VudCAtZXEgMCAtYW5kIGANCiAgICAgICAgICAgJFBsdWdpbkNvbXBsaWFuY2VEYXRhLkluY29ycmVjdFN0YXR1c1BsdWdpbnMuQ291bnQgLWVxIDAgLWFuZCBgDQogICAgICAgICAgICgtbm90ICRTdHJpY3RDb21wbGlhbmNlIC1vciBgDQogICAgICAgICAgICRQbHVnaW5Db21wbGlhbmNlRGF0YS5PdGhlclBsdWdpbnMuQ291bnQgLWVxIDApDQp9DQoNCiMNCiMgR2V0IENocm9tZSBQbHVnaW5zDQojDQpmdW5jdGlvbiBHZXQtSW5zdGFsbGVkQ2hyb21lUGx1Z2lucyB7DQogICAgJHBhdGggPSAiJENIUk9NRV9VU0VSX0RBVEFfUEFUSFxFeHRlbnNpb25zIg0KICAgIFtwc29iamVjdFtdXSRleHRlbnNpb25Gb2xkZXJzID0gR2V0LUZvbGRlcnMgLVBhdGggJHBhdGgNCg0KICAgIGlmIChUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAtQ29sbGVjdGlvbiAkZXh0ZW5zaW9uRm9sZGVycykgeyByZXR1cm4gQHt9IH0NCg0KICAgICRwbHVnaW5zID0gQHt9DQogICAgJHBsdWdpbnNTdGF0dXMgPSBHZXQtUGx1Z2luc1N0YXR1c0Zyb21QcmVmZXJlbmNlc0ZpbGUNCiAgICBmb3JlYWNoICgkZXh0Rm9sZGVyIGluICRleHRlbnNpb25Gb2xkZXJzKSB7DQogICAgICAgIFVwZGF0ZS1JbnN0YWxsZWRQbHVnaW5EYXRhIC1Gb2xkZXIgJGV4dEZvbGRlciBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1QbHVnaW5zU3RhdHVzICRwbHVnaW5zU3RhdHVzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVBsdWdpbnNEYXRhICRwbHVnaW5zDQogICAgfQ0KDQogICAgcmV0dXJuICRwbHVnaW5zDQp9DQoNCmZ1bmN0aW9uIEdldC1QbHVnaW5zU3RhdHVzRnJvbVByZWZlcmVuY2VzRmlsZSB7DQogICAgJHBhdGggPSAiJENIUk9NRV9VU0VSX0RBVEFfUEFUSFxQcmVmZXJlbmNlcyINCiAgICAkcGx1Z2luc1N0YXR1cyA9IEB7fQ0KDQogICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCkgew0KICAgICAgICAkanNvbiA9IEdldC1Kc29uQ29udGVudCAtUGF0aCAkcGF0aA0KICAgICAgICBbaGFzaHRhYmxlXSRwbHVnaW5zID0gJGpzb24uZXh0ZW5zaW9ucy5zZXR0aW5ncw0KICAgICAgICBpZiAoLW5vdCAoVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgLUNvbGxlY3Rpb24gJHBsdWdpbnMpKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkcGx1Z2luR1VJRCBpbiBbYXJyYXldJHBsdWdpbnMuS2V5cykgew0KICAgICAgICAgICAgICAgICRwbHVnaW5zU3RhdHVzWyRwbHVnaW5HVUlEXSA9ICRwbHVnaW5zWyRwbHVnaW5HVUlEXS5zdGF0ZQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKCRwbHVnaW5zU3RhdHVzLkNvdW50IC1lcSAwKSB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgIk5vdCBwb3NzaWJsZSB0byBwYXJzZSBDaHJvbWUgJ1ByZWZlcmVuY2VzJyBmaWxlIHByb3Blcmx5LiBQbHVnaW5zIHN0YXRlcyBub3QgYXZhaWxhYmxlLiAiDQogICAgfQ0KDQogICAgcmV0dXJuICRwbHVnaW5zU3RhdHVzDQp9DQoNCmZ1bmN0aW9uIEdldC1Gb2xkZXJzIChbc3RyaW5nXSRQYXRoKSB7DQogICAgcmV0dXJuIEdldC1DaGlsZEl0ZW0gLVBhdGggJFBhdGggLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfA0KICAgICAgICAgICAgICAgV2hlcmUtT2JqZWN0IHsgJF8uUFNJc0NvbnRhaW5lciB9DQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1JbnN0YWxsZWRQbHVnaW5EYXRhIChbcHNvYmplY3RdJEZvbGRlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaGFzaHRhYmxlXSRQbHVnaW5zU3RhdHVzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtoYXNodGFibGVdJFBsdWdpbnNEYXRhKSB7DQogICAgJHZlcnNpb25Gb2xkZXIgPSBHZXQtRXh0ZW5zaW9uTGFzdFZlcnNpb25Gb2xkZXIgLUZvbGRlclBhdGggJEZvbGRlci5GdWxsTmFtZQ0KICAgIGlmICgkbnVsbCAtZXEgJHZlcnNpb25Gb2xkZXIpIHsgcmV0dXJuIH0NCg0KICAgICRwbHVnaW5OYW1lID0gR2V0LVBsdWdpbk5hbWUgLVZlcnNpb25QYXRoICR2ZXJzaW9uRm9sZGVyLkZ1bGxOYW1lDQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRwbHVnaW5OYW1lKSkgeyByZXR1cm4gfQ0KDQogICAgJHZlcnNpb24gPSBGb3JtYXQtUGx1Z2luVmVyc2lvbiAtVmVyc2lvbiAkdmVyc2lvbkZvbGRlci5QU0NoaWxkTmFtZQ0KICAgICRzdGF0dXMgPSBHZXQtUGx1Z2luU3RhdHVzIC1TdGF0ZSAkUGx1Z2luc1N0YXR1c1skRm9sZGVyLk5hbWVdDQoNCiAgICAkUGx1Z2luc0RhdGEuJHBsdWdpbk5hbWUgPSBAe1ZlcnNpb24gPSAkdmVyc2lvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzID0gJHN0YXR1c30NCn0NCg0KZnVuY3Rpb24gR2V0LUV4dGVuc2lvbkxhc3RWZXJzaW9uRm9sZGVyIChbc3RyaW5nXSRGb2xkZXJQYXRoKSB7DQogICAgcmV0dXJuIChHZXQtRm9sZGVycyAtUGF0aCAkRm9sZGVyUGF0aCB8IFNvcnQtT2JqZWN0IHwgU2VsZWN0LU9iamVjdCAtTGFzdCAxKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGx1Z2luTmFtZSAoW3N0cmluZ10kVmVyc2lvblBhdGgpIHsNCiAgICAkanNvbiA9IEdldC1Kc29uQ29udGVudCAtUGF0aCAiJFZlcnNpb25QYXRoXG1hbmlmZXN0Lmpzb24iDQoNCiAgICAkcGx1Z2luTmFtZSA9ICRqc29uLm5hbWUNCiAgICBpZiAoJHBsdWdpbk5hbWUgLW1hdGNoICRQTFVHSU5fTVNHX05BTUVfUkVHRVgpIHsNCiAgICAgICAgJGxhYmVsTmFtZSA9IEdldC1NYXRjaFZhbHVlRnJvbVJlZ2V4IC1JbnB1dFN0cmluZyAkcGx1Z2luTmFtZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUmVnZXggJFBMVUdJTl9NU0dfTkFNRV9SRUdFWA0KICAgICAgICAkcGx1Z2luTmFtZSA9IEdldC1QbHVnaW5OYW1lRnJvbUxvY2FsZSAtTG9jYWxlICRqc29uLmRlZmF1bHRfbG9jYWxlIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVZlcnNpb25QYXRoICRWZXJzaW9uUGF0aCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1MYWJlbE5hbWUgJGxhYmVsTmFtZQ0KICAgIH0NCg0KICAgIHJldHVybiAkcGx1Z2luTmFtZQ0KfQ0KDQpmdW5jdGlvbiBHZXQtTWF0Y2hWYWx1ZUZyb21SZWdleCAoW3N0cmluZ10kSW5wdXRTdHJpbmcsIFtzdHJpbmddJFJlZ2V4KSB7DQogICAgaWYgKCRJbnB1dFN0cmluZyAtbWF0Y2ggJFJlZ2V4KSB7DQogICAgICAgIHJldHVybiAkTWF0Y2hlc1skTWF0Y2hlcy5Db3VudCAtIDFdDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGx1Z2luTmFtZUZyb21Mb2NhbGUgKFtzdHJpbmddJExvY2FsZSwgW3N0cmluZ10kVmVyc2lvblBhdGgsIFtzdHJpbmddJExhYmVsTmFtZSkgew0KICAgICRqc29uID0gR2V0LUpzb25Db250ZW50IC1QYXRoICIkVmVyc2lvblBhdGhcX2xvY2FsZXNcJExvY2FsZVxtZXNzYWdlcy5qc29uIg0KICAgICRwbHVnaW5OYW1lID0gJGpzb24uJExhYmVsTmFtZS5tZXNzYWdlDQogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRwbHVnaW5OYW1lKSkgew0KICAgICAgICByZXR1cm4gJGpzb24uKCRMYWJlbE5hbWUuVG9Mb3dlcigpKS5tZXNzYWdlDQogICAgfQ0KDQogICAgcmV0dXJuICRwbHVnaW5OYW1lDQp9DQoNCmZ1bmN0aW9uIEZvcm1hdC1QbHVnaW5WZXJzaW9uIChbc3RyaW5nXSRWZXJzaW9uKSB7DQogICAgcmV0dXJuICRWZXJzaW9uLlNwbGl0KCdfJylbMF0NCn0NCg0KZnVuY3Rpb24gR2V0LVBsdWdpblN0YXR1cyAoW3N0cmluZ10kU3RhdGUpIHsNCiAgICBzd2l0Y2ggKCRTdGF0ZSkgew0KICAgICAgICAwIHsgcmV0dXJuICdEaXNhYmxlZCcgfQ0KICAgICAgICAxIHsgcmV0dXJuICdFbmFibGVkJyB9DQogICAgICAgIGRlZmF1bHQgeyByZXR1cm4gJ04vQScgfQ0KICAgIH0NCn0NCg0KIw0KIyBOZXh0aGluayBPdXRwdXQgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gVXBkYXRlLUVuZ2luZU91dHB1dFZhcmlhYmxlcyAoW2hhc2h0YWJsZV0kUGx1Z2luQ29tcGxpYW5jZURhdGEpIHsNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRCb29sKCdQbHVnaW5Db21wbGlhbmNlJywgJFBsdWdpbkNvbXBsaWFuY2VEYXRhLlBsdWdpbkNvbXBsaWFuY2UpDQoNCiAgICBbc3RyaW5nW11dJG1pc3NpbmdQbHVnaW5zT3V0cHV0ID0gRWRpdC1TdHJpbmdMaXN0UmVzdWx0IC1TdHJpbmdMaXN0ICRQbHVnaW5Db21wbGlhbmNlRGF0YS5NaXNzaW5nUGx1Z2lucw0KICAgIFtueHRdOjpXcml0ZU91dHB1dFN0cmluZ0xpc3QoJ01pc3NpbmdQbHVnaW5zJywgJG1pc3NpbmdQbHVnaW5zT3V0cHV0KQ0KDQogICAgW3N0cmluZ1tdXSRpbmNvcnJlY3RWZXJzaW9uUGx1Z2luc091dHB1dCA9IEVkaXQtU3RyaW5nTGlzdFJlc3VsdCAtU3RyaW5nTGlzdCAkUGx1Z2luQ29tcGxpYW5jZURhdGEuSW5jb3JyZWN0VmVyc2lvblBsdWdpbnMNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmdMaXN0KCdJbmNvcnJlY3RWZXJzaW9uUGx1Z2lucycsICRpbmNvcnJlY3RWZXJzaW9uUGx1Z2luc091dHB1dCkNCg0KICAgIFtzdHJpbmdbXV0kaW5jb3JyZWN0U3RhdHVzUGx1Z2luc091dHB1dCA9IEVkaXQtU3RyaW5nTGlzdFJlc3VsdCAtU3RyaW5nTGlzdCAkUGx1Z2luQ29tcGxpYW5jZURhdGEuSW5jb3JyZWN0U3RhdHVzUGx1Z2lucw0KICAgIFtueHRdOjpXcml0ZU91dHB1dFN0cmluZ0xpc3QoJ0luY29ycmVjdFN0YXR1c1BsdWdpbnMnLCAkaW5jb3JyZWN0U3RhdHVzUGx1Z2luc091dHB1dCkNCg0KICAgIFtzdHJpbmdbXV0kb3RoZXJQbHVnaW5zT3V0cHV0ID0gRWRpdC1TdHJpbmdMaXN0UmVzdWx0IC1TdHJpbmdMaXN0ICRQbHVnaW5Db21wbGlhbmNlRGF0YS5PdGhlclBsdWdpbnMNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmdMaXN0KCdPdGhlclBsdWdpbnMnLCAkb3RoZXJQbHVnaW5zT3V0cHV0KQ0KfQ0KDQojDQojIE1haW4gc2NyaXB0IGZsb3cNCiMNCltlbnZpcm9ubWVudF06OkV4aXQoKEludm9rZS1NYWluIC1JbnB1dFBhcmFtZXRlcnMgJE15SW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnMpKQ0KIyBTSUcgIyBCZWdpbiBzaWduYXR1cmUgYmxvY2sNCiMgTUlJaW1nWUpLb1pJaHZjTkFRY0NvSUlpaXpDQ0lvY0NBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1Qmdvcg0KIyBCZ0VFQVlJM0FnRUVvR3N3YVRBMEJnb3JCZ0VFQVlJM0FnRWVNQ1lDQXdFQUFBUVFIOHc3WUZsTENFNjNKTkxHDQojIEtYN3pVUUlCQUFJQkFBSUJBQUlCQUFJQkFEQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDQ3hFMUQxdStLeG5lVk4NCiMgbTRPb3ZJRmFhUlZJL3Q1bkh4TFk0UUFxZWJubDBhQ0NFVHN3Z2dQRk1JSUNyYUFEQWdFQ0FoQUNyRndtYWd0QQ0KIyBtNDhMZWZLdVJpVjNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hd3hDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLDQojIEV3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4S3pBcEJnTlYNCiMgQkFNVElrUnBaMmxEWlhKMElFaHBaMmdnUVhOemRYSmhibU5sSUVWV0lGSnZiM1FnUTBFd0hoY05NRFl4TVRFdw0KIyBNREF3TURBd1doY05NekV4TVRFd01EQXdNREF3V2pCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NDQojIFJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUUQNCiMgRXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUlJQklqQU5CZ2txaGtpRw0KIyA5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHN6bGMrYjcxTHZsTFMweXB0L2xnVC9KelNWSnRuRXF3OVdVDQojIE5HZWlDaHl3WDJtbVFMSEV0N0tQMEppa3FVRlpPdFBjbE5ZODIzUTRwRXJNVFNXQzkwcWxVeEk0N3ZOSmJYR1INCiMgZm1PMnE2WmZ3NlNFK0U5aVViNzR4ZXpiT0pMakJ1VUlrUXpFS0VGVis4dGFpUlYrY2VnMXYwMXlDVDIrT2poUQ0KIyBXM2N4RzQyenh5UkZtcWVzYlFBVVdnUzN1aFByVVFxWVFVRWlUbVZoaDRGQlVLWjVYSW5lR1VwWDFTN21YUnhUDQojIExINll6Um9HRnFSb2M5QTBCQk5jb1hIVFdueFYyMTVrNFRlSE1GWUU1UkcwS1lBUzhYazVpS0lDRVh3blpyZUkNCiMgdDNqeXlncW9PS3NLWk1LL1psMlZoTUdoSlI2SFhScFFDeUFTekVHN2JndFJPTGhMeXdJREFRQUJvMk13WVRBTw0KIyBCZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXNUN0RhUVA0DQojIHYwY0IxSmdtR2dnQzcyTmtLOE13SHdZRFZSMGpCQmd3Rm9BVXNUN0RhUVA0djBjQjFKZ21HZ2dDNzJOa0s4TXcNCiMgRFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUJ3YUJwZmMxNXlmUElobUJnaFhJZHNoUi9ncVo2cS9HREoyUUJCWA0KIyB3WXJ6ZXRrUlpZNDErcDc4UmJXZTJVd3hTN2lSNkVNc2pyTjR6dHZqVTNseDF1VWhsQUhhVlllYUpHVDJpbWJNDQojIDNwdzN6YWcwc1dtYkk4aWVlQ0lyY0VQalZVY3hZUm52V01XRkwwNHc5cUF4RmlQSTUrSmxGalBMdnhvYm9EMzQNCiMgeWw2TE1ZdGdDSWt0REFaY1VyZkUrUXFZMFJWZm54SytmRFpqT0wxRXBIL2tKaXNLeEpkcERlbU00c0FRVjdqSQ0KIyBkaEtSVmZKSWFkaThLZ0piRDBUVUlESGI5THB3SmwyUVlKNjhTeGNKTDdUTEhrTm95UWNud2RKYzkrb2h1V2dTDQojIG5EeWN2NTc4Z0Z5Ylk4M3NSNm9sSjJlZ04vTUFnbjFVMTZuNDZTNFRvM2ZvSDBvd2dnYXVNSUlGbHFBREFnRUMNCiMgQWhBS0dnMGJjbytVdUxkd0ZDQjhLZ3JFTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3d4Q3pBSkJnTlZCQVlUQWxWVA0KIyBNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqDQojIGIyMHhLekFwQmdOVkJBTVRJa1JwWjJsRFpYSjBJRVZXSUVOdlpHVWdVMmxuYm1sdVp5QkRRU0FvVTBoQk1pa3cNCiMgSGhjTk1qQXdPREUzTURBd01EQXdXaGNOTWpNd09ESXlNVEl3TURBd1dqQ0J3REVUTUJFR0N5c0dBUVFCZ2pjOA0KIyBBZ0VERXdKRFNERVZNQk1HQ3lzR0FRUUJnamM4QWdFQ0V3UldZWFZrTVIwd0d3WURWUVFQREJSUWNtbDJZWFJsDQojIElFOXlaMkZ1YVhwaGRHbHZiakVZTUJZR0ExVUVCUk1QUTBoRkxURXhNaTR3TURBdU5UYzVNUXN3Q1FZRFZRUUcNCiMgRXdKRFNERVBNQTBHQTFVRUJ4TUdVSEpwYkd4NU1SWXdGQVlEVlFRS0V3MU9SVmhVYUdsdWF5QlRMa0V1TVFzdw0KIyBDUVlEVlFRTEV3SlNSREVXTUJRR0ExVUVBeE1OVGtWWVZHaHBibXNnVXk1QkxqQ0NBaUl3RFFZSktvWklodmNODQojIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTWJyOGs1QjRVVDdFOSs2U2tvYTNJaHk4djZ2U0hXYTVUZnB0UG4NCiMgQjFKUTdCZ3N3NkVEQ0kvSHJJbGNSUkYrZmVYR1lQWWFrSjVuZzFja00yMnUvRnRBbXJsaGI1VkxGT2VNaXViLw0KIyBSNWNQUTZJaGpkQ25UaVZQckJiWWV2Q215SE9UZHFjNzRHRnlnQksrZy9aTFpxT1dKRGtod1ZpbVROVFAxUk8vDQojIEJlYzNKSTNycjBDdUlxcUd2Q3QvVHVjUHN6Vnl1S1JWaXc1Z3ZNa2F3UXZmd1Q4TW1MZkZrcjk4bHQ0QmxUWkcNCiMgU2tvUHVtRVMrYkpkV01UdGRUZlpJaytLUXY2MG9XbXNXbEkvTHhlK20xcUluQ0VETEZuU3NRSU4rSEdrYWJXNQ0KIyBVaUVKNmJEalpDSUI1UGhRWGp2MFdYTFRHWnFUY2JCZUJMSUFuMDZMOVRJSDZvQ0c4N1FsclhkeXNPRGNhcWlRDQojIFNrQUo3YlhRc2NmV3NSSFdQclJ6VTM2QTJtT3hES0VSR3hIM2lQRHhmVjlOQUViOGhkRlRmeEpSTWEraEVBcXQNCiMgNnF4NFB1VVpidTdtOFRyaCtmSEtvNVM5YndYa1ltaTBURE9OcFlFUW1iNytsZWZjSHFMTmFJZ3BmZEs1aC8wVg0KIyBsVWxwRHdsTkdYTWZFMmFCaE5SNkw1Tzk5cjExWTJxSkExT21NQmNQTm9ZN2xqWG1kTUh1MVY5L0RFMEpLNE9ZDQojIFZ4Ym5VVk1xVGYzL1ZnWnhHZWNZTU1mYW1qdjQyc1BGdk1kYUNqOEMzTjRjMGQ0c1dPbHRKa2pDbWk1Zkt3OXkNCiMgVUdMelV6V09meDl5MGFUUW45U2QveTY4Y0JQL0psLzFrd3MzeFA0T3Jzemw1dkFGZW5UUXd0T0hMZ3NvazBFRg0KIyBGdWFMQWdNQkFBR2pnZ0gxTUlJQjhUQWZCZ05WSFNNRUdEQVdnQlNQNkg3d2JUSnFBQVVqeDNDWGFqcVEvMnZxDQojIDFEQWRCZ05WSFE0RUZnUVVVbHVvelBDSW9ZQnl1RDRkVkJjQ2xidzQ2Mzh3TWdZRFZSMFJCQ3N3S2FBbkJnZ3INCiMgQmdFRkJRY0lBNkFiTUJrTUYwTklMVlpCVlVRdFEwaEZMVEV4TWk0d01EQXVOVGM1TUE0R0ExVWREd0VCL3dRRQ0KIyBBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QjdCZ05WSFI4RWREQnlNRGVnTmFBemhqRm9kSFJ3DQojIE9pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXRaekV1WTNKc01EZWcNCiMgTmFBemhqRm9kSFJ3T2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdA0KIyBaekV1WTNKc01Fc0dBMVVkSUFSRU1FSXdOd1lKWUlaSUFZYjliQU1DTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwDQojIGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNd0J3WUZaNEVNQVFNd2ZnWUlLd1lCQlFVSEFRRUUNCiMgY2pCd01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdTQVlJS3dZQg0KIyBCUVVITUFLR1BHaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFVldRMjlrDQojIFpWTnBaMjVwYm1kRFFTMVRTRUV5TG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVk2SUI0UG5OY3poZGVtVlZpZHRUOFhUMFArL0VqOWJiYU1JbVI2SEVMVGNZWDE5Z2prc0ZOVXJSNg0KIyAvWFVQZ2FqL25TcGxyNU9qM0RKNUpDUG8yQVZLd1kxbVVXUzJ1WW9aUmluRUFvZERmRVNxZlRpUjE5ODJ4cDcyDQojIGdvMzQ3R1RNbnBwazJFcGR1SWlvaStkY3diYncxRGYybkZ6STNGY1g3SDFVSVBkOE00cDNVQXQ1V0NpVk1QSFcNCiMgWHhyUXQ1bjhqeGdMY3Vzdk9SWFpxWk9zZFRsN0hacHNWSG5HVVk3ODdPdTBJSnh1RnNpVU02NGJLR3p2TnFxdA0KIyBZeUZ5Ujk5RXJDVHFkWjY2dXJhRmlsQWdqUHdhTEZ6SlV3NithSy93V3hLQjdRMHBpSUNwZVgxWDBJTFp1NTZHDQojIFIyMDZWRWNteFdJTFlqUUUyTlpjVCs3dmJVem1NSUlHdkRDQ0JhU2dBd0lCQWdJUUEvRzA0Vjg2Z3ZFVWxuaXoNCiMgMTloSFhEQU5CZ2txaGtpRzl3MEJBUXNGQURCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbg0KIyBhVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUURFeUpFDQojIGFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERURXlNRFF4T0RFeU1EQXcNCiMgTUZvWERUSTNNRFF4T0RFeU1EQXdNRm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuDQojIGFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXlLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUINCiMgQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2RUK2creXRSUHhaTStFZ1B5dWdEWFJ0dGZIb3l5c0dpeXM4WVNzT2pVUw0KIyBPcEtSdWxma3hNbnpMNmhJUExmV2J0eVhJcnBSZVdHdlF5OE50NXUwU1RHdVJGZytwS0dXcDRkUEkzN0RiR1VrDQojIGtGVStvY29qZk1WQzZjUjZZa1diZmQ1amRNdWVZeVg0aEpxYXJVVlBybjBmeUJQTGRadko0ZUdLK0FzTW1QVEsNCiMgUHRCRnFub2VwVmlUTmpTK0t5NHJNVmhtdERJUW41M3dVcUh2NkQ3VGR2SkFXdHo2YWowYlM2MTJzSXhjN2phNg0KIyBnK293cUV6ZThRc3FXRUdJcmdDSnF3UFJGb0lnSW5iclhsUTRFbUxoMG5BazIrMGZjTkprQ1lBdDRyYWR6aC95DQojIHV5SHpiTnZZc3hsN2lsQ2Y3K3cyQ2x5YXQwclRDS0E1ZWYzZHZ6MDZDU1VDQXdFQUFhT0NBMWd3Z2dOVU1CSUcNCiMgQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZEpRUU1NQW9HQ0NzRw0KIyBBUVVGQndNRE1IOEdDQ3NHQVFVRkJ3RUJCSE13Y1RBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1DQojIFpHbG5hV05sY25RdVkyOXRNRWtHQ0NzR0FRVUZCekFDaGoxb2RIUndPaTh2WTJGalpYSjBjeTVrYVdkcFkyVnkNCiMgZEM1amIyMHZSR2xuYVVObGNuUklhV2RvUVhOemRYSmhibU5sUlZaU2IyOTBRMEV1WTNKME1JR1BCZ05WSFI4RQ0KIyBnWWN3Z1lRd1FLQStvRHlHT21oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwDQojIFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXcwTG1ScFoybGoNCiMgWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dnZ0hFQmdOVg0KIyBIU0FFZ2dHN01JSUJ0ekNDQWJNR0NXQ0dTQUdHL1d3REFqQ0NBYVF3T2dZSUt3WUJCUVVIQWdFV0xtaDBkSEE2DQojIEx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwzTnpiQzFqY0hNdGNtVndiM05wZEc5eWVTNW9kRzB3Z2dGa0JnZ3INCiMgQmdFRkJRY0NBakNDQVZZZWdnRlNBRUVBYmdCNUFDQUFkUUJ6QUdVQUlBQnZBR1lBSUFCMEFHZ0FhUUJ6QUNBQQ0KIyBRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFkQUJsQUNBQVl3QnZBRzRBY3dCMEFHa0FkQUIxQUhRQVpRQnpBQ0FBDQojIFlRQmpBR01BWlFCd0FIUUFZUUJ1QUdNQVpRQWdBRzhBWmdBZ0FIUUFhQUJsQUNBQVJBQnBBR2NBYVFCREFHVUENCiMgY2dCMEFDQUFRd0JRQUM4QVF3QlFBRk1BSUFCaEFHNEFaQUFnQUhRQWFBQmxBQ0FBVWdCbEFHd0FlUUJwQUc0QQ0KIyBad0FnQUZBQVlRQnlBSFFBZVFBZ0FFRUFad0J5QUdVQVpRQnRBR1VBYmdCMEFDQUFkd0JvQUdrQVl3Qm9BQ0FBDQojIGJBQnBBRzBBYVFCMEFDQUFiQUJwQUdFQVlnQnBBR3dBYVFCMEFIa0FJQUJoQUc0QVpBQWdBR0VBY2dCbEFDQUENCiMgYVFCdUFHTUFid0J5QUhBQWJ3QnlBR0VBZEFCbEFHUUFJQUJvQUdVQWNnQmxBR2tBYmdBZ0FHSUFlUUFnQUhJQQ0KIyBaUUJtQUdVQWNnQmxBRzRBWXdCbEFDNHdIUVlEVlIwT0JCWUVGSS9vZnZCdE1tb0FCU1BIY0pkcU9wRC9hK3JVDQojIE1COEdBMVVkSXdRWU1CYUFGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVpNMG9NZ1RNMzI2MDJ5ZVRKT3J1MUd5NTZvdUwwUTBJWG5yOU9vVTNoc2R2cGdkMmZBZkxraU5YcA0KIyAvZ245SWNIc1hZRFM4TmJCUThMK2R5dmIrZGVSTTg1czFiSVpPK1l1MXNtVFQ0aEFqczNoOVg3eEQ4WlpWbkxvDQojIDYycEJ2UnpWUnRWOFNjcG1PQlhCditDUmNIZUgzTW1OTWNrTUthSXo3WTNpaDgySmpUOGIvOVhnR3BlTGZOcHQNCiMgKzZqR3NqcG1hM3NCczgzWXBqVHNFZ0dybFZpbHhGTlhxR0RtNXdJU29Ma2paS0pOdTN5QkpXUWh2cy91UWhoRA0KIyBsN3VsTndhdlRmOG1wVTFoUyt4R1FiaGx6cmg1bmdpV0M0R01panVQeDVtTW95cHVtRzFlWWNhV3Q0cTVZUzJUDQojIHVPc09CRVBYOWY2bThHTFVtV3Fsd2NId1pKU0FNWUlRdFRDQ0VMRUNBUUV3Z1lBd2JERUxNQWtHQTFVRUJoTUMNCiMgVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMA0KIyBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5DQojIEtRSVFDaG9ORzNLUGxMaTNjQlFnZkNvS3hEQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQmhEQVlCZ29yQmdFRUFZSTMNCiMgQWdFTU1Rb3dDS0FDZ0FDaEFvQUFNQmtHQ1NxR1NJYjNEUUVKQXpFTUJnb3JCZ0VFQVlJM0FnRUVNQndHQ2lzRw0KIyBBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNEbXpZYm5kZWI0DQojIGhhWFk1QllKMkZBU3M1T0NVU3R6b3VQY0xQY09mTVRYU0RBTkJna3Foa2lHOXcwQkFRRUZBQVNDQWdBTytsaG0NCiMgZlk5aVBrb1p6VG5UaTFuMWlmSExjdDloRjlPbnIvdWZrOHpnNSsyNGxyMnE0UE5rdzB4MVZ1emF5WG80VDkwVA0KIyAzOUl2TW5YOEFzb2VJMktRazFkbjIxbk5yUVIvVysvNXNoL09vZ1hNMFFzRVFjclZldFc2U1hvRzZQSnN4SURODQojIGpXc0Nyb1JOSktPSWlwZHVxWTJqM09DK3VCQTN4bmk2bnBvMzluQjIzaXNyMGtkSUpzWXFteC9FWjVjRk02cXMNCiMgQnZxV1hzTzZyUFduN0FoM2NManRKRTRCcHBlK3g1SFhMMVI1VWZRZUI5TnlvZWdyZVRzSGMrMXN3Y25ibm02UA0KIyBYcTUzL0JxWXErdlplZmNZbFBETWJFRy9jNmtnUXYxR3VzMHNzUnZKMjFDaDM2Q25sSnVFdktyWXhuSjBxMDc2DQojIHIwS003bG5PUUIzQWh5ekEwMGg2cWg5V0FtZU1sQ1NwUEZXaG9DWnJ4am9uRUlqd0RwbEk0MGllSlhsSWFxWm0NCiMgTXc3WGVZeFlTMWk4c1BTaUtucTZNd1FXMjd0cS9LbFRvc2Z3c2JsZzBuZ0dGNHlSSlJZbE1FMHRHN1cvYWhWYg0KIyBJSnFZc1lFZS8zWXVjSG9vbVdnYndOUFZ3S1F5czJyaHVVMjZSaFR1VkcwNnRYaW9xSzVmWURnVlBVZGtza3k4DQojIHhrdDR0eFJtUlN0TFZrNFZMb24rNXE2bEJKOWNDNzJlM2pCSnZzcjd2T29leFdSU3JtQkY2bGVidVhwTXRIWGENCiMgemdUcm4rQzJrS1NvNXRySnlIRXZ2ZEI3OGx1UlMxNUlXSXRkNGdkTVROK2FuVE1VM3dDRjRqRW1UWmRZVk5yTA0KIyBHZEI1QVBNRmwrYlJEY1E2QWF4M0oxVENmMjA0NVZ2a3k0WVJFYUdDRFg0d2dnMTZCZ29yQmdFRUFZSTNBd01CDQojIE1ZSU5hakNDRFdZR0NTcUdTSWIzRFFFSEFxQ0NEVmN3Z2cxVEFnRURNUTh3RFFZSllJWklBV1VEQkFJQkJRQXcNCiMgZUFZTEtvWklodmNOQVFrUUFRU2dhUVJuTUdVQ0FRRUdDV0NHU0FHRy9Xd0hBVEF4TUEwR0NXQ0dTQUZsQXdRQw0KIyBBUVVBQkNBU0dOTTBIcFhFZktSY0czWVY0YWZVRytYMCtxdGVWRE43ZVBtRXRLMm1pZ0lSQU1uY2xOdTkxUDBpDQojIHhBS0JhU01zTldnWUR6SXdNakV3T1RJek1UTXlNVEkwV3FDQ0NqY3dnZ1QrTUlJRDVxQURBZ0VDQWhBTlFrcmcNCiMgdmpxSS8yQkFJYzRVQVBEZE1BMEdDU3FHU0liM0RRRUJDd1VBTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRA0KIyBWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhNVEF2DQojIEJnTlZCQU1US0VScFoybERaWEowSUZOSVFUSWdRWE56ZFhKbFpDQkpSQ0JVYVcxbGMzUmhiWEJwYm1jZ1EwRXcNCiMgSGhjTk1qRXdNVEF4TURBd01EQXdXaGNOTXpFd01UQTJNREF3TURBd1dqQklNUXN3Q1FZRFZRUUdFd0pWVXpFWA0KIyBNQlVHQTFVRUNoTU9SR2xuYVVObGNuUXNJRWx1WXk0eElEQWVCZ05WQkFNVEYwUnBaMmxEWlhKMElGUnBiV1Z6DQojIGRHRnRjQ0F5TURJeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd3VaaGhHZkYNCiMgaXZVTkNLUkZ5bU5yVWRjNkVVSzlDblYxVFpTMERGQzFKaEQrSGNodmtXc01sdWNhWEVqdlJPVy9tMkhORlpGaQ0KIyBXcmovWnd1Y1kvMDJhb0g2S2ZqZEszQ0YzZ0lZODNodHZIMzV4MjBKUGI1cWRvZnBpcjM0aEYwZWRzbmt4bloyDQojIE9sUFIwZE5hTm8vR28rRXZHenEzWWRaejdFNXRNNHA4WFVVdFM3RlE1a0U2TjFhRzNKTWpqZmRRSmVoazV0M1QNCiMgank5WHRZY2c2dzZPTE5VajJ2Uk5lRWJqQTRNeEtVcGNEREdLU295SXhmY3dXdmtVcnhWZmJFTkpDZjBtSTFQMg0KIyBqV1BvR3F0YnNSMHd3cHRwZ3JUYi9GWlV2QitoaDZ1K2Vsc0tJQzlMQ2NtVnA0MnkrdFpqaTA2bGNoenVuM29CDQojIGMvZ1oxdjROU1lTOUFRSURBUUFCbzRJQnVEQ0NBYlF3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUINCiMgL3dRQ01BQXdGZ1lEVlIwbEFRSC9CQXd3Q2dZSUt3WUJCUVVIQXdnd1FRWURWUjBnQkRvd09EQTJCZ2xnaGtnQg0KIyBodjFzQndFd0tUQW5CZ2dyQmdFRkJRY0NBUlliYUhSMGNEb3ZMM2QzZHk1a2FXZHBZMlZ5ZEM1amIyMHZRMUJUDQojIE1COEdBMVVkSXdRWU1CYUFGUFMyNFNBZC9pbXUwdVJocGJLaUpiTElGelZ1TUIwR0ExVWREZ1FXQkJRMlJJYU8NCiMgcExxd1pyNjhLQzBkUkRiZDQycDZ2REJ4QmdOVkhSOEVhakJvTURLZ01LQXVoaXhvZEhSd09pOHZZM0pzTXk1aw0KIyBhV2RwWTJWeWRDNWpiMjB2YzJoaE1pMWhjM04xY21Wa0xYUnpMbU55YkRBeW9EQ2dMb1lzYUhSMGNEb3ZMMk55DQojIGJEUXVaR2xuYVdObGNuUXVZMjl0TDNOb1lUSXRZWE56ZFhKbFpDMTBjeTVqY213d2dZVUdDQ3NHQVFVRkJ3RUINCiMgQkhrd2R6QWtCZ2dyQmdFRkJRY3dBWVlZYUhSMGNEb3ZMMjlqYzNBdVpHbG5hV05sY25RdVkyOXRNRThHQ0NzRw0KIyBBUVVGQnpBQ2hrTm9kSFJ3T2k4dlkyRmpaWEowY3k1a2FXZHBZMlZ5ZEM1amIyMHZSR2xuYVVObGNuUlRTRUV5DQojIFFYTnpkWEpsWkVsRVZHbHRaWE4wWVcxd2FXNW5RMEV1WTNKME1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQkkNCiMgSE55MTZab2p2T2NhNXlBT2ptZEcvVUp5VVhRS0kwZWpxNUxTSmNSd1diNFVvT1VuZ2FWTkZCVVpCM253MFFURA0KIyBodGs3dmY1RUFtWk43V21rRC9hNGNNOWk2UFZSU25oNU5ub250L1BuVXArVHArMURubnZudE4xQklvbjdoNkpHDQojIEEwNzg5UDYzWkhkalh5TlNhWU9DK2hwVDdaRE1qYUVYY3czMDgyVTVjRXZ6bk5aNmU5b012RDB5MEJ2TDlXSDgNCiMgZFFnQWRyeUJEdmpBNFZ6UHhCRnk1eHRrU2RnaW1uVVZRdlV0TWppQjJ2UmdvcnEwVXZ0YzRHRWtKVSt5MzhrcA0KIyBxSE5EVWRxOVk5WWZXNXYzTGh0UEV4MzNTZzF4ZnBlMzlEK0U2OEhqbzBtaCtzNm52MWJQdWxsMllZbGZmcWUwDQojIGptZDQrVGFZNGNzbzJsdUhwb292TUlJRk1UQ0NCQm1nQXdJQkFnSVFDcUVsMXRZeUczNUI1QVhhTnBmQ0ZUQU4NCiMgQmdrcWhraUc5dzBCQVFzRkFEQmxNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZw0KIyBTVzVqTVJrd0Z3WURWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVNRd0lnWURWUVFERXh0RWFXZHBRMlZ5DQojIGRDQkJjM04xY21Wa0lFbEVJRkp2YjNRZ1EwRXdIaGNOTVRZd01UQTNNVEl3TURBd1doY05NekV3TVRBM01USXcNCiMgTURBd1dqQnlNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRA0KIyBWUVFMRXhCM2QzY3VaR2xuYVdObGNuUXVZMjl0TVRFd0x3WURWUVFERXloRWFXZHBRMlZ5ZENCVFNFRXlJRUZ6DQojIGMzVnlaV1FnU1VRZ1ZHbHRaWE4wWVcxd2FXNW5JRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEENCiMgTUlJQkNnS0NBUUVBdmRBeTdrdk5qMy9kcWJxQ21jVTVWQ2hYdGlOS3hBNEhSVE5SRUgzUStYMU5hSDdudHFEMA0KIyBqYk9JNUplL1l5R1FtTDhUdkZmVHcrRitDTlpxRkFBNDl5NGVPKzdNcHZZeVdmNWZaVC9nbSt2alJrY0dHbFYrDQojIEN5ZCt3S0wxb09EZUlqOE8vMzZWKy9PanVpSStHS3dSNVBDWkEyMDdoWHdKMCs1ZHlKb0xWT09vQ1hGcjRNOGkNCiMgRUE5MXozRnlUZ3F0MzBBNlhMZFI0YUY1Rk1aTkpDTXdYYnpzUEdCcXJDOEh6UDN3NmtmWmlGQmUvV1p1Vm1Fbg0KIyBLWW1FVWVhQzUwWlEvWlFxTEtma2RUNjZtQStFZjU4eEZOYXQxZkpreTNzZUJkQ0VHWElYOFJjRzd6M04xazN2DQojIEJrTDlvbE1xVDRVZHhCMDhyOC9hckJEMTNheXM2VmIva3dJREFRQUJvNElCempDQ0Fjb3dIUVlEVlIwT0JCWUUNCiMgRlBTMjRTQWQvaW11MHVSaHBiS2lKYkxJRnpWdU1COEdBMVVkSXdRWU1CYUFGRVhyb3EvMGtzdUNNUzFSaTZlbg0KIyBJWjN6YmNnUE1CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdEZ1lEVlIwUEFRSC9CQVFEQWdHR01CTUdBMVVkDQojIEpRUU1NQW9HQ0NzR0FRVUZCd01JTUhrR0NDc0dBUVVGQndFQkJHMHdhekFrQmdnckJnRUZCUWN3QVlZWWFIUjANCiMgY0RvdkwyOWpjM0F1WkdsbmFXTmxjblF1WTI5dE1FTUdDQ3NHQVFVRkJ6QUNoamRvZEhSd09pOHZZMkZqWlhKMA0KIyBjeTVrYVdkcFkyVnlkQzVqYjIwdlJHbG5hVU5sY25SQmMzTjFjbVZrU1VSU2IyOTBRMEV1WTNKME1JR0JCZ05WDQojIEhSOEVlakI0TURxZ09LQTJoalJvZEhSd09pOHZZM0pzTkM1a2FXZHBZMlZ5ZEM1amIyMHZSR2xuYVVObGNuUkINCiMgYzNOMWNtVmtTVVJTYjI5MFEwRXVZM0pzTURxZ09LQTJoalJvZEhSd09pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1ag0KIyBiMjB2UkdsbmFVTmxjblJCYzNOMWNtVmtTVVJTYjI5MFEwRXVZM0pzTUZBR0ExVWRJQVJKTUVjd09BWUtZSVpJDQojIEFZYjliQUFDQkRBcU1DZ0dDQ3NHQVFVRkJ3SUJGaHhvZEhSd2N6b3ZMM2QzZHk1a2FXZHBZMlZ5ZEM1amIyMHYNCiMgUTFCVE1Bc0dDV0NHU0FHRy9Xd0hBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBY1pVUzZWR0hWbW5ONzkzYQ0KIyBmS3BqZXJONHp3WTNRSVR2UzRTL3lzOERBdjNGcDhNT0lFSXNyM2Z6S3g4TUlWb3F0d1UwSFdxdW1mZ25vbWEvDQojIENhcGczM2FrT3BNUCtMTFIySHdaWXVoZWdpVWV4TG9jZXl3aDR0WmJMQlExUXdSb3N0dDFBdUJ5eDVqV1BHVGwNCiMgSDBnUUdGK0pPR0ZOWWtZa2gyT01rVklzcnltSjVYZ2YxZ3NVcFlEWEVrZHdzM1hWazRXVGZyYVNaL3RUWVltbw0KIyA5V3VXd1BSWWFRMTh5QUd4dVNoMXQ1bGpoU0tNWWNwNWxINVovSXdQNDIrMUFTYTJiS1h1aDFFaDVGaGdtN29NDQojIExTdHRvc1IrdThRbEswY0NDSHhKcmhPMjRYeENRaWpHR0ZiUFFUUzJabDIyZEh2MVZqTWlMeUkyc2t1aVNwWFkNCiMgOWFhT1VqR0NBb1l3Z2dLQ0FnRUJNSUdHTUhJeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcA0KIyBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5ZEM1amIyMHhNVEF2QmdOVkJBTVRLRVJwDQojIFoybERaWEowSUZOSVFUSWdRWE56ZFhKbFpDQkpSQ0JVYVcxbGMzUmhiWEJwYm1jZ1EwRUNFQTFDU3VDK09vai8NCiMgWUVBaHpoUUE4TjB3RFFZSllJWklBV1VEQkFJQkJRQ2dnZEV3R2dZSktvWklodmNOQVFrRE1RMEdDeXFHU0liMw0KIyBEUUVKRUFFRU1Cd0dDU3FHU0liM0RRRUpCVEVQRncweU1UQTVNak14TXpJeE1qUmFNQ3NHQ3lxR1NJYjNEUUVKDQojIEVBSU1NUnd3R2pBWU1CWUVGT0hYZ3FqaGtiN3ZhOG9Xa2JXcXRKU21KSnZ6TUM4R0NTcUdTSWIzRFFFSkJERWkNCiMgQkNBN21FR3lBS0RSNzc3THVscG1wcGlSdHJXVVVqUVRUV3FSbEtZbmxWWWwrVEEzQmdzcWhraUc5dzBCQ1JBQw0KIyBMekVvTUNZd0pEQWlCQ0N6RUpBR3ZBclpnd2VSVnluZ1JBTkJYSVBqS1N0aFR5YVdUSTAxY2V6MXFUQU5CZ2txDQojIGhraUc5dzBCQVFFRkFBU0NBUUNncjVnMjE3b1BRUjhXZ3owYzg5cVR5TzlKM3paaWxFSVlmelQ0SUVucUc3QWwNCiMgeGw1S0JlZXNBM0xTeWEzUlVlSGNsakFqSkxMTzNnSXpoMnFhbkVJOEZOMytQODBCS3lGMXN0dzJPZER2Z3pOcQ0KIyBocGJ6WGx5c211SHBGYmZIYnl5WTFmNExRUHpzRmtteFlEREIzbUlZRzYvMzdhS2p1em1DWlpqMk5CVWRpTU5vDQojIFNqSGFKeUUyeUJCNE9TSzdPZThDNFhxUjRvd0tzT1pDL1FEMVhMMU5JQU4vMW1WUTh1L3ErMmRoQ0xVUnhpblENCiMgTG5LeUR4Z09wOGJ4T3M1ek9BTkZROG44TjQ0STZQMkdxYXozR3ExeG4zV3U5cE5idXVDTWJpZ2VPQjJnU01sWg0KIyAzQ3Z4M2pOcXpaQmlTemhsT3JGaUNNVXFhNXJHUEwvM29peGJlcFFlDQojIFNJRyAjIEVuZCBzaWduYXR1cmUgYmxvY2sNCg=="}}}