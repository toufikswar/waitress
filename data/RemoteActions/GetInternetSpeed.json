{"id": "Get_Internet_Speed_windows", "name": "Get Internet Speed", "description": "Obtains the download speed and round trip time of the device as well as the Internet service provider and public IP address.\nWARNING - This Remote Action can have a significant impact on your network infrastructure!\nPlease read the further information below for more details.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading the network. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["600"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "The Internet download speed the device currently has", "id": "DownloadSpeed", "name": "DownloadSpeed", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "The time that a message takes to go and return from the closest server", "id": "RoundTripTime", "name": "RoundTripTime", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the Internet service provider", "id": "ISPName", "name": "ISPName", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Public IP address of the device", "id": "PublicIPAddress", "name": "PublicIPAddress", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-InternetSpeed.ps1", "script": ""}}}