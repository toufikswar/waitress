{"id": "Read_Mini_Dump_windows", "name": "Read Mini Dump", "description": "Reads most recent Windows Minidump file using application BlueScreenView, provided by NirSoft. Assists with quick investigation of the possible system crash root cause, which often can be faulty driver.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Absolute path to the BlueScreenView application provided by NirSoft", "id": "BlueScreenViewPath", "name": "BlueScreenViewPath", "options": ["C:\\Program Files (x86)\\NirSoft\\BlueScreenView\\BlueScreenView.exe"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "If a Minidump was detected and analysed to get system crash info. Possible values are [True/False]", "id": "MiniDumpDetected", "name": "MiniDumpDetected", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Path of an analysed Minidump file", "id": "MiniDumpFilePath", "name": "MiniDumpFilePath", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date when the system last crashed", "id": "LastSystemCrashDate", "name": "LastSystemCrashDate", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "The driver name, which most likely could have caused the crash", "id": "ProbablyCausedByDriver", "name": "ProbablyCausedByDriver", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "The address in memory where the crash occurred", "id": "CrashAddress", "name": "CrashAddress", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the crash code, which can be searched on Internet for further details", "id": "BugCheckName", "name": "BugCheckName", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Code of the crash, which can be searched on Internet for further details", "id": "BugCheckCode", "name": "BugCheckCode", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Read-MiniDump.ps1", "script": ""}}}