{"id": "Get_Virtual_Apps_Session_Response_Time_windows", "name": "Get Virtual Apps Session Response Time", "description": "Retrieves user experience statistics from the current Citrix Virtual Applications sessions and categorize them as good, acceptable or degraded according to their response time.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum value in milliseconds below which round-trip time user experience is considered as good. Provide number of milliseconds lower than 10000", "id": "GoodThreshold", "name": "GoodThreshold", "options": ["150"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum value in milliseconds below which round-trip time user experience is considered as acceptable. Provide number of milliseconds lower than 10000 and greater than GoodThreshold", "id": "AcceptableThreshold", "name": "AcceptableThreshold", "options": ["300"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of IPv4 subnets to define a connection like internal. They must be listed in [https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing CIDR notation]", "id": "InternalSubnetsList", "name": "InternalSubnetsList", "options": ["192.168.1.0/24"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of IPv4 subnets to define a connection like VPN. They must be listed in [https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing CIDR notation]", "id": "VPNSubnetsList", "name": "VPNSubnetsList", "options": ["192.168.1.0/24"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Total count of user sessions with round-trip time below the GoodThreshold value", "id": "GoodUserExperienceSessions", "name": "GoodUserExperienceSessions", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total count of user sessions with round-trip time between GoodThreshold and AcceptableThreshold values", "id": "AcceptableUserExperienceSessions", "name": "AcceptableUserExperienceSessions", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total count of user sessions with round-trip time exceeding the AcceptableThreshold value", "id": "DegradedUserExperienceSessions", "name": "DegradedUserExperienceSessions", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Ratio of degraded user sessions vs all user sessions", "id": "DegradedUserExperienceSessionsRatio", "name": "DegradedUserExperienceSessionsRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of properties of degraded user experience sessions, separated by colon. Each list item will describe separate user session. The expected output format is CSV", "id": "DegradedSessionsDetails", "name": "DegradedSessionsDetails", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Ratio of degraded user sessions when the connection type is External (not internal nor VPN)", "id": "DegradedUserExperienceExternalSessionsRatio", "name": "DegradedUserExperienceExternalSessionsRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Ratio of degraded user sessions when the connection type is VPN", "id": "DegradedUserExperienceVPNSessionsRatio", "name": "DegradedUserExperienceVPNSessionsRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-XenAppSessionResponseTime.ps1", "script": ""}}}