{"id": "Get_Startup_Impact_windows", "name": "Get Startup Impact", "description": ". Retrieves information of application impact on login process of last logged in user.  Result data is similar to the information in the Startup tab in Windows Task Manager, enhanced by detailed impact of each application. \n\nAn issue related to Startup Impact measure was fixed by Microsoft in this [https://support. microsoft. com/en-us/topic/february-15-2022-kb5010415-os-builds-19042-1566-19043-1566-and-19044-1566-preview-5a644b82-83f4-4cc2-a0e7-85f643252386 KB]", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Parameter is used to remove all processes matching provided name(s) from output. Multiple entries are separated by comma. Does not accept illegal characters. For more information see this [https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file article]", "id": "ApplicationsToExclude", "name": "ApplicationsToExclude", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "User SID (Security Identifier) to whom the XML file containing the stats belongs", "id": "UserSID", "name": "UserSID", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Last time the startup information was updated on the device", "id": "LastStartUpAnalysisDate", "name": "LastStartUpAnalysisDate", "type": "datetime", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of applications with a high startup impact", "id": "HighImpactCount", "name": "HighImpactCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Details (CPU time in ms, Disk I/O in MB) of programs with a high startup impact", "id": "HighImpactApplications", "name": "HighImpactApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Actionable names of programs with a high startup impact", "id": "HighImpactActionableApplications", "name": "HighImpactActionableApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of applications with a medium startup impact", "id": "MediumImpactCount", "name": "MediumImpactCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Details (CPU time in ms, Disk I/O in MB) of programs with a medium startup impact", "id": "MediumImpactApplications", "name": "MediumImpactApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Actionable names of programs with a medium startup impact", "id": "MediumImpactActionableApplications", "name": "MediumImpactActionableApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of applications with a low startup impact", "id": "LowImpactCount", "name": "LowImpactCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Details (CPU time in ms, Disk I/O in MB) of programs with a low startup impact", "id": "LowImpactApplications", "name": "LowImpactApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Actionable names of programs with a low startup impact", "id": "LowImpactActionableApplications", "name": "LowImpactActionableApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Applications that were started but whose startup impacts were not measured by Microsoft Windows", "id": "NotMeasuredImpactApplications", "name": "NotMeasuredImpactApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Actionable names of programs not measured by Microsoft Windows", "id": "NotMeasuredImpactActionableApplications", "name": "NotMeasuredImpactActionableApplications", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-StartUpImpact.ps1", "script": ""}}}