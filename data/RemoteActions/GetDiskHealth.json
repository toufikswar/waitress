{"id": "Get_Disk_Health_windows", "name": "Get Disk Health", "description": "Gets physical disk health details where the drive is located (identified by a given drive letter).", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Drive letter which you want drive and disk information from. It must be a single letter from A to Z (English alphabet)", "id": "DriveLetter", "name": "DriveLetter", "options": ["C"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Temperature (in Celsius degrees) from which the disk will be considered to be heating (\"DiskHot\" output)", "id": "DiskMinimumTemperature", "name": "DiskMinimumTemperature", "options": ["50"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Whether the disk supports Predictive Failure feature or not", "id": "PredictiveFailureSupport", "name": "PredictiveFailureSupport", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The current SMART status of the disk. More information about the possible statuses can be found [https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-diskdrive here] (\"Status\" section)", "id": "SMARTStatus", "name": "SMARTStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Current disk temperature (in Celsius degrees)", "id": "DiskTemperature", "name": "DiskTemperature", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Whether the disk is heating (current temperature higher than 'DiskMinimumTemperature' input parameter value)", "id": "DiskHot", "name": "DiskHot", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The number of disk errors that have been corrected", "id": "WriteErrorsCorrected", "name": "WriteErrorsCorrected", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of uncorrected disk errors", "id": "WriteErrorsUncorrected", "name": "WriteErrorsUncorrected", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of disk errors", "id": "WriteErrorsTotal", "name": "WriteErrorsTotal", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-DiskHealth.ps1", "script": ""}}}