{"id": "Set_Windows_Registry_Key_Value_windows", "name": "Set Windows Registry Key Value", "description": "Modifies or creates a String, Binary, DWORD or QWORD value on the Windows Registry.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "Full registry key path. Root of registry keys should be provided as a fully-qualified name (Registry::HKEY_LOCAL_MACHINE\\...), the full name (HKEY_LOCAL_MACHINE) or an abbreviation (HKLM, HKCU, HKU)", "id": "RegistryKey", "name": "RegistryKey", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Full name of the Registry Key value", "id": "ValueName", "name": "ValueName", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Value to be set. If ValueType is Binary, it should be a positive hexadecimal value with even digits. Eg. 'A4789F', 'A4 78 9F'. If ValueType is a DWORD, the value should be a positive 32-bit number. It can be decimal or hexadecimal if it is preceded by '0x'. Eg. '345', '0xA76D9E'. If ValueType is a QWORD, the value should be a positive 64-bit number. It can be decimal or hexadecimal if it is preceded by '0x'. Eg. '345981694', '0xA76D9EF78'", "id": "Value", "name": "Value", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Type of the Registry Key value to be created or modified. Accepted values are String, Binary, DWORD or QWORD", "id": "ValueType", "name": "ValueType", "options": ["String"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Set-WindowsRegistryKeyValue.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KTW9kaWZpZXMgb3IgY3JlYXRlcyBhIHZhbHVlIG9uIHRoZSBXaW5kb3dzIFJlZ2lzdHJ5Lg0KDQouREVTQ1JJUFRJT04NCk1vZGlmaWVzIG9yIGNyZWF0ZXMgYSBTdHJpbmcsIEJpbmFyeSwgRFdPUkQgb3IgUVdPUkQgdmFsdWUgb24gdGhlIFdpbmRvd3MgUmVnaXN0cnkuDQoNCi5GVU5DVElPTkFMSVRZDQpSZW1lZGlhdGlvbg0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIFJlZ2lzdHJ5S2V5ICAgICAgICAgICAgICAgICAgICAgRnVsbCByZWdpc3RyeSBrZXkgcGF0aC4gUm9vdCBvZiByZWdpc3RyeSBrZXlzIHNob3VsZCBiZSBwcm92aWRlZCBhcyBhIGZ1bGx5LXF1YWxpZmllZCBuYW1lIChSZWdpc3RyeTo6SEtFWV9MT0NBTF9NQUNISU5FXC4uLiksIHRoZSBmdWxsIG5hbWUgKEhLRVlfTE9DQUxfTUFDSElORSkgb3IgYW4gYWJicmV2aWF0aW9uIChIS0xNLCBIS0NVLCBIS1UpDQoyICAgVmFsdWVOYW1lICAgICAgICAgICAgICAgICAgICAgICBGdWxsIG5hbWUgb2YgdGhlIFJlZ2lzdHJ5IEtleSB2YWx1ZQ0KMyAgIFZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUgdG8gYmUgc2V0LiBJZiBWYWx1ZVR5cGUgaXMgQmluYXJ5LCBpdCBzaG91bGQgYmUgYSBwb3NpdGl2ZSBoZXhhZGVjaW1hbCB2YWx1ZSB3aXRoIGV2ZW4gZGlnaXRzLiBFZy4gJ0E0Nzg5RicsICdBNCA3OCA5RicuIElmIFZhbHVlVHlwZSBpcyBhIERXT1JELCB0aGUgdmFsdWUgc2hvdWxkIGJlIGEgcG9zaXRpdmUgMzItYml0IG51bWJlci4gSXQgY2FuIGJlIGRlY2ltYWwgb3IgaGV4YWRlY2ltYWwgaWYgaXQgaXMgcHJlY2VkZWQgYnkgJzB4Jy4gRWcuICczNDUnLCAnMHhBNzZEOUUnLiBJZiBWYWx1ZVR5cGUgaXMgYSBRV09SRCwgdGhlIHZhbHVlIHNob3VsZCBiZSBhIHBvc2l0aXZlIDY0LWJpdCBudW1iZXIuIEl0IGNhbiBiZSBkZWNpbWFsIG9yIGhleGFkZWNpbWFsIGlmIGl0IGlzIHByZWNlZGVkIGJ5ICcweCcuIEVnLiAnMzQ1OTgxNjk0JywgJzB4QTc2RDlFRjc4Jw0KNCAgIFZhbHVlVHlwZSAgICAgICAgICAgICAgICAgICAgICAgVHlwZSBvZiB0aGUgUmVnaXN0cnkgS2V5IHZhbHVlIHRvIGJlIGNyZWF0ZWQgb3IgbW9kaWZpZWQuIEFjY2VwdGVkIHZhbHVlcyBhcmUgU3RyaW5nLCBCaW5hcnksIERXT1JEIG9yIFFXT1JEDQoNCi5GVVJUSEVSIElORk9STUFUSU9ODQpUbyBrbm93IG1vcmUgYWJvdXQgdGhlIHJlZ2lzdHJ5IGFuZCBpdHMgdmFsdWVzIHRha2UgYSBsb29rIGF0IHRoZSBbaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9zeXNpbmZvL3JlZ2lzdHJ5IG9mZmljaWFsIGRvY3VtZW50YXRpb25dLg0KDQouUkVTVFJJQ1RJT05TDQotIFRoaXMgc2NyaXB0IGlzIG5vdCBzaWduZWQgYnkgTmV4dGhpbmsgZHVlIHRvIHNlY3VyaXR5IGNvbmNlcm5zLg0KLSBTaW5jZSBXaW5kb3dzIDcgcmVnaXN0cnkgV09SRHMgb25seSBhY2NlcHRzIHJlZ3VsYXIgaW50ZWdlcnMgd2hlbiB1c2luZyBkZWNpbWFsIHZhbHVlcyBhbmQgbm90IHVuc2lnbmVkIG9uZXMgKGFzIGluIFdpbmRvd3MgMTApLCB0aGlzIFJlbW90ZSBBY3Rpb25zIGlzIGxpbWl0ZWQgYnkgaW50MzIgYW5kIGludDY0IG1heGltdW0gdmFsdWVzIChEV09SRCBhbmQgUVdPUkQgcmVzcGVjdGl2ZWx5KSBidXQgMCBpcyBzdGlsbCB0aGUgbWluaW11bSB2YWx1ZSBvZiBib3RoIHR5cGVzIG9mIFdPUkRzLg0KLSBJbnB1dCBwYXJhbWV0ZXJzIGNhbid0IGVuZCB3aXRoIHRoZSBjaGFyYWN0ZXIgJ1wnIGR1ZSB0byBjb2xsZWN0b3IgcmVzdHJpY3Rpb25zLg0KDQouTk9URVMNCkNvbnRleHQ6ICAgICAgICAgICAgTG9jYWxTeXN0ZW0vSW50ZXJhY3RpdmVVc2VyDQpWZXJzaW9uOiAgICAgICAgICAgIDEuMC4xLjAgLSBVcGRhdGVkIGRvY3VtZW50YXRpb24NCiAgICAgICAgICAgICAgICAgICAgMS4wLjAuMCAtIEluaXRpYWwgcmVsZWFzZQ0KTGFzdCBHZW5lcmF0ZWQ6ICAgICAxOCBTZXAgMjAyMCAtIDEwOjIwOjUyDQpDb3B5cmlnaHQgKEMpIDIwMjAgTmV4dGhpbmsgU0EsIFN3aXR6ZXJsYW5kDQojPg0KIw0KIyBJbnB1dCBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCiMNCnBhcmFtKA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFJlZ2lzdHJ5S2V5LA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJFZhbHVlTmFtZSwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRWYWx1ZSwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSRWYWx1ZVR5cGUNCikNCiMgRW5kIG9mIHBhcmFtZXRlcnMgZGVmaW5pdGlvbg0KDQojDQojIENvbnN0YW50cyBkZWZpbml0aW9uDQojDQpOZXctVmFyaWFibGUgLU5hbWUgJ1ZBTFVFX1RZUEVTJyBgDQogICAgLVZhbHVlIEAoJ1N0cmluZycsICdCaW5hcnknLCAnRFdPUkQnLCAnUVdPUkQnKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdUUkFOU0ZPUk1BVElPTlMnIGANCiAgICAtVmFsdWUgIEB7J0hLVScgPSAnUmVnaXN0cnk6OkhLRVlfVVNFUlMnDQogICAgICAgICAgICAgICdIS0NVJyA9ICdSZWdpc3RyeTo6SEtFWV9DVVJSRU5UX1VTRVInDQogICAgICAgICAgICAgICdIS0xNJyA9ICdSZWdpc3RyeTo6SEtFWV9MT0NBTF9NQUNISU5FJw0KICAgICAgICAgICAgICAnSEtFWV9VU0VSUycgPSAnUmVnaXN0cnk6OkhLRVlfVVNFUlMnDQogICAgICAgICAgICAgICdIS0VZX0NVUlJFTlRfVVNFUicgPSAnUmVnaXN0cnk6OkhLRVlfQ1VSUkVOVF9VU0VSJw0KICAgICAgICAgICAgICAnSEtFWV9MT0NBTF9NQUNISU5FJyA9ICdSZWdpc3RyeTo6SEtFWV9MT0NBTF9NQUNISU5FJw0KICAgICAgICAgICAgICAnSEtFWV9DVVJSRU5UX0NPTkZJRycgPSAnUmVnaXN0cnk6OkhLRVlfQ1VSUkVOVF9DT05GSUcnDQogICAgICAgICAgICAgICdIS0VZX0NMQVNTRVNfUk9PVCcgPSAnUmVnaXN0cnk6OkhLRVlfQ0xBU1NFU19ST09UJ30gYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KIw0KIyBJbnZva2UgTWFpbg0KIw0KZnVuY3Rpb24gSW52b2tlLU1haW4gKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRleGl0Q29kZSA9IDANCg0KICAgIHRyeSB7DQogICAgICAgIFRlc3QtU3VwcG9ydGVkT1NWZXJzaW9uDQogICAgICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KDQogICAgICAgIFNldC1SZWdpc3RyeUtleVZhbHVlIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KICAgIH0gY2F0Y2ggew0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlIC1NZXNzYWdlICRfDQogICAgICAgICRleGl0Q29kZSA9IDENCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCiMNCiMgVGVtcGxhdGUgZnVuY3Rpb25zDQojDQpmdW5jdGlvbiBUZXN0LVN1cHBvcnRlZE9TVmVyc2lvbiB7DQogICAgJE9TVmVyc2lvbiA9IChHZXQtT1NWZXJzaW9uKSAtYXMgW3ZlcnNpb25dDQogICAgaWYgKC1ub3QgKCRPU1ZlcnNpb24pKSB7DQogICAgICAgIHRocm93ICdUaGlzIHNjcmlwdCBjb3VsZCBub3QgcmV0dXJuIE9TIHZlcnNpb24uICcNCiAgICB9DQogICAgaWYgKCgkT1NWZXJzaW9uLk1ham9yIC1uZSA2IC1vciAkT1NWZXJzaW9uLk1pbm9yIC1uZSAxKSAtYW5kIGANCiAgICAgICAgKCRPU1ZlcnNpb24uTWFqb3IgLW5lIDEwKSkgew0KICAgICAgICB0aHJvdyAnVGhpcyBzY3JpcHQgaXMgY29tcGF0aWJsZSB3aXRoIFdpbmRvd3MgNyBhbmQgMTAgb25seS4gJw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LU9TVmVyc2lvbiB7DQogICAgcmV0dXJuIEdldC1XbWlPYmplY3QgLUNsYXNzIFdpbjMyX09wZXJhdGluZ1N5c3RlbSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgLUZpbHRlciAnUHJvZHVjdFR5cGUgPSAxJyAtRXJyb3JBY3Rpb24gU3RvcCB8IGANCiAgICAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IFZlcnNpb24NCn0NCg0KZnVuY3Rpb24gV3JpdGUtU3RhdHVzTWVzc2FnZSAoW3Bzb2JqZWN0XSRNZXNzYWdlKSB7DQogICAgJGV4Y2VwdGlvbiA9ICRNZXNzYWdlLlRvU3RyaW5nKCkNCg0KICAgIGlmICgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKSB7DQogICAgICAgICR2ZXJzaW9uID0gR2V0LVNjcmlwdFZlcnNpb24NCiAgICAgICAgaWYoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICR2ZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlID0gJHZlcnNpb24gKyAiTGluZSAnJCgkTWVzc2FnZS5JbnZvY2F0aW9uSW5mby5TY3JpcHRMaW5lTnVtYmVyKScuICINCiAgICB9DQoNCiAgICAkaG9zdC51aS5Xcml0ZUVycm9yTGluZSgkZXJyb3JNZXNzYWdlICsgJGV4Y2VwdGlvbikNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KICAgICRzY3JpcHRDb250ZW50ID0gR2V0LUNvbnRlbnQgJE15SW52b2NhdGlvbi5TY3JpcHROYW1lIHwgT3V0LVN0cmluZw0KICAgIGlmICgkc2NyaXB0Q29udGVudCAtbm90bWF0Y2ggJzwjW1xyXG5dezJ9LlNZTk9QU0lTW15cI1w+XSooLk5PVEVTW15cI1w+XSopXCM+JykgeyByZXR1cm4gfQ0KDQogICAgJGhlbHBCbG9jayA9ICRNYXRjaGVzWzFdLlNwbGl0KFtlbnZpcm9ubWVudF06Ok5ld0xpbmUpDQoNCiAgICBmb3JlYWNoICgkbGluZSBpbiAkaGVscEJsb2NrKSB7DQogICAgICAgIGlmICgkbGluZSAtbWF0Y2ggJ1ZlcnNpb246Jykgew0KICAgICAgICAgICAgcmV0dXJuICRsaW5lLlNwbGl0KCc6JylbMV0uU3BsaXQoJy0nKVswXS5UcmltKCkNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1SZWdpc3RyeVBhdGggKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIFRlc3QtU3RyaW5nTnVsbE9yRW1wdHkgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIC1QYXJhbVZhbHVlICRQYXJhbVZhbHVlDQogICAgJGNsZWFuUGF0aCA9ICRQYXJhbVZhbHVlIC1yZXBsYWNlICdeUmVnaXN0cnk6OicNCg0KICAgICRsaXN0ID0gQCgnSEtFWV9VU0VSUycsICdIS0VZX0NVUlJFTlRfVVNFUicsICdIS0VZX0xPQ0FMX01BQ0hJTkUnLA0KICAgICAgICAgICAgICAnSEtFWV9DVVJSRU5UX0NPTkZJRycsICdIS0VZX0NMQVNTRVNfUk9PVCcsICdIS1UnLCAnSEtDVScsICdIS0xNJykgLWpvaW4gJ3wnDQoNCiAgICBpZiAoJGNsZWFuUGF0aCAtbm90bWF0Y2ggJ14oJyArICRsaXN0ICsgJylbOlxcXC9dJykgew0KICAgICAgICB0aHJvdyAiRXJyb3Igb24gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gSXQgaXMgbm90IGNvcnJlY3RseSBmb3JtYXR0ZWQgYXMgYSByZWdpc3RyeSBwYXRoLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVN0cmluZ051bGxPckVtcHR5IChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoKEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFBhcmFtVmFsdWUpKSkgew0KICAgICAgICB0aHJvdyAiJyRQYXJhbU5hbWUnIGNhbm5vdCBiZSBlbXB0eSBub3IgbnVsbC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVN0cmluZ1NldCAoW3N0cmluZ10kUGFyYW1OYW1lLCAkUGFyYW1WYWx1ZSwgW3N0cmluZ1tdXSRWYWxpZFZhbHVlcykgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yIC1ub3QgKCRQYXJhbVZhbHVlIC1pcyBbc3RyaW5nXSkpIHsNCiAgICAgICAgdGhyb3cgIkVycm9yIG9uIHBhcmFtZXRlciAnJFBhcmFtTmFtZScuIEl0IGlzIG5vdCBhIHN0cmluZy4gIg0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCR2YWx1ZSBpbiAkVmFsaWRWYWx1ZXMpIHsNCiAgICAgICAgaWYgKCRQYXJhbVZhbHVlIC1lcSAkdmFsdWUpIHsgcmV0dXJuIH0NCiAgICB9DQoNCiAgICAkZXhwZWN0ZWRWYWx1ZXMgPSAkVmFsaWRWYWx1ZXMgLWpvaW4gJywgJw0KICAgIHRocm93ICJFcnJvciBvbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBBY2NlcHRlZCB2YWx1ZXMgYXJlICRleHBlY3RlZFZhbHVlcy4gIg0KfQ0KDQpmdW5jdGlvbiBTZXQtUmVnaXN0cnlLZXkgKFtzdHJpbmddJEtleSwgW3N0cmluZ10kUHJvcGVydHksIFtzdHJpbmddJFR5cGUsIFtvYmplY3RdJFZhbHVlKSB7DQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkS2V5KSkgeyBbdm9pZF0oTmV3LUl0ZW0gLVBhdGggJEtleSAtRm9yY2UgLUVycm9yQWN0aW9uIFN0b3ApIH0NCiAgICBbdm9pZF0oTmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkS2V5IGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTmFtZSAkUHJvcGVydHkgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Qcm9wZXJ0eVR5cGUgJFR5cGUgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAkVmFsdWUgLUVycm9yQWN0aW9uIFN0b3AgLUZvcmNlKQ0KfQ0KDQojDQojIElucHV0IHBhcmFtZXRlciB2YWxpZGF0aW9uDQojDQpmdW5jdGlvbiBUZXN0LUlucHV0UGFyYW1ldGVycyAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgVGVzdC1SZWdpc3RyeVBhdGggYA0KICAgICAgICAtUGFyYW1OYW1lICdSZWdpc3RyeUtleScgYA0KICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLlJlZ2lzdHJ5S2V5DQogICAgVGVzdC1TdHJpbmdTZXQgYA0KICAgICAgICAtUGFyYW1OYW1lICdWYWx1ZVR5cGUnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5WYWx1ZVR5cGUgYA0KICAgICAgICAtVmFsaWRWYWx1ZXMgJFZBTFVFX1RZUEVTDQogICAgVGVzdC1SZWdpc3RyeUtleVZhbHVlIGANCiAgICAgICAgLVBhcmFtTmFtZSAnVmFsdWUnIGANCiAgICAgICAgLVBhcmFtVmFsdWUgJElucHV0UGFyYW1ldGVycy5WYWx1ZSBgDQogICAgICAgIC1WYWx1ZVR5cGUgJElucHV0UGFyYW1ldGVycy5WYWx1ZVR5cGUNCn0NCg0KZnVuY3Rpb24gVGVzdC1SZWdpc3RyeUtleVZhbHVlIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUsIFtzdHJpbmddJFZhbHVlVHlwZSkgew0KICAgIHN3aXRjaCAoJFZhbHVlVHlwZSkgew0KICAgICAgICAnQmluYXJ5JyB7DQogICAgICAgICAgICBUZXN0LUhleEJpbmFyeVBhcmFtIC1QYXJhbU5hbWUgJFBhcmFtTmFtZSAtUGFyYW1WYWx1ZSAkUGFyYW1WYWx1ZQ0KICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgfQ0KICAgICAgICAnRFdPUkQnIHsNCiAgICAgICAgICAgIFRlc3QtUmVnaXN0cnlXb3JkIC1QYXJhbU5hbWUgJFBhcmFtTmFtZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1WYWx1ZSAkUGFyYW1WYWx1ZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtTnVtYmVyT2ZCaXRzIDMyDQogICAgICAgICAgICBicmVhaw0KICAgICAgICB9DQogICAgICAgICdRV09SRCcgew0KICAgICAgICAgICAgVGVzdC1SZWdpc3RyeVdvcmQgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1QYXJhbVZhbHVlICRQYXJhbVZhbHVlIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1OdW1iZXJPZkJpdHMgNjQNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtSGV4QmluYXJ5UGFyYW0gKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICR0cmltbWVkVmFsdWUgPSAkUGFyYW1WYWx1ZS5UcmltKCkNCiAgICAkY2xlYW5WYWx1ZSA9ICRQYXJhbVZhbHVlLlJlcGxhY2UoJyAnLCAnJykNCiAgICBUZXN0LUhleFZhbHVlIC1QYXJhbU5hbWUgJFBhcmFtTmFtZSAtUGFyYW1WYWx1ZSAkY2xlYW5WYWx1ZQ0KDQogICAgaWYgKCR0cmltbWVkVmFsdWUgLW1hdGNoICcgJyAtYW5kDQogICAgICAgICR0cmltbWVkVmFsdWUgLW5vdG1hdGNoICdeKFtcZGEtZkEtRl17Mn1ccykrW1xkYS1mQS1GXXsyfSQnKSB7DQogICAgICAgIHRocm93ICJJZiBhIGhleGFkZWNpbWFsIHZhbHVlIGluICckUGFyYW1OYW1lJyBpcyBzZXBhcmF0ZWQgYnkgc3BhY2VzLCBlYWNoIHNlcGFyYXRpb24gc2hvdWxkIG9ubHkgaW5jbHVkZSB0d28gZGlnaXRzLiAiDQogICAgfSBlbHNlaWYgKCgkY2xlYW5WYWx1ZS5MZW5ndGggJSAyKSAtbmUgMCkgew0KICAgICAgICB0aHJvdyAiRXJyb3IgaW4gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gJyRQYXJhbVZhbHVlJyBtdXN0IGJlIGZvcm1lZCBieSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHMuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtSGV4VmFsdWUgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmICgkUGFyYW1WYWx1ZSAtbm90bWF0Y2ggJ15bXGRhLWZBLUZdKyQnKSB7DQogICAgICAgIHRocm93ICJFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAnJFBhcmFtVmFsdWUnIHNob3VsZCBiZSBhIGhleGFkZWNpbWFsIG51bWJlci4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gVGVzdC1SZWdpc3RyeVdvcmQgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSwgW2ludF0kTnVtYmVyT2ZCaXRzKSB7DQogICAgJHRyaW1tZWRWYWx1ZSA9ICRQYXJhbVZhbHVlLlRyaW0oKQ0KDQogICAgaWYgKCR0cmltbWVkVmFsdWUgLW1hdGNoICdeMHgnKSB7DQogICAgICAgICRoZXggPSAoJFBhcmFtVmFsdWUgLXJlcGxhY2UgJzB4JykuVHJpbVN0YXJ0KCcwJykNCiAgICAgICAgVGVzdC1IZXhWYWx1ZSAtUGFyYW1OYW1lICRQYXJhbU5hbWUgLVBhcmFtVmFsdWUgJGhleA0KICAgICAgICBpZiAoJGhleC5MZW5ndGggLWd0ICROdW1iZXJPZkJpdHMgLyA0KSB7DQogICAgICAgICAgICB0aHJvdyAiRXJyb3IgaW4gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gJyRQYXJhbVZhbHVlJyBpcyBiaWdnZXIgdGhhbiBhbiB1bnNpZ25lZCAkTnVtYmVyT2ZCaXRzLWJpdCBudW1iZXIuICINCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIFRlc3QtSW50VmFsdWUgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIGANCiAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1WYWx1ZSAkUGFyYW1WYWx1ZSBgDQogICAgICAgICAgICAgICAgICAgICAgLU51bWJlck9mQml0cyAkTnVtYmVyT2ZCaXRzDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUludFZhbHVlIChbc3RyaW5nXSRQYXJhbU5hbWUsIFtzdHJpbmddJFBhcmFtVmFsdWUsIFtpbnRdJE51bWJlck9mQml0cykgew0KICAgIGlmICgkUGFyYW1WYWx1ZSAtbm90bWF0Y2ggJ15bXGRdKyQnKSB7DQogICAgICAgIHRocm93ICJFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAnJFBhcmFtVmFsdWUnIHNob3VsZCBiZSBhIHBvc2l0aXZlIGRlY2ltYWwgbnVtYmVyLiAiDQogICAgfQ0KDQogICAgJGVycm9yTWVzc2FnZSA9ICJFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAkUGFyYW1WYWx1ZSBzaG91bGQgYmUgbG93ZXIgdGhhbiBvciBlcXVhbCB0byB7MH0uICINCiAgICBpZiAoJE51bWJlck9mQml0cyAtZXEgMzIpIHsNCiAgICAgICAgJGlzQmlnZ2VyID0gLW5vdCBbaW50MzJdOjpUcnlQYXJzZSgkUGFyYW1WYWx1ZSwgW3JlZl0kbnVsbCkNCiAgICAgICAgJGVycm9yTWVzc2FnZSA9ICRlcnJvck1lc3NhZ2UgLWYgW2ludDMyXTo6TWF4VmFsdWUNCiAgICB9IGVsc2Ugew0KICAgICAgICAkaXNCaWdnZXIgPSAtbm90IFtpbnQ2NF06OlRyeVBhcnNlKCRQYXJhbVZhbHVlLCBbcmVmXSRudWxsKQ0KICAgICAgICAkZXJyb3JNZXNzYWdlID0gJGVycm9yTWVzc2FnZSAtZiBbaW50NjRdOjpNYXhWYWx1ZQ0KICAgIH0NCg0KICAgIGlmICgkaXNCaWdnZXIpIHsNCiAgICAgICAgdGhyb3cgJGVycm9yTWVzc2FnZQ0KICAgIH0NCn0NCg0KIw0KIyBSZWdpc3RyeSBtYW5hZ2VtZW50DQojDQpmdW5jdGlvbiBTZXQtUmVnaXN0cnlLZXlWYWx1ZSAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgJGtleVBhdGggPSBGb3JtYXQtUmVnaXN0cnlQYXRoIC1SZWdpc3RyeVBhdGggJElucHV0UGFyYW1ldGVycy5SZWdpc3RyeUtleQ0KICAgICR2YWx1ZSA9IEZvcm1hdC1WYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5WYWx1ZSAtVmFsdWVUeXBlICRJbnB1dFBhcmFtZXRlcnMuVmFsdWVUeXBlDQogICAgU2V0LVJlZ2lzdHJ5S2V5UHJvcGVydHkgLUtleSAka2V5UGF0aCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb3BlcnR5ICRJbnB1dFBhcmFtZXRlcnMuVmFsdWVOYW1lIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtVHlwZSAkSW5wdXRQYXJhbWV0ZXJzLlZhbHVlVHlwZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLVZhbHVlICR2YWx1ZQ0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtUmVnaXN0cnlQYXRoIChbc3RyaW5nXSRSZWdpc3RyeVBhdGgpIHsNCiAgICBpZiAoJFJlZ2lzdHJ5UGF0aCAtbWF0Y2ggJ15SZWdpc3RyeTo6JykgeyByZXR1cm4gJFJlZ2lzdHJ5UGF0aCB9DQoNCiAgICBpZiAoJFJlZ2lzdHJ5UGF0aCAtbWF0Y2ggJ14oW1x3XSspWzpcL3w6XFx8XFx8XC9dJyAtYW5kICRudWxsIC1uZSAkVFJBTlNGT1JNQVRJT05TLigkTWF0Y2hlc1sxXSkpIHsNCiAgICAgICAgJGNoaWxkUGF0aCA9ICgkUmVnaXN0cnlQYXRoIC1yZXBsYWNlICdeJyArICRNYXRjaGVzWzFdKS5UcmltU3RhcnQoJzonKQ0KICAgICAgICByZXR1cm4gSm9pbi1QYXRoIC1QYXRoICRUUkFOU0ZPUk1BVElPTlMuKCRNYXRjaGVzWzFdKSAtQ2hpbGRQYXRoICRjaGlsZFBhdGgNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEZvcm1hdC1WYWx1ZSAoW3N0cmluZ10kVmFsdWUsIFtzdHJpbmddJFZhbHVlVHlwZSkgew0KICAgIGlmICgkVmFsdWVUeXBlIC1lcSAnQmluYXJ5JykgeyByZXR1cm4gKEZvcm1hdC1CaW5hcnkgLVZhbHVlICRWYWx1ZSkgfQ0KDQogICAgcmV0dXJuICRWYWx1ZQ0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtQmluYXJ5IChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIFtieXRlW11dJGJpbmFyeVZhbHVlID0gQCgpDQogICAgJHZhbHVlc0xpc3QgPSAoW2NoYXJbXV0oJFZhbHVlIC1yZXBsYWNlICcgJykpDQogICAgJHBhaXJzQ291bnQgPSAkdmFsdWVzTGlzdC5MZW5ndGgNCiAgICBmb3IgKCRpID0gMDsgJGkgLWx0ICRwYWlyc0NvdW50OyAkaSArPSAyKSB7DQogICAgICAgICRiaW5hcnlWYWx1ZSArPSAoW2J5dGVdIjB4JCgkdmFsdWVzTGlzdFskaV0pJCgkdmFsdWVzTGlzdFskaSArIDFdKSIpDQogICAgfQ0KDQogICAgcmV0dXJuICRiaW5hcnlWYWx1ZQ0KfQ0KDQpmdW5jdGlvbiBTZXQtUmVnaXN0cnlLZXlQcm9wZXJ0eSAoW3N0cmluZ10kS2V5LCBbc3RyaW5nXSRQcm9wZXJ0eSwgW3N0cmluZ10kVHlwZSwgW29iamVjdF0kVmFsdWUpIHsNCiAgICB0cnkgew0KICAgICAgICBTZXQtUmVnaXN0cnlLZXkgLUtleSAkS2V5IC1Qcm9wZXJ0eSAkUHJvcGVydHkgLVR5cGUgJFR5cGUgLVZhbHVlICRWYWx1ZQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICBpZiAoJF8uQ2F0ZWdvcnlJbmZvLkNhdGVnb3J5IC1lcSAnT3BlbkVycm9yJykgew0KICAgICAgICAgICAgdGhyb3cgIlRoZSBrZXkgd2FzIG5vdCBjcmVhdGVkIGJlY2F1c2UgdGhlIGN1cnJlbnQgdXNlciBkb2VzIG5vdCBoYXZlIHdyaXRlIHBlcm1pc3Npb24gaW4gJyRLZXknLiAiDQogICAgICAgIH0NCiAgICAgICAgaWYgKCRfLkNhdGVnb3J5SW5mby5DYXRlZ29yeSAtZXEgJ1Blcm1pc3Npb25EZW5pZWQnKSB7DQogICAgICAgICAgICB0aHJvdyAiVGhlIGtleSB2YWx1ZSB3YXMgbm90IGNyZWF0ZWQgb3IgbW9kaWZpZWQgYmVjYXVzZSB0aGUgY3VycmVudCB1c2VyIGRvZXMgbm90IGhhdmUgd3JpdGUgcGVybWlzc2lvbiBpbiAnJEtleScuICINCiAgICAgICAgfQ0KICAgICAgICB0aHJvdyAkXw0KICAgIH0NCn0NCg0KIw0KIyBNYWluIHNjcmlwdCBmbG93DQojDQpbZW52aXJvbm1lbnRdOjpFeGl0KChJbnZva2UtTWFpbiAtSW5wdXRQYXJhbWV0ZXJzICRNeUludm9jYXRpb24uQm91bmRQYXJhbWV0ZXJzKSk="}}}