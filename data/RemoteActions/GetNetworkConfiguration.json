{"id": "Get_Network_Configuration_windows", "name": "Get Network Configuration", "description": "Returns the current network configurations for all connected adapters (adapter name, MAC and IP addresses, Subnet Mask, Gateway, Domain, DNS, speed, DHCP), the list of the disconnected adapters with their MAC address and WiFi information like the SSID, channel and signal strength. Useful for troubleshooting network-related issues.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Current network configuration for the adapters with state \"connected\"", "id": "ConnectedAdapters", "name": "ConnectedAdapters", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Current network configuration for the adapters with state \"connected\" (used only if more than 4 connected adapters exist)", "id": "OtherConnectedAdapters", "name": "OtherConnectedAdapters", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Information regarding the WiFi connection, like SSID, signal strength, channel, etc.", "id": "WiFiInformation", "name": "WiFiInformation", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name and MAC address of the adapters with state \"disconnected\"", "id": "DisconnectedAdapters", "name": "DisconnectedAdapters", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-NetworkConfiguration.ps1", "script": ""}}}