{"id": "Check_AnyConnect_Timeout_windows", "name": "Check AnyConnect Timeout", "description": "Checks the time left until Cisco's AnyConnect timeout and notifies the user if the time left is below the provided threshold.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "Campaign to notify the user that the VPN connection is about to expire. Use an empty GUID (00000000-0000-0000-0000-000000000000) to avoid the campaign", "id": "CampaignId", "name": "CampaignId", "options": ["fcd44867-7cf3-4a95-9291-0197d1706bb7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum amount of hours for the remaining time to notify the user", "id": "ThresholdInHours", "name": "ThresholdInHours", "options": ["8"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The defined timeout set in Cisco AnyConnect in hours. Provide a number between 1 and 744 (one month)", "id": "MaximumTimeoutInHours", "name": "MaximumTimeoutInHours", "options": ["45"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Hours the VPN connection has been established", "id": "VPNTimeActive", "name": "VPNTimeActive", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Hours left before the VPN times-out based on the preestablished limit", "id": "VPNTimeLeft", "name": "VPNTimeLeft", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Status of the current VPN connection", "id": "VPNConnectionStatus", "name": "VPNConnectionStatus", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "VPN server the device is currently connected to", "id": "VPNServer", "name": "VPNServer", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Check-AnyConnectTimeout.ps1", "script": ""}}}