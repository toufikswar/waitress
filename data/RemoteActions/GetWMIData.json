{"id": "Get_WMI_Data_windows", "name": "Get WMI Data", "description": "Returns instance(s) of Windows Management Instrumentation (WMI) classes.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "The name of a WMI class", "id": "Class", "name": "Class", "options": ["Win32_StartupCommand"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The WMI repository namespace where the specified WMI class is located when used with the Class parameter. Type \"\" if you do not wish to use this parameter", "id": "Namespace", "name": "Namespace", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Specifies a \"Where\" clause in WMI Query Language (WQL) to use as a filter. Type \"\" if you do not wish to use this parameter", "id": "Filter", "name": "Filter", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The WMI class property or properties from which this cmdlet gets information. Provide either a value or a comma-separated list of values", "id": "Properties", "name": "Properties", "options": ["Command"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Value of the specified property/properties", "id": "PropertyValues", "name": "PropertyValues", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WMIData.ps1", "script": ""}}}