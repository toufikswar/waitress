{"id": "Clear_Recycle_Bin_windows", "name": "Clear Recycle Bin", "description": "Check the recycle bins from all logical drives and figures out the size of files inside. The user is notified and a cleaning up is offered.\n\n'''''Warning:''' This Remote Action permanently deletes recycle bin content from all targeted devices.''", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 1200, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Size in MB to be reached in order to notify the user. Provide number of MB between 100 and 10240 (10 GB)", "id": "BinSizeMB", "name": "BinSizeMB", "options": ["1024"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user about the size of their recycle bin and offer cleanup. Provide an empty GUID to avoid executing this campaign", "id": "CampaignId", "name": "CampaignId", "options": ["9557eede-6ca9-4eb3-b2ba-d61bdd4267a0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user about the finish of the cleanup process. Provide an empty GUID to avoid executing this campaign", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["f8403c5a-378d-4648-8e3b-594cfa3694a9"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "The size of the user recycle bin", "id": "RecycleBinSize", "name": "RecycleBinSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Clear-RecycleBin.ps1", "script": ""}}}