{"id": "Get_Warranty_Information_windows", "name": "Get Warranty Information", "description": "Retrieves warranty information of Dell and/or Lenovo devices, via REST APIs.\nThe warranty data obtained can be also related to the laptop batteries.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Maximum delay in seconds to avoid overloading the vendor servers with too many API requests occuring at the same time", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Dell Client ID", "id": "DellClientID", "name": "DellClientID", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Dell Client Secret token", "id": "DellClientSecret", "name": "DellClientSecret", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Dell's device warranty item numbers from where to retrieve the information. The elements should be separated by comma", "id": "DellDeviceWarrantyItemNumbers", "name": "DellDeviceWarrantyItemNumbers", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Dell's battery warranty item numbers from where to retrieve the information. The elements should be separated by comma", "id": "DellBatteryWarrantyItemNumbers", "name": "DellBatteryWarrantyItemNumbers", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Lenovo Client token", "id": "LenovoClientToken", "name": "LenovoClientToken", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Lenovo's device warranty product codes from where to retrieve the information. The elements should be separated by comma", "id": "LenovoDeviceWarrantyProductCodes", "name": "LenovoDeviceWarrantyProductCodes", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Dell's battery warranty product codes from where to retrieve the information. The elements should be separated by comma", "id": "LenovoBatteryWarrantyProductCodes", "name": "LenovoBatteryWarrantyProductCodes", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Date when the device was purchased", "id": "PurchaseOrShipDate", "name": "PurchaseOrShipDate", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date when the device's warranty ends", "id": "DeviceWarrantyEndDate", "name": "DeviceWarrantyEndDate", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days left for the device warranty to expire", "id": "DaysBeforeDeviceWarrantyEnds", "name": "DaysBeforeDeviceWarrantyEnds", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the device's warranty is expired or not", "id": "DeviceWarrantyExpired", "name": "DeviceWarrantyExpired", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Date when the battery's warranty ends", "id": "BatteryWarrantyEndDate", "name": "BatteryWarrantyEndDate", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days left for the battery warranty to expire", "id": "DaysBeforeBatteryWarrantyEnds", "name": "DaysBeforeBatteryWarrantyEnds", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the battery's warranty is expired or not", "id": "BatteryWarrantyExpired", "name": "BatteryWarrantyExpired", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of years related to the age of the device", "id": "DeviceAgeInYears", "name": "DeviceAgeInYears", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WarrantyInformation.ps1", "script": "77u/PCMNCi5TWU5PUFNJUw0KT2J0YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgd2FycmFudHkgb2YgRGVsbCBhbmQgTGVub3ZvIGRldmljZXMuDQoNCi5ERVNDUklQVElPTg0KUmV0cmlldmVzIHdhcnJhbnR5IGluZm9ybWF0aW9uIG9mIERlbGwgYW5kL29yIExlbm92byBkZXZpY2VzLCB2aWEgUkVTVCBBUElzLg0KVGhlIHdhcnJhbnR5IGRhdGEgb2J0YWluZWQgY2FuIGJlIGFsc28gcmVsYXRlZCB0byB0aGUgbGFwdG9wIGJhdHRlcmllcy4NCg0KLkZVTkNUSU9OQUxJVFkNCk9uLWRlbWFuZA0KDQouSU5QVVRTDQpJRCAgTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIE1heGltdW1EZWxheUluU2Vjb25kcyAgICAgICAgICAgTWF4aW11bSBkZWxheSBpbiBzZWNvbmRzIHRvIGF2b2lkIG92ZXJsb2FkaW5nIHRoZSB2ZW5kb3Igc2VydmVycyB3aXRoIHRvbyBtYW55IEFQSSByZXF1ZXN0cyBvY2N1cmluZyBhdCB0aGUgc2FtZSB0aW1lDQoyICAgRGVsbENsaWVudElEICAgICAgICAgICAgICAgICAgICBEZWxsIENsaWVudCBJRA0KMyAgIERlbGxDbGllbnRTZWNyZXQgICAgICAgICAgICAgICAgRGVsbCBDbGllbnQgU2VjcmV0IHRva2VuDQo0ICAgRGVsbERldmljZVdhcnJhbnR5SXRlbU51bWJlcnMgICBMaXN0IG9mIERlbGwncyBkZXZpY2Ugd2FycmFudHkgaXRlbSBudW1iZXJzIGZyb20gd2hlcmUgdG8gcmV0cmlldmUgdGhlIGluZm9ybWF0aW9uLiBUaGUgZWxlbWVudHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYQ0KNSAgIERlbGxCYXR0ZXJ5V2FycmFudHlJdGVtTnVtYmVycyAgTGlzdCBvZiBEZWxsJ3MgYmF0dGVyeSB3YXJyYW50eSBpdGVtIG51bWJlcnMgZnJvbSB3aGVyZSB0byByZXRyaWV2ZSB0aGUgaW5mb3JtYXRpb24uIFRoZSBlbGVtZW50cyBzaG91bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hDQo2ICAgTGVub3ZvQ2xpZW50VG9rZW4gICAgICAgICAgICAgICBMZW5vdm8gQ2xpZW50IHRva2VuDQo3ICAgTGVub3ZvRGV2aWNlV2FycmFudHlQcm9kdWN0Q29kZXNMaXN0IG9mIExlbm92bydzIGRldmljZSB3YXJyYW50eSBwcm9kdWN0IGNvZGVzIGZyb20gd2hlcmUgdG8gcmV0cmlldmUgdGhlIGluZm9ybWF0aW9uLiBUaGUgZWxlbWVudHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYQ0KOCAgIExlbm92b0JhdHRlcnlXYXJyYW50eVByb2R1Y3RDb2Rlc0xpc3Qgb2YgRGVsbCdzIGJhdHRlcnkgd2FycmFudHkgcHJvZHVjdCBjb2RlcyBmcm9tIHdoZXJlIHRvIHJldHJpZXZlIHRoZSBpbmZvcm1hdGlvbi4gVGhlIGVsZW1lbnRzIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWENCg0KLk9VVFBVVFMNCklEICBMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICBEZXNjcmlwdGlvbg0KMSAgIFB1cmNoYXNlT3JTaGlwRGF0ZSAgICAgICAgICAgICAgU3RyaW5nICAgICAgICAgIERhdGUgd2hlbiB0aGUgZGV2aWNlIHdhcyBwdXJjaGFzZWQNCjIgICBEZXZpY2VXYXJyYW50eUVuZERhdGUgICAgICAgICAgIFN0cmluZyAgICAgICAgICBEYXRlIHdoZW4gdGhlIGRldmljZSdzIHdhcnJhbnR5IGVuZHMNCjMgICBEYXlzQmVmb3JlRGV2aWNlV2FycmFudHlFbmRzICAgIEludCAgICAgICAgICAgICBOdW1iZXIgb2YgZGF5cyBsZWZ0IGZvciB0aGUgZGV2aWNlIHdhcnJhbnR5IHRvIGV4cGlyZQ0KNCAgIERldmljZVdhcnJhbnR5RXhwaXJlZCAgICAgICAgICAgQm9vbCAgICAgICAgICAgIElmIHRoZSBkZXZpY2UncyB3YXJyYW50eSBpcyBleHBpcmVkIG9yIG5vdA0KNSAgIEJhdHRlcnlXYXJyYW50eUVuZERhdGUgICAgICAgICAgU3RyaW5nICAgICAgICAgIERhdGUgd2hlbiB0aGUgYmF0dGVyeSdzIHdhcnJhbnR5IGVuZHMNCjYgICBEYXlzQmVmb3JlQmF0dGVyeVdhcnJhbnR5RW5kcyAgIEludCAgICAgICAgICAgICBOdW1iZXIgb2YgZGF5cyBsZWZ0IGZvciB0aGUgYmF0dGVyeSB3YXJyYW50eSB0byBleHBpcmUNCjcgICBCYXR0ZXJ5V2FycmFudHlFeHBpcmVkICAgICAgICAgIEJvb2wgICAgICAgICAgICBJZiB0aGUgYmF0dGVyeSdzIHdhcnJhbnR5IGlzIGV4cGlyZWQgb3Igbm90DQo4ICAgRGV2aWNlQWdlSW5ZZWFycyAgICAgICAgICAgICAgICBJbnQgICAgICAgICAgICAgTnVtYmVyIG9mIHllYXJzIHJlbGF0ZWQgdG8gdGhlIGFnZSBvZiB0aGUgZGV2aWNlDQoNCi5GVVJUSEVSIElORk9STUFUSU9ODQpUaGlzIFJlbW90ZSBBY3Rpb24gY291bGQgZmFpbCBpbiBlbnZpcm9ubWVudHMgd2l0aCBhIHJlc3RyaWN0ZWQgbmV0d29yaywgZHVlIHRvIHRoZSBsYWNrIG9mIGNvbW11bmljYXRpb24gd2l0aCB0aGUgY29ycmVzcG9uZGluZyB2ZW5kb3IncyBBUEkuDQpUaGUgZGF0ZXMgcHJlc2VudGVkIGluIHRoZSBvdXRwdXQgZmllbGRzIGFyZSBhbGwgaW4gVVRDIHRpbWUgem9uZSBhbmQgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm1hdCI6IiBZZWFyL01vbnRoL0RheSBIb3VyczptaW51dGVzOnNlY29uZHMgKDI0IGhvdXJzKS4NClRoZSBXYXJyYW50eSBJdGVtIE51bWJlciBmb3VuZCBpbiB0aGUgQVBJIHJlc3BvbnNlIGlzIGtub3duIGFzIHRoZSBTS1UgbnVtYmVyIG9uIHRoZSBEZWxsIEludm9pY2UuIENob29zZSB0aGUgU0tVcyBmb3IgdGhlIHN1cHBvcnQgaXRlbSB0aGF0IHJlbGF0ZXMgdG8gdGhlIGRldmljZSB3YXJyYW50aWVzIGZvciBlYWNoIHB1cmNoYXNlZCBtb2RlbC4gRG8gdGhlIHNhbWUgZm9yIHRoZSBiYXR0ZXJpZXMsIHdoaWNoIGFyZSB0eXBpY2FsbHkgaW5jbHVkZWQgd2l0aCBzaG9ydGVyIHdhcnJhbnR5IHBlcmlvZC4gVGhlc2UgU0tVIHZhbHVlcyBhcmUgd2hhdCBzaG91bGQgYmUgdXNlZCBpbiBEZXZpY2VXYXJyYW50eUl0ZW1OdW1iZXJzIGlucHV0IHBhcmFtZXRlcnMuDQoNCi5OT1RFUw0KQ29udGV4dDogICAgICAgICAgICBJbnRlcmFjdGl2ZVVzZXINClZlcnNpb246ICAgICAgICAgICAgMy4wLjEuMCAtIEZpeGVkIG1pbGxpc2Vjb25kIHJlbW92YWwgZnJvbSBBUEkgcmV0cmlldmVkIGRhdGUNCiAgICAgICAgICAgICAgICAgICAgMy4wLjAuMCAtIFJlbmFtZWQgRGVsbCBpbnB1dCBwYXJhbWV0ZXJzIHRvIGFsaWduIHdpdGggQVBJIG9iamVjdCBuYW1lcw0KICAgICAgICAgICAgICAgICAgICAyLjAuMC4xIC0gUmVuYW1lZCB0aGUgbWV0aG9kIHRvIHByb2Nlc3MgSlNPTiByZXNwb25zZSBmcm9tIEFQSSdzDQogICAgICAgICAgICAgICAgICAgIDIuMC4wLjAgLSBBZGRlZCBzdXBwb3J0IGZvciBMZW5vdm8gZGV2aWNlcyBhbmQgaW50cm9kdWNlZCAiRGV2aWNlQWdlSW5ZZWFycyIgb3V0cHV0DQogICAgICAgICAgICAgICAgICAgIDEuMC4wLjAgLSBJbml0aWFsIHJlbGVhc2UNCkxhc3QgR2VuZXJhdGVkOiAgICAgMTkgQXByIDIwMjIgLSAwODoxMjoyOQ0KQ29weXJpZ2h0IChDKSAyMDIyIE5leHRoaW5rIFNBLCBTd2l0emVybGFuZA0KIz4NCg0KIw0KIyBJbnB1dCBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCiMNCnBhcmFtKA0KICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXVtzdHJpbmddJE1heGltdW1EZWxheUluU2Vjb25kcywNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSREZWxsQ2xpZW50SUQsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kRGVsbENsaWVudFNlY3JldCwNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSREZWxsRGV2aWNlV2FycmFudHlJdGVtTnVtYmVycywNCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV1bc3RyaW5nXSREZWxsQmF0dGVyeVdhcnJhbnR5SXRlbU51bWJlcnMsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTGVub3ZvQ2xpZW50VG9rZW4sDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTGVub3ZvRGV2aWNlV2FycmFudHlQcm9kdWN0Q29kZXMsDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldW3N0cmluZ10kTGVub3ZvQmF0dGVyeVdhcnJhbnR5UHJvZHVjdENvZGVzDQopDQojIEVuZCBvZiBwYXJhbWV0ZXJzIGRlZmluaXRpb24NCiRlbnY6UGF0aCA9ICIkZW52OlN5c3RlbVJvb3Rcc3lzdGVtMzI7JGVudjpTeXN0ZW1Sb290OyRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxXYmVtOyRlbnY6U3lzdGVtUm9vdFxTeXN0ZW0zMlxXaW5kb3dzUG93ZXJTaGVsbFx2MS4wIg0KDQojDQojIENvbnN0YW50cyBkZWZpbml0aW9uDQojDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RBVEVfU1RSSU5HX0ZPUk1BVCcgYA0KICAgIC1WYWx1ZSAneXl5eS9NTS9kZCBISDptbTpzcycgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdERUZBVUxUX0RBVEUnIGANCiAgICAtVmFsdWUgKFtkYXRldGltZV06OlBhcnNlRXhhY3QoJzAxLzAxLzE5NzAgMDA6MDA6MDAuMDAwWicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZC9NTS95eXl5IEhIOm1tOnNzLmZmZksnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZ2xvYmFsaXphdGlvbi5jdWx0dXJlaW5mb106OkludmFyaWFudEN1bHR1cmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtnbG9iYWxpemF0aW9uLmRhdGV0aW1lc3R5bGVzXTo6Tm9uZSkpIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnREVGQVVMVF9VU0VSX0FHRU5UJyBgDQogICAgLVZhbHVlICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODQuMC40MTQ3Ljg5IFNhZmFyaS81MzcuMzYgRWRnLzg0LjAuNTIyLjQwJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0VSUk9SX0VYQ0VQVElPTl9UWVBFJyBgDQogICAgLVZhbHVlIEB7RW52aXJvbm1lbnQgPSAnW0Vudmlyb25tZW50IGVycm9yXScNCiAgICAgICAgICAgICBJbnB1dCA9ICdbSW5wdXQgZXJyb3JdJw0KICAgICAgICAgICAgIEludGVybmFsID0gJ1tJbnRlcm5hbCBlcnJvcl0nfSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQpOZXctVmFyaWFibGUgLU5hbWUgJ0xPQ0FMX1NZU1RFTV9JREVOVElUWScgYA0KICAgIC1WYWx1ZSAnUy0xLTUtMTgnIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdNQVhfU0NSSVBUX0RFTEFZX1NFQycgYA0KICAgIC1WYWx1ZSA2MDAgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdSRU1PVEVfQUNUSU9OX0RMTF9QQVRIJyBgDQogICAgLVZhbHVlICIkZW52Ok5FWFRISU5LXFJlbW90ZUFjdGlvbnNcbnh0cmVtb3RlYWN0aW9ucy5kbGwiIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQNCk5ldy1WYXJpYWJsZSAtTmFtZSAnVExTXzEyJyBgDQogICAgLVZhbHVlIDMwNzIgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdA0KTmV3LVZhcmlhYmxlIC1OYW1lICdXRUJfUkVRVUVTVF9USU1FT1VUX01JTExJU0VDT05EUycgYA0KICAgIC1WYWx1ZSAyMDAwMCBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0DQoNCk5ldy1WYXJpYWJsZSAtTmFtZSAnU1VQUE9SVEVEX1ZFTkRPUlMnIGANCiAgICAtVmFsdWUgQCgnRGVsbCcsICdMZW5vdm8nKSBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RFTExfQVBJX0FVVEhFTlRJQ0FUSU9OX1VSTCcgYA0KICAgIC1WYWx1ZSAnaHR0cHM6Ly9hcGlndHdiMmMudXMuZGVsbC5jb20vYXV0aC9vYXV0aC92Mi90b2tlbicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnREVMTF9BUElfQVNTRVRfVVJMJyBgDQogICAgLVZhbHVlICdodHRwczovL2FwaWd0d2IyYy51cy5kZWxsLmNvbS9QUk9EL3NiaWwvZWFwaS92NS9hc3NldC1lbnRpdGxlbWVudHMnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RFTExfUFJPRFVDVF9DT0RFX0ZJRUxEX05BTUUnIGANCiAgICAtVmFsdWUgJ2l0ZW1OdW1iZXInIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0RFTExfUFJPRFVDVF9FTkRfREFURV9GSUVMRF9OQU1FJyBgDQogICAgLVZhbHVlICdlbmREYXRlJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQpOZXctVmFyaWFibGUgLU5hbWUgJ0xFTk9WT19BUElfVVJMJyBgDQogICAgLVZhbHVlICdodHRwczovL3N1cHBvcnRhcGkubGVub3ZvLmNvbS92Mi41L3dhcnJhbnR5JyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KTmV3LVZhcmlhYmxlIC1OYW1lICdMRU5PVk9fQkFTRV9QUk9EVUNUX1RZUEVfVkFMVUUnIGANCiAgICAtVmFsdWUgJ0JBU0UnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0xFTk9WT19QUk9EVUNUX0NPREVfRklFTERfTkFNRScgYA0KICAgIC1WYWx1ZSAnSUQnIGANCiAgICAtT3B0aW9uIFJlYWRPbmx5IC1TY29wZSBTY3JpcHQgLUZvcmNlDQpOZXctVmFyaWFibGUgLU5hbWUgJ0xFTk9WT19QUk9EVUNUX0VORF9EQVRFX0ZJRUxEX05BTUUnIGANCiAgICAtVmFsdWUgJ0VuZCcgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCg0KTmV3LVZhcmlhYmxlIC1OYW1lICdBUElfR0VORVJJQ19EQVRFX1NUUlVDVFVSRV9SRUdFWCcgYA0KICAgIC1WYWx1ZSAnKFxkezR9LVxkezJ9LVxkezJ9VFxkezJ9OlxkezJ9OlxkezJ9KShcLlxkKyk/WicgYA0KICAgIC1PcHRpb24gUmVhZE9ubHkgLVNjb3BlIFNjcmlwdCAtRm9yY2UNCk5ldy1WYXJpYWJsZSAtTmFtZSAnQVBJX0dFTkVSSUNfREFURV9GT1JNQVQnIGANCiAgICAtVmFsdWUgJ3l5eXktTU0tZGRUSEg6bW06c3NLJyBgDQogICAgLU9wdGlvbiBSZWFkT25seSAtU2NvcGUgU2NyaXB0IC1Gb3JjZQ0KDQojDQojIEludm9rZSBNYWluDQojDQpmdW5jdGlvbiBJbnZva2UtTWFpbiAoW2hhc2h0YWJsZV0kSW5wdXRQYXJhbWV0ZXJzKSB7DQogICAgJGV4aXRDb2RlID0gMA0KICAgIFtoYXNodGFibGVdJG91dHB1dERhdGEgPSBJbml0aWFsaXplLU91dHB1dERhdGENCg0KICAgIHRyeSB7DQogICAgICAgIEFkZC1OZXh0aGlua1JlbW90ZUFjdGlvbkRMTA0KICAgICAgICBUZXN0LVJ1bm5pbmdBc0ludGVyYWN0aXZlVXNlcg0KICAgICAgICBUZXN0LVN1cHBvcnRlZE9TVmVyc2lvbg0KDQogICAgICAgIFRlc3QtU3VwcG9ydGVkVmVuZG9yDQogICAgICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycw0KDQogICAgICAgIFVwZGF0ZS1PdXRwdXREYXRhIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgIC1PdXRwdXREYXRhICRvdXRwdXREYXRhDQogICAgfSBjYXRjaCB7DQogICAgICAgIFdyaXRlLVN0YXR1c01lc3NhZ2UgLU1lc3NhZ2UgJF8NCiAgICAgICAgJGV4aXRDb2RlID0gMQ0KICAgIH0gZmluYWxseSB7DQogICAgICAgIFVwZGF0ZS1FbmdpbmVPdXRwdXRWYXJpYWJsZXMgLU91dHB1dERhdGEgJG91dHB1dERhdGENCiAgICB9DQoNCiAgICByZXR1cm4gJGV4aXRDb2RlDQp9DQoNCmZ1bmN0aW9uIEluaXRpYWxpemUtT3V0cHV0RGF0YSB7DQogICAgcmV0dXJuIEB7UHVyY2hhc2VPclNoaXBEYXRlID0gJy0nDQogICAgICAgICAgICAgRGV2aWNlV2FycmFudHlFbmREYXRlID0gJy0nDQogICAgICAgICAgICAgRGF5c0JlZm9yZURldmljZVdhcnJhbnR5RW5kcyA9IDANCiAgICAgICAgICAgICBEZXZpY2VXYXJyYW50eUV4cGlyZWQgPSAkZmFsc2UNCiAgICAgICAgICAgICBCYXR0ZXJ5V2FycmFudHlFbmREYXRlID0gJy0nDQogICAgICAgICAgICAgRGF5c0JlZm9yZUJhdHRlcnlXYXJyYW50eUVuZHMgPSAwDQogICAgICAgICAgICAgQmF0dGVyeVdhcnJhbnR5RXhwaXJlZCA9ICRmYWxzZQ0KICAgICAgICAgICAgIERldmljZUFnZUluWWVhcnMgPSAwfQ0KfQ0KDQojDQojIFRlbXBsYXRlIGZ1bmN0aW9ucw0KIw0KZnVuY3Rpb24gQWRkLU5leHRoaW5rUmVtb3RlQWN0aW9uRExMIHsNCg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFJFTU9URV9BQ1RJT05fRExMX1BBVEgpKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgTmV4dGhpbmsgUmVtb3RlIEFjdGlvbiBETEwgbm90IGZvdW5kLiAiDQogICAgfQ0KICAgIEFkZC1UeXBlIC1QYXRoICRSRU1PVEVfQUNUSU9OX0RMTF9QQVRIDQp9DQoNCmZ1bmN0aW9uIFRlc3QtUnVubmluZ0FzSW50ZXJhY3RpdmVVc2VyIHsNCg0KICAgIGlmIChDb25maXJtLUN1cnJlbnRVc2VySXNMb2NhbFN5c3RlbSkgew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFRoaXMgc2NyaXB0IG11c3QgYmUgcnVuIGFzIEludGVyYWN0aXZlVXNlci4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlybS1DdXJyZW50VXNlcklzTG9jYWxTeXN0ZW0gew0KDQogICAgJGN1cnJlbnRJZGVudGl0eSA9IEdldC1DdXJyZW50SWRlbnRpdHkNCiAgICByZXR1cm4gJGN1cnJlbnRJZGVudGl0eSAtZXEgJExPQ0FMX1NZU1RFTV9JREVOVElUWQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQ3VycmVudElkZW50aXR5IHsNCg0KICAgIHJldHVybiBbc2VjdXJpdHkucHJpbmNpcGFsLndpbmRvd3NpZGVudGl0eV06OkdldEN1cnJlbnQoKS5Vc2VyLlRvU3RyaW5nKCkNCn0NCg0KZnVuY3Rpb24gVGVzdC1TdXBwb3J0ZWRPU1ZlcnNpb24gew0KDQogICAgJE9TVmVyc2lvbiA9IChHZXQtT1NWZXJzaW9uKSAtYXMgW3ZlcnNpb25dDQogICAgaWYgKC1ub3QgKCRPU1ZlcnNpb24pKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5FbnZpcm9ubWVudCkgVGhpcyBzY3JpcHQgY291bGQgbm90IHJldHVybiBPUyB2ZXJzaW9uLiAiDQogICAgfQ0KICAgIGlmICgoJE9TVmVyc2lvbi5NYWpvciAtbmUgNiAtb3IgJE9TVmVyc2lvbi5NaW5vciAtbmUgMSkgLWFuZCBgDQogICAgICAgICgkT1NWZXJzaW9uLk1ham9yIC1uZSAxMCkpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBUaGlzIHNjcmlwdCBpcyBjb21wYXRpYmxlIHdpdGggV2luZG93cyA3IGFuZCAxMCBvbmx5LiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtT1NWZXJzaW9uIHsNCg0KICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0gYA0KICAgICAgICAgICAgICAgICAgICAgICAgIC1GaWx0ZXIgJ1Byb2R1Y3RUeXBlID0gMScgLUVycm9yQWN0aW9uIFN0b3AgfCBgDQogICAgICAgICAgICAgICBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBWZXJzaW9uDQp9DQoNCmZ1bmN0aW9uIFdyaXRlLVN0YXR1c01lc3NhZ2UgKFtwc29iamVjdF0kTWVzc2FnZSkgew0KICAgICRleGNlcHRpb25NZXNzYWdlID0gJE1lc3NhZ2UuVG9TdHJpbmcoKQ0KDQogICAgaWYgKCRNZXNzYWdlLkludm9jYXRpb25JbmZvLlNjcmlwdExpbmVOdW1iZXIpIHsNCiAgICAgICAgJHZlcnNpb24gPSBHZXQtU2NyaXB0VmVyc2lvbg0KICAgICAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkdmVyc2lvbikpIHsNCiAgICAgICAgICAgICRzY3JpcHRWZXJzaW9uID0gIlZlcnNpb246ICR2ZXJzaW9uLiAiDQogICAgICAgIH0NCg0KICAgICAgICAkZXJyb3JNZXNzYWdlTGluZSA9ICRzY3JpcHRWZXJzaW9uICsgIkxpbmUgJyQoJE1lc3NhZ2UuSW52b2NhdGlvbkluZm8uU2NyaXB0TGluZU51bWJlciknOiAiDQogICAgfQ0KDQogICAgJGhvc3QudWkuV3JpdGVFcnJvckxpbmUoJGVycm9yTWVzc2FnZUxpbmUgKyAkZXhjZXB0aW9uTWVzc2FnZSkNCn0NCg0KZnVuY3Rpb24gR2V0LVNjcmlwdFZlcnNpb24gew0KDQogICAgJHNjcmlwdENvbnRlbnQgPSBHZXQtQ29udGVudCAkTXlJbnZvY2F0aW9uLlNjcmlwdE5hbWUgfCBPdXQtU3RyaW5nDQogICAgaWYgKCRzY3JpcHRDb250ZW50IC1ub3RtYXRjaCAnPCNbXHJcbl17Mn0uU1lOT1BTSVNbXlwjXD5dKiguTk9URVNbXlwjXD5dKilcIz4nKSB7IHJldHVybiB9DQoNCiAgICAkaGVscEJsb2NrID0gJE1hdGNoZXNbMV0uU3BsaXQoW2Vudmlyb25tZW50XTo6TmV3TGluZSkNCg0KICAgIGZvcmVhY2ggKCRsaW5lIGluICRoZWxwQmxvY2spIHsNCiAgICAgICAgaWYgKCRsaW5lIC1tYXRjaCAnVmVyc2lvbjonKSB7DQogICAgICAgICAgICByZXR1cm4gJGxpbmUuU3BsaXQoJzonKVsxXS5TcGxpdCgnLScpWzBdLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgKFtzdHJpbmddJFZhbHVlKSB7DQogICAgcmV0dXJuIC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoKEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFZhbHVlKSkNCn0NCg0KZnVuY3Rpb24gRm9ybWF0LVN0cmluZ1ZhbHVlIChbc3RyaW5nXSRWYWx1ZSkgew0KICAgIHJldHVybiAkVmFsdWUuUmVwbGFjZSgnIicsICcnKS5SZXBsYWNlKCInIiwgJycpLlRyaW0oKQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSwgW2ludF0kTG93ZXJMaW1pdCwgW2ludF0kVXBwZXJMaW1pdCkgew0KICAgIFRlc3QtUGFyYW1Jc0ludGVnZXIgLVBhcmFtTmFtZSAkUGFyYW1OYW1lIC1QYXJhbVZhbHVlICRQYXJhbVZhbHVlDQogICAgJGludFZhbHVlID0gJFBhcmFtVmFsdWUgLWFzIFtpbnRdDQogICAgaWYgKCRpbnRWYWx1ZSAtbHQgJExvd2VyTGltaXQgLW9yICRpbnRWYWx1ZSAtZ3QgJFVwcGVyTGltaXQpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiBJdCBtdXN0IGJlIGJldHdlZW4gWyRMb3dlckxpbWl0LCAkVXBwZXJMaW1pdF0uICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtUGFyYW1Jc0ludGVnZXIgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgICRpbnRWYWx1ZSA9ICRQYXJhbVZhbHVlIC1hcyBbaW50XQ0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkUGFyYW1WYWx1ZSkgLW9yICRudWxsIC1lcSAkaW50VmFsdWUpIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLklucHV0KSBFcnJvciBpbiBwYXJhbWV0ZXIgJyRQYXJhbU5hbWUnLiAnJFBhcmFtVmFsdWUnIGlzIG5vdCBhbiBpbnRlZ2VyLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LUFscGhhbnVtZXJpY1BhcmFtZXRlciAoW3N0cmluZ10kUGFyYW1OYW1lLCBbc3RyaW5nXSRQYXJhbVZhbHVlKSB7DQogICAgaWYgKCRQYXJhbVZhbHVlIC1ub3RtYXRjaCAiXlthLXpBLVowLTldKyQiKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnB1dCkgRXJyb3IgaW4gcGFyYW1ldGVyICckUGFyYW1OYW1lJy4gSXQgaXMgbm90IGFuIGFscGhhbnVtZXJpYyBzdHJpbmcuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3RyaW5nTnVsbE9yRW1wdHkgKFtzdHJpbmddJFBhcmFtTmFtZSwgW3N0cmluZ10kUGFyYW1WYWx1ZSkgew0KICAgIGlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgoRm9ybWF0LVN0cmluZ1ZhbHVlIC1WYWx1ZSAkUGFyYW1WYWx1ZSkpKSB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnB1dCkgJyRQYXJhbU5hbWUnIGNhbm5vdCBiZSBlbXB0eSBub3IgbnVsbC4gIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gV2FpdC1SYW5kb21UaW1lIChbaW50XSRNYXhpbXVtRGVsYXlJblNlY29uZHMpIHsNCiAgICBpZiAoJE1heGltdW1EZWxheUluU2Vjb25kcyAtZ3QgMCkgew0KICAgICAgICAkc2Vjb25kcyA9IEdldC1SYW5kb20gLU1pbmltdW0gMCAtTWF4aW11bSAkTWF4aW11bURlbGF5SW5TZWNvbmRzDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRzZWNvbmRzDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAoW3N0cmluZ10kVmFsdWUsIFtzdHJpbmddJFNlcGFyYXRvcikgew0KICAgIFtzdHJpbmddJGZvcm1hdHRlZFN0cmluZyA9IEZvcm1hdC1TdHJpbmdWYWx1ZSAtVmFsdWUgJFZhbHVlDQogICAgJHZhbHVlTGlzdCA9ICRmb3JtYXR0ZWRTdHJpbmcuU3BsaXQoJFNlcGFyYXRvciwgW3N0cmluZ3NwbGl0b3B0aW9uc106OlJlbW92ZUVtcHR5RW50cmllcykNCiAgICBbc3RyaW5nW11dJHJlc3VsdCA9IEAoKQ0KDQogICAgaWYgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICR2YWx1ZUxpc3QpIHsgcmV0dXJuICRyZXN1bHQgfQ0KDQogICAgZm9yZWFjaCAoJHZhbHVlIGluICR2YWx1ZUxpc3QpIHsNCiAgICAgICAgJHJlc3VsdCArPSAkdmFsdWUuVHJpbSgpDQogICAgfQ0KDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCg0KZnVuY3Rpb24gVGVzdC1Db2xsZWN0aW9uTnVsbE9yRW1wdHkgKFtwc29iamVjdFtdXSRDb2xsZWN0aW9uKSB7DQogICAgcmV0dXJuICRudWxsIC1lcSAkQ29sbGVjdGlvbiAtb3IgKCRDb2xsZWN0aW9uIHwgTWVhc3VyZS1PYmplY3QpLkNvdW50IC1lcSAwDQp9DQoNCmZ1bmN0aW9uIFNldC1VUkxQYXJhbWV0ZXJzIChbc3RyaW5nXSRVUkwsIFtoYXNodGFibGVdJFBhcmFtZXRlcnMpIHsNCiAgICBBZGQtV2ViQXNzZW1ibHkNCg0KICAgIGlmICgkbnVsbCAtZXEgJFBhcmFtZXRlcnMgLW9yIGANCiAgICAgICAgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICRQYXJhbWV0ZXJzLlZhbHVlcykpIHsNCiAgICAgICAgcmV0dXJuICRVUkwNCiAgICB9DQoNCiAgICAkcGFyYW1ldHJpemVkVXJsID0gJFVSTA0KDQogICAgZm9yZWFjaCAoJHBhcmFtS2V5IGluICRQYXJhbWV0ZXJzLktleXMpIHsNCiAgICAgICAgJHBhcmFtVmFsdWUgPSBbd2ViLmh0dHB1dGlsaXR5XTo6VXJsRW5jb2RlKCRQYXJhbWV0ZXJzLiRwYXJhbUtleSkNCg0KICAgICAgICBpZiAoQ29uZmlybS1TdHJpbmdJc05vdEVtcHR5IC1WYWx1ZSAkcGFyYW1WYWx1ZSkgew0KICAgICAgICAgICAgaWYgKCRwYXJhbWV0cml6ZWRVcmwgLWVxICRVUkwpIHsgJHBhcmFtZXRyaXplZFVybCArPSAnPycgfQ0KICAgICAgICAgICAgZWxzZSB7ICRwYXJhbWV0cml6ZWRVcmwgKz0gJyYnIH0NCg0KICAgICAgICAgICAgJHBhcmFtZXRyaXplZFVybCArPSAiJHtwYXJhbUtleX09JHtwYXJhbVZhbHVlfSINCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkcGFyYW1ldHJpemVkVXJsDQp9DQoNCmZ1bmN0aW9uIEFkZC1XZWJBc3NlbWJseSB7DQoNCiAgICB0cnkgeyBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIHN5c3RlbS53ZWIgfQ0KICAgIGNhdGNoIHsgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkVudmlyb25tZW50KSBXZWIgYXNzZW1ibHkgbm90IGZvdW5kLiAiIH0NCn0NCg0KZnVuY3Rpb24gSW52b2tlLUFQSVJlcXVlc3QgKFtzdHJpbmddJFVSTCwgW2hhc2h0YWJsZV0kSGVhZGVycywgW3N0cmluZ10kTWV0aG9kLCBbc3RyaW5nXSRDb250ZW50VHlwZSwgW2ludF0kQ29udGVudExlbmd0aCA9IC0xKSB7DQogICAgdHJ5IHsNCiAgICAgICAgU2V0LVNlY3VyaXR5UHJvdG9jb2wNCg0KICAgICAgICAkd2ViUmVxdWVzdCA9IE5ldy1XZWJSZXF1ZXN0IC1VUkwgJFVSTCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUhlYWRlcnMgJEhlYWRlcnMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1NZXRob2QgJE1ldGhvZCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNvbnRlbnRUeXBlICRDb250ZW50VHlwZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUNvbnRlbnRMZW5ndGggJENvbnRlbnRMZW5ndGgNCg0KICAgICAgICAkcmVzcG9uc2UgPSBHZXQtV2ViUmVzcG9uc2UgLVJlcXVlc3QgJHdlYlJlcXVlc3QNCiAgICAgICAgJHJlc3BvbnNlU3RyZWFtID0gJHJlc3BvbnNlLkdldFJlc3BvbnNlU3RyZWFtKCkNCiAgICAgICAgJHN0cmVhbVJlYWRlciA9IE5ldy1PYmplY3QgLVR5cGVOYW1lICdpby5zdHJlYW1yZWFkZXInIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUFyZ3VtZW50TGlzdCAkcmVzcG9uc2VTdHJlYW0NCg0KICAgICAgICByZXR1cm4gJHN0cmVhbVJlYWRlci5SZWFkVG9FbmQoKQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuSW50ZXJuYWwpIEZhaWxlZCB0byBtYWtlICckTWV0aG9kJyBBUEkgcmVxdWVzdC4gIg0KICAgIH0gZmluYWxseSB7DQogICAgICAgIGlmICgkbnVsbCAtbmUgJHN0cmVhbVJlYWRlcikgew0KICAgICAgICAgICAgJHN0cmVhbVJlYWRlci5DbG9zZSgpDQogICAgICAgICAgICAkc3RyZWFtUmVhZGVyLkRpc3Bvc2UoKQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbnVsbCAtbmUgJHJlc3BvbnNlU3RyZWFtKSB7DQogICAgICAgICAgICAkcmVzcG9uc2VTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgJHJlc3BvbnNlU3RyZWFtLkRpc3Bvc2UoKQ0KICAgICAgICB9DQogICAgICAgIGlmICgkbnVsbCAtbmUgJHJlc3BvbnNlKSB7ICRyZXNwb25zZS5DbG9zZSgpIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFNldC1TZWN1cml0eVByb3RvY29sIHsNCg0KICAgIFtuZXQuc2VydmljZXBvaW50bWFuYWdlcl06OlNlY3VyaXR5UHJvdG9jb2wgPSBbZW51bV06OlRvT2JqZWN0KFtuZXQuc2VjdXJpdHlwcm90b2NvbHR5cGVdLCAkVExTXzEyKQ0KfQ0KDQpmdW5jdGlvbiBOZXctV2ViUmVxdWVzdCAoW3N0cmluZ10kVVJMLCBbaGFzaHRhYmxlXSRIZWFkZXJzID0gJG51bGwsIFtzdHJpbmddJE1ldGhvZCA9ICdHRVQnLCBbc3RyaW5nXSRDb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi90ZXh0JywgW2ludF0kQ29udGVudExlbmd0aCA9IC0xKSB7DQogICAgdHJ5IHsNCiAgICAgICAgJHdlYlJlcXVlc3QgPSBbbmV0LndlYnJlcXVlc3RdOjpDcmVhdGUoJFVSTCkNCiAgICAgICAgJHdlYlJlcXVlc3QuVGltZW91dCA9ICRXRUJfUkVRVUVTVF9USU1FT1VUX01JTExJU0VDT05EUw0KICAgICAgICAkd2ViUmVxdWVzdC5NZXRob2QgPSAkTWV0aG9kDQogICAgICAgICR3ZWJSZXF1ZXN0LkNvbnRlbnRUeXBlID0gJENvbnRlbnRUeXBlDQogICAgICAgIGlmICgkQ29udGVudExlbmd0aCAtZ3QgLTEgKSB7ICR3ZWJSZXF1ZXN0LkNvbnRlbnRMZW5ndGggPSAkQ29udGVudExlbmd0aCB9DQogICAgICAgICR3ZWJSZXF1ZXN0LlByb3h5LkNyZWRlbnRpYWxzID0gW25ldC5jcmVkZW50aWFsY2FjaGVdOjpEZWZhdWx0TmV0d29ya0NyZWRlbnRpYWxzDQogICAgICAgICR3ZWJSZXF1ZXN0LlVzZXJBZ2VudCA9ICRERUZBVUxUX1VTRVJfQUdFTlQNCg0KICAgICAgICBTZXQtV2ViUmVxdWVzdEhlYWRlcnMgLVdlYlJlcXVlc3QgJHdlYlJlcXVlc3QgLUhlYWRlcnMgJEhlYWRlcnMNCg0KICAgICAgICByZXR1cm4gJHdlYlJlcXVlc3QNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIiQoJEVSUk9SX0VYQ0VQVElPTl9UWVBFLkludGVybmFsKSBVbmFibGUgdG8gY3JlYXRlIGEgbmV3IHdlYiByZXF1ZXN0IGZvciAnJFVSTCcuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFNldC1XZWJSZXF1ZXN0SGVhZGVycyAoW25ldC53ZWJyZXF1ZXN0XSRXZWJSZXF1ZXN0LCBbaGFzaHRhYmxlXSRIZWFkZXJzKSB7DQogICAgaWYgKCRudWxsIC1lcSAkSGVhZGVycyAtb3IgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5ICRIZWFkZXJzLktleXMpKSB7IHJldHVybiB9DQoNCiAgICBmb3JlYWNoICgkaGVhZGVyTmFtZSBpbiAkSGVhZGVycy5LZXlzKSB7DQogICAgICAgICRXZWJSZXF1ZXN0LkhlYWRlcnMuU2V0KCRoZWFkZXJOYW1lLCAkSGVhZGVycy4kaGVhZGVyTmFtZSkNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1XZWJSZXNwb25zZSAoW3Bzb2JqZWN0XSRSZXF1ZXN0KSB7DQogICAgcmV0dXJuICRSZXF1ZXN0LkdldFJlc3BvbnNlKCkNCn0NCg0KZnVuY3Rpb24gQ29udmVydC1Kc29uU3RyaW5nVG9PYmplY3QgKFtzdHJpbmddJEpzb25TdHJpbmcpIHsNCiAgICBBZGQtV2ViRXh0ZW5zaW9ucw0KDQogICAgdHJ5IHsNCiAgICAgICAgJGpzb24gPSBOZXctT2JqZWN0IHdlYi5zY3JpcHQuc2VyaWFsaXphdGlvbi5qYXZhc2NyaXB0c2VyaWFsaXplcg0KICAgICAgICByZXR1cm4gJGpzb24uRGVzZXJpYWxpemVPYmplY3QoJEpzb25TdHJpbmcpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgSW1wb3NzaWJsZSB0byBsb2FkIEpTT04gY29udGVudCAnJFBhdGgnLiAiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBBZGQtV2ViRXh0ZW5zaW9ucyB7DQoNCiAgICB0cnkgeyBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIHN5c3RlbS53ZWIuZXh0ZW5zaW9ucyB9DQogICAgY2F0Y2ggeyB0aHJvdyAiJCgkRVJST1JfRVhDRVBUSU9OX1RZUEUuRW52aXJvbm1lbnQpIFdlYiBleHRlbnNpb25zIG5vdCBmb3VuZC4gIiB9DQp9DQoNCmZ1bmN0aW9uIEZvcm1hdC1EYXRlIChbc3RyaW5nXSREYXRlU3RyaW5nLCBbc3RyaW5nXSREYXRlRm9ybWF0KSB7DQogICAgdHJ5IHsNCiAgICAgICAgcmV0dXJuIChbZGF0ZXRpbWVdOjpQYXJzZUV4YWN0KCREYXRlU3RyaW5nLCAkRGF0ZUZvcm1hdCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtnbG9iYWxpemF0aW9uLmN1bHR1cmVpbmZvXTo6SW52YXJpYW50Q3VsdHVyZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtnbG9iYWxpemF0aW9uLmRhdGV0aW1lc3R5bGVzXTo6Tm9uZSkpDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICIkKCRFUlJPUl9FWENFUFRJT05fVFlQRS5JbnRlcm5hbCkgJyREYXRlRm9ybWF0JyBpcyBhbiBpbnZhbGlkIGRhdGUgZm9ybWF0IGZvciAnJERhdGVTdHJpbmcnIGlucHV0IGRhdGUuICINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFRlc3QtU3VwcG9ydGVkVmVuZG9yIHsNCiAgICAkZGV2aWNlVmVuZG9yID0gKEdldC1EZXZpY2VEYXRhKS5NYW51ZmFjdHVyZXINCiAgICAkc3VwcG9ydGVkVmVuZG9yTWF0Y2ggPSBHZXQtU3VwcG9ydGVkVmVuZG9yTmFtZSAtVmVuZG9yICRkZXZpY2VWZW5kb3INCg0KICAgIGlmIChDb25maXJtLVN0cmluZ0lzTm90RW1wdHkgLVZhbHVlICRzdXBwb3J0ZWRWZW5kb3JNYXRjaCkgeyByZXR1cm4gfQ0KDQogICAgJHN1cHBvcnRlZFZlbmRvcnNKb2luZWQgPSAkU1VQUE9SVEVEX1ZFTkRPUlMgLWpvaW4gJywnDQogICAgdGhyb3cgIlVuc3VwcG9ydGVkIHZlbmRvciAnJGRldmljZVZlbmRvcicuIFN1cHBvcnRlZCB2ZW5kb3JzIGFyZTogJHN1cHBvcnRlZFZlbmRvcnNKb2luZWQuICINCn0NCg0KZnVuY3Rpb24gR2V0LURldmljZURhdGEgew0KICAgIHRyeSB7DQogICAgICAgIHJldHVybiBHZXQtV21pT2JqZWN0IC1DbGFzcyAnV2luMzJfQmlvcycNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgJ0NvdWxkIG5vdCBvYnRhaW4gZGV2aWNlIGRhdGEgZnJvbSBCSU9TIFdNSSBjbGFzcy4gJw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVN1cHBvcnRlZFZlbmRvck5hbWUgKFtzdHJpbmddJFZlbmRvcikgew0KICAgIGZvcmVhY2ggKCRzdXBwb3J0ZWRWZW5kb3IgaW4gJFNVUFBPUlRFRF9WRU5ET1JTKSB7DQogICAgICAgIGlmICgkVmVuZG9yIC1tYXRjaCAkc3VwcG9ydGVkVmVuZG9yKSB7IHJldHVybiAkc3VwcG9ydGVkVmVuZG9yIH0NCiAgICB9DQp9DQoNCiMNCiMgSW5wdXQgcGFyYW1ldGVyIHZhbGlkYXRpb24NCiMNCmZ1bmN0aW9uIFRlc3QtSW5wdXRQYXJhbWV0ZXJzIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMpIHsNCiAgICBUZXN0LVBhcmFtSW5BbGxvd2VkUmFuZ2UgLVBhcmFtTmFtZSAnTWF4aW11bURlbGF5SW5TZWNvbmRzJyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1QYXJhbVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuTWF4aW11bURlbGF5SW5TZWNvbmRzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUxvd2VyTGltaXQgMCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1VcHBlckxpbWl0ICRNQVhfU0NSSVBUX0RFTEFZX1NFQw0KICAgIFRlc3QtSW5wdXRQYXJhbWV0ZXJzQnlWZW5kb3IgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzDQp9DQoNCmZ1bmN0aW9uIFRlc3QtSW5wdXRQYXJhbWV0ZXJzQnlWZW5kb3IgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRkZXZpY2VWZW5kb3IgPSAoR2V0LURldmljZURhdGEpLk1hbnVmYWN0dXJlcg0KICAgICRzdXBwb3J0ZWRWZW5kb3JNYXRjaCA9IEdldC1TdXBwb3J0ZWRWZW5kb3JOYW1lIC1WZW5kb3IgJGRldmljZVZlbmRvcg0KDQogICAgc3dpdGNoICgkc3VwcG9ydGVkVmVuZG9yTWF0Y2gpIHsNCiAgICAgICAgJ0RlbGwnIHsNCiAgICBUZXN0LUFscGhhbnVtZXJpY1BhcmFtZXRlciAtUGFyYW1OYW1lICdEZWxsQ2xpZW50SUQnIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkRlbGxDbGllbnRJRA0KICAgIFRlc3QtQWxwaGFudW1lcmljUGFyYW1ldGVyIC1QYXJhbU5hbWUgJ0RlbGxDbGllbnRTZWNyZXQnIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkRlbGxDbGllbnRTZWNyZXQNCn0NCiAgICAgICAgJ0xlbm92bycgew0KICAgICAgICAgICAgVGVzdC1TdHJpbmdOdWxsT3JFbXB0eSAtUGFyYW1OYW1lICdMZW5vdm9DbGllbnRUb2tlbicgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkxlbm92b0NsaWVudFRva2VuDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIFVwZGF0ZS1PdXRwdXREYXRhIChbaGFzaHRhYmxlXSRJbnB1dFBhcmFtZXRlcnMsIFtoYXNodGFibGVdJE91dHB1dERhdGEpIHsNCiAgICAkd2FycmFudHlEYXRhID0gR2V0LVdhcnJhbnR5RGF0YSAtSW5wdXRQYXJhbWV0ZXJzICRJbnB1dFBhcmFtZXRlcnMNCg0KICAgICRPdXRwdXREYXRhLlB1cmNoYXNlT3JTaGlwRGF0ZSA9ICgkd2FycmFudHlEYXRhLlB1cmNoYXNlT3JTaGlwRGF0ZSkuVG9TdHJpbmcoJERBVEVfU1RSSU5HX0ZPUk1BVCkNCiAgICAkT3V0cHV0RGF0YS5EZXZpY2VXYXJyYW50eUVuZERhdGUgPSAoJHdhcnJhbnR5RGF0YS5EZXZpY2VXYXJyYW50eUVuZERhdGUpLlRvU3RyaW5nKCREQVRFX1NUUklOR19GT1JNQVQpDQogICAgJE91dHB1dERhdGEuQmF0dGVyeVdhcnJhbnR5RW5kRGF0ZSA9ICgkd2FycmFudHlEYXRhLkJhdHRlcnlXYXJyYW50eUVuZERhdGUpLlRvU3RyaW5nKCREQVRFX1NUUklOR19GT1JNQVQpDQoNCiAgICAkT3V0cHV0RGF0YS5EYXlzQmVmb3JlRGV2aWNlV2FycmFudHlFbmRzID0gR2V0LVdhcnJhbnR5RGF5c0xlZnQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVdhcnJhbnR5RW5kRGF0ZSAkd2FycmFudHlEYXRhLkRldmljZVdhcnJhbnR5RW5kRGF0ZQ0KICAgICRPdXRwdXREYXRhLkRldmljZVdhcnJhbnR5RXhwaXJlZCA9IFRlc3QtV2FycmFudHlFeHBpcmVkIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVdhcnJhbnR5RW5kRGF0ZSAkd2FycmFudHlEYXRhLkRldmljZVdhcnJhbnR5RW5kRGF0ZQ0KDQogICAgJE91dHB1dERhdGEuRGF5c0JlZm9yZUJhdHRlcnlXYXJyYW50eUVuZHMgPSBHZXQtV2FycmFudHlEYXlzTGVmdCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVdhcnJhbnR5RW5kRGF0ZSAkd2FycmFudHlEYXRhLkJhdHRlcnlXYXJyYW50eUVuZERhdGUNCiAgICAkT3V0cHV0RGF0YS5CYXR0ZXJ5V2FycmFudHlFeHBpcmVkID0gVGVzdC1XYXJyYW50eUV4cGlyZWQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtV2FycmFudHlFbmREYXRlICR3YXJyYW50eURhdGEuQmF0dGVyeVdhcnJhbnR5RW5kRGF0ZQ0KICAgICRPdXRwdXREYXRhLkRldmljZUFnZUluWWVhcnMgPSBHZXQtRGV2aWNlQWdlSW5ZZWFycyAtUHVyY2hhc2VPclNoaXBEYXRlICR3YXJyYW50eURhdGEuUHVyY2hhc2VPclNoaXBEYXRlDQp9DQoNCmZ1bmN0aW9uIEdldC1XYXJyYW50eURhdGEgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycykgew0KICAgICRkZXZpY2VEYXRhID0gR2V0LURldmljZURhdGENCiAgICAkd2FycmFudHlEYXRhID0gQHt9DQoNCiAgICAkc3VwcG9ydGVkVmVuZG9yTWF0Y2ggPSBHZXQtU3VwcG9ydGVkVmVuZG9yTmFtZSAtVmVuZG9yICRkZXZpY2VEYXRhLk1hbnVmYWN0dXJlcg0KDQogICAgV2FpdC1SYW5kb21UaW1lIC1NYXhpbXVtRGVsYXlJblNlY29uZHMgJElucHV0UGFyYW1ldGVycy5NYXhpbXVtRGVsYXlJblNlY29uZHMNCg0KICAgIHN3aXRjaCAoJHN1cHBvcnRlZFZlbmRvck1hdGNoKSB7DQogICAgICAgICdEZWxsJyB7DQogICAgICAgICAgICAkd2FycmFudHlEYXRhID0gR2V0LURlbGxXYXJyYW50eURhdGEgLUlucHV0UGFyYW1ldGVycyAkSW5wdXRQYXJhbWV0ZXJzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtU2VyaWFsTnVtYmVyICRkZXZpY2VEYXRhLlNlcmlhbE51bWJlcg0KICAgICAgICB9DQogICAgICAgICdMZW5vdm8nIHsNCiAgICAgICAgICAgICR3YXJyYW50eURhdGEgPSBHZXQtTGVub3ZvV2FycmFudHlEYXRhIC1JbnB1dFBhcmFtZXRlcnMgJElucHV0UGFyYW1ldGVycyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtU2VyaWFsTnVtYmVyICRkZXZpY2VEYXRhLlNlcmlhbE51bWJlcg0KICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJHdhcnJhbnR5RGF0YQ0KfQ0KDQojDQojIERFTEwgQVBJIGRhdGEgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gR2V0LURlbGxXYXJyYW50eURhdGEgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycywgW3N0cmluZ10kU2VyaWFsTnVtYmVyKSB7DQogICAgJHdhcnJhbnR5RGF0YVJhdyA9IEdldC1EZWxsV2FycmFudHlEYXRhRnJvbUFQSSAtRGVsbENsaWVudElEICRJbnB1dFBhcmFtZXRlcnMuRGVsbENsaWVudElEIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1EZWxsQ2xpZW50U2VjcmV0ICRJbnB1dFBhcmFtZXRlcnMuRGVsbENsaWVudFNlY3JldCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtU2VyaWFsTnVtYmVyICRTZXJpYWxOdW1iZXINCg0KICAgICRkZXZpY2VQcm9kdWN0Q29kZXMgPSBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5EZWxsRGV2aWNlV2FycmFudHlJdGVtTnVtYmVycyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1TZXBhcmF0b3IgJywnDQoNCiAgICAkYmF0dGVyeVByb2R1Y3RDb2RlcyA9IFNwbGl0LVNlcGFyYXRlZFZhbHVlIC1WYWx1ZSAkSW5wdXRQYXJhbWV0ZXJzLkRlbGxCYXR0ZXJ5V2FycmFudHlJdGVtTnVtYmVycyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtU2VwYXJhdG9yICcsJw0KDQogICAgcmV0dXJuIEdldC1EZWxsV2FycmFudHlEYXRhRm9ybWF0dGVkIC1EZXZpY2VQcm9kdWN0Q29kZXMgJGRldmljZVByb2R1Y3RDb2RlcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1CYXR0ZXJ5UHJvZHVjdENvZGVzICRiYXR0ZXJ5UHJvZHVjdENvZGVzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVdhcnJhbnR5RGF0YSAkd2FycmFudHlEYXRhUmF3DQp9DQoNCmZ1bmN0aW9uIEdldC1EZWxsV2FycmFudHlEYXRhRnJvbUFQSSAoW3N0cmluZ10kRGVsbENsaWVudElELCBbc3RyaW5nXSREZWxsQ2xpZW50U2VjcmV0LCBbc3RyaW5nXSRTZXJpYWxOdW1iZXIpIHsNCiAgICAkdG9rZW4gPSBHZXQtRGVsbEFQSU9BdXRoVG9rZW4gLUNsaWVudElEICREZWxsQ2xpZW50SUQgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ2xpZW50U2VjcmV0ICREZWxsQ2xpZW50U2VjcmV0DQoNCiAgICAkaGVhZGVycyA9IEB7QXV0aG9yaXphdGlvbiA9ICJCZWFyZXIgJHRva2VuIn0NCiAgICAkdXJsUGFyYW1ldGVycyA9IEB7c2VydmljZXRhZ3MgPSAkU2VyaWFsTnVtYmVyfQ0KICAgICRwYXJhbWV0cml6ZWRVcmwgPSBTZXQtVVJMUGFyYW1ldGVycyAtVVJMICRERUxMX0FQSV9BU1NFVF9VUkwgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1ldGVycyAkdXJsUGFyYW1ldGVycw0KDQogICAgJHJlc3BvbnNlID0gIEludm9rZS1BUElSZXF1ZXN0IC1VUkwgJHBhcmFtZXRyaXplZFVybCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1IZWFkZXJzICRoZWFkZXJzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU1ldGhvZCAnR0VUJyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Db250ZW50VHlwZSAnYXBwbGljYXRpb24vanNvbicNCg0KICAgIHJldHVybiBDb252ZXJ0LUpzb25TdHJpbmdUb09iamVjdCAtSnNvblN0cmluZyAkcmVzcG9uc2UNCn0NCg0KZnVuY3Rpb24gR2V0LURlbGxBUElPQXV0aFRva2VuIChbc3RyaW5nXSRDbGllbnRJRCwgW3N0cmluZ10kQ2xpZW50U2VjcmV0KSB7DQogICAgJHVybFBhcmFtZXRlcnMgPSBAe2NsaWVudF9pZCA9ICRDbGllbnRJRA0KICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0ID0gJENsaWVudFNlY3JldA0KICAgICAgICAgICAgICAgICAgICAgICBncmFudF90eXBlID0gJ2NsaWVudF9jcmVkZW50aWFscyd9DQoNCiAgICAkcGFyYW1ldHJpemVkVXJsID0gU2V0LVVSTFBhcmFtZXRlcnMgLVVSTCAkREVMTF9BUElfQVVUSEVOVElDQVRJT05fVVJMIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVBhcmFtZXRlcnMgJHVybFBhcmFtZXRlcnMNCg0KICAgICRyZXNwb25zZSA9IEludm9rZS1BUElSZXF1ZXN0IC1VUkwgJHBhcmFtZXRyaXplZFVybCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUhlYWRlcnMgJG51bGwgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1NZXRob2QgJ1BPU1QnIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ29udGVudFR5cGUgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcNCiAgICAkanNvbkRhdGEgPSBDb252ZXJ0LUpzb25TdHJpbmdUb09iamVjdCAtSnNvblN0cmluZyAkcmVzcG9uc2UNCiAgICByZXR1cm4gJGpzb25EYXRhLmFjY2Vzc190b2tlbg0KfQ0KDQpmdW5jdGlvbiBHZXQtRGVsbFdhcnJhbnR5RGF0YUZvcm1hdHRlZCAoW2FycmF5XSREZXZpY2VQcm9kdWN0Q29kZXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FycmF5XSRCYXR0ZXJ5UHJvZHVjdENvZGVzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtoYXNodGFibGVdJFdhcnJhbnR5RGF0YSkgew0KICAgICRkZXZpY2VFbnRpdGxlbWVudHMgPSBAKEdldC1Qcm9kdWN0c0ZpbHRlcmVkQnlDb2RlIC1Qcm9kdWN0cyAkV2FycmFudHlEYXRhLmVudGl0bGVtZW50cyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb2R1Y3RDb2Rlc0ZpbHRlckxpc3QgJERldmljZVByb2R1Y3RDb2RlcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb2R1Y3RDb2RlRmllbGROYW1lICRERUxMX1BST0RVQ1RfQ09ERV9GSUVMRF9OQU1FKQ0KDQogICAgJGJhdHRlcnlFbnRpdGxlbWVudHMgPSBAKEdldC1Qcm9kdWN0c0ZpbHRlcmVkQnlDb2RlIC1Qcm9kdWN0cyAkV2FycmFudHlEYXRhLmVudGl0bGVtZW50cyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Qcm9kdWN0Q29kZXNGaWx0ZXJMaXN0ICRCYXR0ZXJ5UHJvZHVjdENvZGVzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb2R1Y3RDb2RlRmllbGROYW1lICRERUxMX1BST0RVQ1RfQ09ERV9GSUVMRF9OQU1FKQ0KDQogICAgcmV0dXJuIEB7UHVyY2hhc2VPclNoaXBEYXRlID0gRm9ybWF0LVdhcnJhbnR5RGF0ZSAtV2FycmFudHlEYXRlICRXYXJyYW50eURhdGEuc2hpcERhdGUNCiAgICAgICAgICAgICBEZXZpY2VXYXJyYW50eUVuZERhdGUgPSBHZXQtUHJvZHVjdExhdGVzdFdhcnJhbnR5RW5kRGF0ZSAtUHJvZHVjdHMgJGRldmljZUVudGl0bGVtZW50cyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVuZERhdGVGaWVsZE5hbWUgJERFTExfUFJPRFVDVF9FTkRfREFURV9GSUVMRF9OQU1FDQogICAgICAgICAgICAgQmF0dGVyeVdhcnJhbnR5RW5kRGF0ZSA9IEdldC1Qcm9kdWN0TGF0ZXN0V2FycmFudHlFbmREYXRlIC1Qcm9kdWN0cyAkYmF0dGVyeUVudGl0bGVtZW50cyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1FbmREYXRlRmllbGROYW1lICRERUxMX1BST0RVQ1RfRU5EX0RBVEVfRklFTERfTkFNRX0NCn0NCg0KZnVuY3Rpb24gR2V0LVByb2R1Y3RzRmlsdGVyZWRCeUNvZGUgKFthcnJheV0kUHJvZHVjdHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FycmF5XSRQcm9kdWN0Q29kZXNGaWx0ZXJMaXN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdHJpbmddJFByb2R1Y3RDb2RlRmllbGROYW1lKSB7DQogICAgaWYgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICRQcm9kdWN0cykgew0KICAgICAgICB0aHJvdyAnQ291bGQgbm90IGdldCB3YXJyYW50eSBlbnRpdGxlbWVudHMgbGlzdC4gVGhlIHByb2R1Y3RzIGxpc3QgcmVjZWl2ZWQgd2FzIGVtcHR5LiAnDQogICAgfQ0KDQogICAgaWYgKFRlc3QtQ29sbGVjdGlvbk51bGxPckVtcHR5IC1Db2xsZWN0aW9uICRQcm9kdWN0Q29kZXNGaWx0ZXJMaXN0KSB7IHJldHVybiAkUHJvZHVjdHMgfQ0KDQogICAgJGZpbHRlcmVkUHJvZHVjdHMgPSBAKCRQcm9kdWN0cyB8IFdoZXJlLU9iamVjdCB7ICRQcm9kdWN0Q29kZXNGaWx0ZXJMaXN0IC1jb250YWlucyAkXy4kUHJvZHVjdENvZGVGaWVsZE5hbWUgfSkNCg0KICAgIGlmIChUZXN0LUNvbGxlY3Rpb25OdWxsT3JFbXB0eSAtQ29sbGVjdGlvbiAkZmlsdGVyZWRQcm9kdWN0cykgew0KICAgICAgICAkZmlsdGVyTGlzdFN0cmluZyA9ICRQcm9kdWN0Q29kZXNGaWx0ZXJMaXN0IC1qb2luICcsJw0KICAgICAgICBXcml0ZS1TdGF0dXNNZXNzYWdlICJObyBlbnRpdGxlbWVudHMgZm91bmQgbWF0Y2hpbmcgcHJvZHVjdCBjb2RlKHMpOiAnJGZpbHRlckxpc3RTdHJpbmcnLiAiDQogICAgfQ0KDQogICAgcmV0dXJuICRmaWx0ZXJlZFByb2R1Y3RzDQp9DQoNCiMNCiMgTGVub3ZvIEFQSSBkYXRhIG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIEdldC1MZW5vdm9XYXJyYW50eURhdGEgKFtoYXNodGFibGVdJElucHV0UGFyYW1ldGVycywgW3N0cmluZ10kU2VyaWFsTnVtYmVyKSB7DQogICAgJHdhcnJhbnR5RGF0YVJhdyA9IEdldC1MZW5vdm9XYXJyYW50eURhdGFGcm9tQVBJIC1MZW5vdm9DbGllbnRUb2tlbiAkSW5wdXRQYXJhbWV0ZXJzLkxlbm92b0NsaWVudFRva2VuIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVNlcmlhbE51bWJlciAkU2VyaWFsTnVtYmVyDQoNCiAgICAkZGV2aWNlUHJvZHVjdENvZGVzID0gU3BsaXQtU2VwYXJhdGVkVmFsdWUgLVZhbHVlICRJbnB1dFBhcmFtZXRlcnMuTGVub3ZvRGV2aWNlV2FycmFudHlQcm9kdWN0Q29kZXMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtU2VwYXJhdG9yICcsJw0KDQogICAgJGJhdHRlcnlQcm9kdWN0Q29kZXMgPSBTcGxpdC1TZXBhcmF0ZWRWYWx1ZSAtVmFsdWUgJElucHV0UGFyYW1ldGVycy5MZW5vdm9CYXR0ZXJ5V2FycmFudHlQcm9kdWN0Q29kZXMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVNlcGFyYXRvciAnLCcNCg0KICAgIHJldHVybiBHZXQtTGVub3ZvV2FycmFudHlEYXRhRm9ybWF0dGVkIC1EZXZpY2VQcm9kdWN0Q29kZXMgJGRldmljZVByb2R1Y3RDb2RlcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUJhdHRlcnlQcm9kdWN0Q29kZXMgJGJhdHRlcnlQcm9kdWN0Q29kZXMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1XYXJyYW50eURhdGEgJHdhcnJhbnR5RGF0YVJhdw0KICAgIH0NCg0KZnVuY3Rpb24gR2V0LUxlbm92b1dhcnJhbnR5RGF0YUZyb21BUEkgKFtzdHJpbmddJExlbm92b0NsaWVudFRva2VuLCBbc3RyaW5nXSRTZXJpYWxOdW1iZXIpIHsNCiAgICAkaGVhZGVycyA9IEB7J0NsaWVudElEJyA9ICRMZW5vdm9DbGllbnRUb2tlbn0NCiAgICAkdXJsUGFyYW1ldGVycyA9IEB7U2VyaWFsID0gJFNlcmlhbE51bWJlcn0NCiAgICAkcGFyYW1ldHJpemVkVXJsID0gU2V0LVVSTFBhcmFtZXRlcnMgLVVSTCAkTEVOT1ZPX0FQSV9VUkwgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUGFyYW1ldGVycyAkdXJsUGFyYW1ldGVycw0KDQogICAgJHJlc3BvbnNlID0gIEludm9rZS1BUElSZXF1ZXN0IC1VUkwgJHBhcmFtZXRyaXplZFVybCBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1IZWFkZXJzICRoZWFkZXJzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLU1ldGhvZCAnUE9TVCcgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ29udGVudFR5cGUgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtQ29udGVudExlbmd0aCAwDQoNCiAgICByZXR1cm4gQ29udmVydC1Kc29uU3RyaW5nVG9PYmplY3QgLUpzb25TdHJpbmcgJHJlc3BvbnNlDQp9DQoNCmZ1bmN0aW9uIEdldC1MZW5vdm9XYXJyYW50eURhdGFGb3JtYXR0ZWQgKFthcnJheV0kRGV2aWNlUHJvZHVjdENvZGVzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FycmF5XSRCYXR0ZXJ5UHJvZHVjdENvZGVzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2hhc2h0YWJsZV0kV2FycmFudHlEYXRhKSB7DQogICAgJGFsbEJhc2VFbnRpdGxlbWVudHMgPSAkV2FycmFudHlEYXRhLldhcnJhbnR5IHwgV2hlcmUtT2JqZWN0IHsgJF8uVHlwZSAtZXEgJExFTk9WT19CQVNFX1BST0RVQ1RfVFlQRV9WQUxVRSB9DQoNCiAgICAkZGV2aWNlRW50aXRsZW1lbnRzID0gR2V0LVByb2R1Y3RzRmlsdGVyZWRCeUNvZGUgLVByb2R1Y3RzICRhbGxCYXNlRW50aXRsZW1lbnRzIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb2R1Y3RDb2Rlc0ZpbHRlckxpc3QgJERldmljZVByb2R1Y3RDb2RlcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1Qcm9kdWN0Q29kZUZpZWxkTmFtZSAkTEVOT1ZPX1BST0RVQ1RfQ09ERV9GSUVMRF9OQU1FDQoNCiAgICAkYmF0dGVyeUVudGl0bGVtZW50cyA9IEdldC1Qcm9kdWN0c0ZpbHRlcmVkQnlDb2RlIC1Qcm9kdWN0cyAkYWxsQmFzZUVudGl0bGVtZW50cyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUHJvZHVjdENvZGVzRmlsdGVyTGlzdCAkQmF0dGVyeVByb2R1Y3RDb2RlcyBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUHJvZHVjdENvZGVGaWVsZE5hbWUgJExFTk9WT19QUk9EVUNUX0NPREVfRklFTERfTkFNRQ0KDQogICAgcmV0dXJuIEB7UHVyY2hhc2VPclNoaXBEYXRlID0gRm9ybWF0LVdhcnJhbnR5RGF0ZSAtV2FycmFudHlEYXRlICRXYXJyYW50eURhdGEuU2hpcHBlZA0KICAgICAgICAgICAgIERldmljZVdhcnJhbnR5RW5kRGF0ZSA9IEdldC1Qcm9kdWN0TGF0ZXN0V2FycmFudHlFbmREYXRlIGANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVByb2R1Y3RzICRkZXZpY2VFbnRpdGxlbWVudHMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtRW5kRGF0ZUZpZWxkTmFtZSAkTEVOT1ZPX1BST0RVQ1RfRU5EX0RBVEVfRklFTERfTkFNRQ0KICAgICAgICAgICAgIEJhdHRlcnlXYXJyYW50eUVuZERhdGUgPSBHZXQtUHJvZHVjdExhdGVzdFdhcnJhbnR5RW5kRGF0ZSBgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtUHJvZHVjdHMgJGJhdHRlcnlFbnRpdGxlbWVudHMgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVuZERhdGVGaWVsZE5hbWUgJExFTk9WT19QUk9EVUNUX0VORF9EQVRFX0ZJRUxEX05BTUV9DQp9DQoNCiMNCiMgV2FycmFudHkgZGF0ZXMgbWFuYWdlbWVudA0KIw0KZnVuY3Rpb24gR2V0LVByb2R1Y3RMYXRlc3RXYXJyYW50eUVuZERhdGUgKFthcnJheV0kUHJvZHVjdHMsIFtzdHJpbmddJEVuZERhdGVGaWVsZE5hbWUpIHsNCiAgICAkd2FycmFudHlFbmREYXRlID0gJERFRkFVTFRfREFURQ0KDQogICAgZm9yZWFjaCAoJHByb2R1Y3QgaW4gJFByb2R1Y3RzKSB7DQogICAgICAgICRwcm9kdWN0RW5kRGF0ZSA9IEZvcm1hdC1XYXJyYW50eURhdGUgLVdhcnJhbnR5RGF0ZSAkcHJvZHVjdC4kRW5kRGF0ZUZpZWxkTmFtZQ0KICAgICAgICBpZiAoJHByb2R1Y3RFbmREYXRlIC1ndCAkd2FycmFudHlFbmREYXRlKSB7DQogICAgICAgICAgICAkd2FycmFudHlFbmREYXRlID0gJHByb2R1Y3RFbmREYXRlDQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJHdhcnJhbnR5RW5kRGF0ZQ0KfQ0KDQpmdW5jdGlvbiBGb3JtYXQtV2FycmFudHlEYXRlIChbc3RyaW5nXSRXYXJyYW50eURhdGUpIHsNCiAgICBpZiAoJFdhcnJhbnR5RGF0ZSAtbWF0Y2ggJEFQSV9HRU5FUklDX0RBVEVfU1RSVUNUVVJFX1JFR0VYKSB7DQogICAgICAgICRjbGVhbkRhdGVTdHJpbmcgPSAkTWF0Y2hlc1swXSAtcmVwbGFjZSAkTWF0Y2hlc1swXSwgIiQoJE1hdGNoZXNbMV0pWiINCiAgICAgICAgcmV0dXJuIEZvcm1hdC1EYXRlIC1EYXRlU3RyaW5nICRjbGVhbkRhdGVTdHJpbmcgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgLURhdGVGb3JtYXQgJEFQSV9HRU5FUklDX0RBVEVfRk9STUFUDQogICAgfQ0KDQogICAgdGhyb3cgIlVuZXhwZWN0ZWQgd2FycmFudHkgZGF0ZTogJyRXYXJyYW50eURhdGUnLiAiDQp9DQoNCmZ1bmN0aW9uIEdldC1XYXJyYW50eURheXNMZWZ0IChbZGF0ZXRpbWVdJFdhcnJhbnR5RW5kRGF0ZSkgew0KICAgICRkYXlzQmVmb3JlRXhwaXJhdGlvbiA9IChOZXctVGltZVNwYW4gLVN0YXJ0IChHZXQtRGF0ZSkgYA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLUVuZCAkV2FycmFudHlFbmREYXRlKS5EYXlzDQogICAgcmV0dXJuICQoaWYgKCRkYXlzQmVmb3JlRXhwaXJhdGlvbiAtZ3QgMCkgeyAkZGF5c0JlZm9yZUV4cGlyYXRpb24gfSBlbHNlIHsgMCB9KQ0KfQ0KDQpmdW5jdGlvbiBUZXN0LVdhcnJhbnR5RXhwaXJlZCAoW2RhdGV0aW1lXSRXYXJyYW50eUVuZERhdGUpIHsNCiAgICByZXR1cm4gKEdldC1XYXJyYW50eURheXNMZWZ0IC1XYXJyYW50eUVuZERhdGUgJFdhcnJhbnR5RW5kRGF0ZSkgLWxlIDANCn0NCg0KZnVuY3Rpb24gR2V0LURldmljZUFnZUluWWVhcnMgKFtkYXRldGltZV0kUHVyY2hhc2VPclNoaXBEYXRlKSB7DQogICAgcmV0dXJuIFttYXRoXTo6VHJ1bmNhdGUoKE5ldy1UaW1lU3BhbiAtU3RhcnQgJFB1cmNoYXNlT3JTaGlwRGF0ZSAtRW5kIChHZXQtRGF0ZSkpLkRheXMgLyAzNjUpDQp9DQoNCiMNCiMgTmV4dGhpbmsgT3V0cHV0IG1hbmFnZW1lbnQNCiMNCmZ1bmN0aW9uIFVwZGF0ZS1FbmdpbmVPdXRwdXRWYXJpYWJsZXMgKFtoYXNodGFibGVdJE91dHB1dERhdGEpIHsNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmcoJ1B1cmNoYXNlT3JTaGlwRGF0ZScsICRPdXRwdXREYXRhLlB1cmNoYXNlT3JTaGlwRGF0ZSkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmcoJ0RldmljZVdhcnJhbnR5RW5kRGF0ZScsICRPdXRwdXREYXRhLkRldmljZVdhcnJhbnR5RW5kRGF0ZSkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRVSW50MzIoJ0RheXNCZWZvcmVEZXZpY2VXYXJyYW50eUVuZHMnLCAkT3V0cHV0RGF0YS5EYXlzQmVmb3JlRGV2aWNlV2FycmFudHlFbmRzKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dEJvb2woJ0RldmljZVdhcnJhbnR5RXhwaXJlZCcsICRPdXRwdXREYXRhLkRldmljZVdhcnJhbnR5RXhwaXJlZCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRTdHJpbmcoJ0JhdHRlcnlXYXJyYW50eUVuZERhdGUnLCAkT3V0cHV0RGF0YS5CYXR0ZXJ5V2FycmFudHlFbmREYXRlKQ0KICAgIFtueHRdOjpXcml0ZU91dHB1dFVJbnQzMignRGF5c0JlZm9yZUJhdHRlcnlXYXJyYW50eUVuZHMnLCAkT3V0cHV0RGF0YS5EYXlzQmVmb3JlQmF0dGVyeVdhcnJhbnR5RW5kcykNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRCb29sKCdCYXR0ZXJ5V2FycmFudHlFeHBpcmVkJywgJE91dHB1dERhdGEuQmF0dGVyeVdhcnJhbnR5RXhwaXJlZCkNCiAgICBbbnh0XTo6V3JpdGVPdXRwdXRVSW50MzIoJ0RldmljZUFnZUluWWVhcnMnLCAkT3V0cHV0RGF0YS5EZXZpY2VBZ2VJblllYXJzKQ0KfQ0KDQojDQojIE1haW4gc2NyaXB0IGZsb3cNCiMNCltlbnZpcm9ubWVudF06OkV4aXQoKEludm9rZS1NYWluIC1JbnB1dFBhcmFtZXRlcnMgJE15SW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnMpKQ0KIyBTSUcgIyBCZWdpbiBzaWduYXR1cmUgYmxvY2sNCiMgTUlJbXpnWUpLb1pJaHZjTkFRY0NvSUltdnpDQ0pyc0NBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBREI1Qmdvcg0KIyBCZ0VFQVlJM0FnRUVvR3N3YVRBMEJnb3JCZ0VFQVlJM0FnRWVNQ1lDQXdFQUFBUVFIOHc3WUZsTENFNjNKTkxHDQojIEtYN3pVUUlCQUFJQkFBSUJBQUlCQUFJQkFEQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDQ0dtYlhDZnVFTzlmMHANCiMgS0RiNUJvRE5JOW1QK0c5SGVybGhXcjBoenhLeVJLQ0NFVHN3Z2dQRk1JSUNyYUFEQWdFQ0FoQUNyRndtYWd0QQ0KIyBtNDhMZWZLdVJpVjNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Hd3hDekFKQmdOVkJBWVRBbFZUTVJVd0V3WURWUVFLDQojIEV3eEVhV2RwUTJWeWRDQkpibU14R1RBWEJnTlZCQXNURUhkM2R5NWthV2RwWTJWeWRDNWpiMjB4S3pBcEJnTlYNCiMgQkFNVElrUnBaMmxEWlhKMElFaHBaMmdnUVhOemRYSmhibU5sSUVWV0lGSnZiM1FnUTBFd0hoY05NRFl4TVRFdw0KIyBNREF3TURBd1doY05NekV4TVRFd01EQXdNREF3V2pCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NDQojIFJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUUQNCiMgRXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUlJQklqQU5CZ2txaGtpRw0KIyA5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeHN6bGMrYjcxTHZsTFMweXB0L2xnVC9KelNWSnRuRXF3OVdVDQojIE5HZWlDaHl3WDJtbVFMSEV0N0tQMEppa3FVRlpPdFBjbE5ZODIzUTRwRXJNVFNXQzkwcWxVeEk0N3ZOSmJYR1INCiMgZm1PMnE2WmZ3NlNFK0U5aVViNzR4ZXpiT0pMakJ1VUlrUXpFS0VGVis4dGFpUlYrY2VnMXYwMXlDVDIrT2poUQ0KIyBXM2N4RzQyenh5UkZtcWVzYlFBVVdnUzN1aFByVVFxWVFVRWlUbVZoaDRGQlVLWjVYSW5lR1VwWDFTN21YUnhUDQojIExINll6Um9HRnFSb2M5QTBCQk5jb1hIVFdueFYyMTVrNFRlSE1GWUU1UkcwS1lBUzhYazVpS0lDRVh3blpyZUkNCiMgdDNqeXlncW9PS3NLWk1LL1psMlZoTUdoSlI2SFhScFFDeUFTekVHN2JndFJPTGhMeXdJREFRQUJvMk13WVRBTw0KIyBCZ05WSFE4QkFmOEVCQU1DQVlZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXNUN0RhUVA0DQojIHYwY0IxSmdtR2dnQzcyTmtLOE13SHdZRFZSMGpCQmd3Rm9BVXNUN0RhUVA0djBjQjFKZ21HZ2dDNzJOa0s4TXcNCiMgRFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUJ3YUJwZmMxNXlmUElobUJnaFhJZHNoUi9ncVo2cS9HREoyUUJCWA0KIyB3WXJ6ZXRrUlpZNDErcDc4UmJXZTJVd3hTN2lSNkVNc2pyTjR6dHZqVTNseDF1VWhsQUhhVlllYUpHVDJpbWJNDQojIDNwdzN6YWcwc1dtYkk4aWVlQ0lyY0VQalZVY3hZUm52V01XRkwwNHc5cUF4RmlQSTUrSmxGalBMdnhvYm9EMzQNCiMgeWw2TE1ZdGdDSWt0REFaY1VyZkUrUXFZMFJWZm54SytmRFpqT0wxRXBIL2tKaXNLeEpkcERlbU00c0FRVjdqSQ0KIyBkaEtSVmZKSWFkaThLZ0piRDBUVUlESGI5THB3SmwyUVlKNjhTeGNKTDdUTEhrTm95UWNud2RKYzkrb2h1V2dTDQojIG5EeWN2NTc4Z0Z5Ylk4M3NSNm9sSjJlZ04vTUFnbjFVMTZuNDZTNFRvM2ZvSDBvd2dnYXVNSUlGbHFBREFnRUMNCiMgQWhBS0dnMGJjbytVdUxkd0ZDQjhLZ3JFTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3d4Q3pBSkJnTlZCQVlUQWxWVA0KIyBNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqDQojIGIyMHhLekFwQmdOVkJBTVRJa1JwWjJsRFpYSjBJRVZXSUVOdlpHVWdVMmxuYm1sdVp5QkRRU0FvVTBoQk1pa3cNCiMgSGhjTk1qQXdPREUzTURBd01EQXdXaGNOTWpNd09ESXlNVEl3TURBd1dqQ0J3REVUTUJFR0N5c0dBUVFCZ2pjOA0KIyBBZ0VERXdKRFNERVZNQk1HQ3lzR0FRUUJnamM4QWdFQ0V3UldZWFZrTVIwd0d3WURWUVFQREJSUWNtbDJZWFJsDQojIElFOXlaMkZ1YVhwaGRHbHZiakVZTUJZR0ExVUVCUk1QUTBoRkxURXhNaTR3TURBdU5UYzVNUXN3Q1FZRFZRUUcNCiMgRXdKRFNERVBNQTBHQTFVRUJ4TUdVSEpwYkd4NU1SWXdGQVlEVlFRS0V3MU9SVmhVYUdsdWF5QlRMa0V1TVFzdw0KIyBDUVlEVlFRTEV3SlNSREVXTUJRR0ExVUVBeE1OVGtWWVZHaHBibXNnVXk1QkxqQ0NBaUl3RFFZSktvWklodmNODQojIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTWJyOGs1QjRVVDdFOSs2U2tvYTNJaHk4djZ2U0hXYTVUZnB0UG4NCiMgQjFKUTdCZ3N3NkVEQ0kvSHJJbGNSUkYrZmVYR1lQWWFrSjVuZzFja00yMnUvRnRBbXJsaGI1VkxGT2VNaXViLw0KIyBSNWNQUTZJaGpkQ25UaVZQckJiWWV2Q215SE9UZHFjNzRHRnlnQksrZy9aTFpxT1dKRGtod1ZpbVROVFAxUk8vDQojIEJlYzNKSTNycjBDdUlxcUd2Q3QvVHVjUHN6Vnl1S1JWaXc1Z3ZNa2F3UXZmd1Q4TW1MZkZrcjk4bHQ0QmxUWkcNCiMgU2tvUHVtRVMrYkpkV01UdGRUZlpJaytLUXY2MG9XbXNXbEkvTHhlK20xcUluQ0VETEZuU3NRSU4rSEdrYWJXNQ0KIyBVaUVKNmJEalpDSUI1UGhRWGp2MFdYTFRHWnFUY2JCZUJMSUFuMDZMOVRJSDZvQ0c4N1FsclhkeXNPRGNhcWlRDQojIFNrQUo3YlhRc2NmV3NSSFdQclJ6VTM2QTJtT3hES0VSR3hIM2lQRHhmVjlOQUViOGhkRlRmeEpSTWEraEVBcXQNCiMgNnF4NFB1VVpidTdtOFRyaCtmSEtvNVM5YndYa1ltaTBURE9OcFlFUW1iNytsZWZjSHFMTmFJZ3BmZEs1aC8wVg0KIyBsVWxwRHdsTkdYTWZFMmFCaE5SNkw1Tzk5cjExWTJxSkExT21NQmNQTm9ZN2xqWG1kTUh1MVY5L0RFMEpLNE9ZDQojIFZ4Ym5VVk1xVGYzL1ZnWnhHZWNZTU1mYW1qdjQyc1BGdk1kYUNqOEMzTjRjMGQ0c1dPbHRKa2pDbWk1Zkt3OXkNCiMgVUdMelV6V09meDl5MGFUUW45U2QveTY4Y0JQL0psLzFrd3MzeFA0T3Jzemw1dkFGZW5UUXd0T0hMZ3NvazBFRg0KIyBGdWFMQWdNQkFBR2pnZ0gxTUlJQjhUQWZCZ05WSFNNRUdEQVdnQlNQNkg3d2JUSnFBQVVqeDNDWGFqcVEvMnZxDQojIDFEQWRCZ05WSFE0RUZnUVVVbHVvelBDSW9ZQnl1RDRkVkJjQ2xidzQ2Mzh3TWdZRFZSMFJCQ3N3S2FBbkJnZ3INCiMgQmdFRkJRY0lBNkFiTUJrTUYwTklMVlpCVlVRdFEwaEZMVEV4TWk0d01EQXVOVGM1TUE0R0ExVWREd0VCL3dRRQ0KIyBBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QjdCZ05WSFI4RWREQnlNRGVnTmFBemhqRm9kSFJ3DQojIE9pOHZZM0pzTXk1a2FXZHBZMlZ5ZEM1amIyMHZSVlpEYjJSbFUybG5ibWx1WjFOSVFUSXRaekV1WTNKc01EZWcNCiMgTmFBemhqRm9kSFJ3T2k4dlkzSnNOQzVrYVdkcFkyVnlkQzVqYjIwdlJWWkRiMlJsVTJsbmJtbHVaMU5JUVRJdA0KIyBaekV1WTNKc01Fc0dBMVVkSUFSRU1FSXdOd1lKWUlaSUFZYjliQU1DTUNvd0tBWUlLd1lCQlFVSEFnRVdIR2gwDQojIGRIQnpPaTh2ZDNkM0xtUnBaMmxqWlhKMExtTnZiUzlEVUZNd0J3WUZaNEVNQVFNd2ZnWUlLd1lCQlFVSEFRRUUNCiMgY2pCd01DUUdDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdTQVlJS3dZQg0KIyBCUVVITUFLR1BHaDBkSEE2THk5allXTmxjblJ6TG1ScFoybGpaWEowTG1OdmJTOUVhV2RwUTJWeWRFVldRMjlrDQojIFpWTnBaMjVwYm1kRFFTMVRTRUV5TG1OeWREQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVk2SUI0UG5OY3poZGVtVlZpZHRUOFhUMFArL0VqOWJiYU1JbVI2SEVMVGNZWDE5Z2prc0ZOVXJSNg0KIyAvWFVQZ2FqL25TcGxyNU9qM0RKNUpDUG8yQVZLd1kxbVVXUzJ1WW9aUmluRUFvZERmRVNxZlRpUjE5ODJ4cDcyDQojIGdvMzQ3R1RNbnBwazJFcGR1SWlvaStkY3diYncxRGYybkZ6STNGY1g3SDFVSVBkOE00cDNVQXQ1V0NpVk1QSFcNCiMgWHhyUXQ1bjhqeGdMY3Vzdk9SWFpxWk9zZFRsN0hacHNWSG5HVVk3ODdPdTBJSnh1RnNpVU02NGJLR3p2TnFxdA0KIyBZeUZ5Ujk5RXJDVHFkWjY2dXJhRmlsQWdqUHdhTEZ6SlV3NithSy93V3hLQjdRMHBpSUNwZVgxWDBJTFp1NTZHDQojIFIyMDZWRWNteFdJTFlqUUUyTlpjVCs3dmJVem1NSUlHdkRDQ0JhU2dBd0lCQWdJUUEvRzA0Vjg2Z3ZFVWxuaXoNCiMgMTloSFhEQU5CZ2txaGtpRzl3MEJBUXNGQURCc01Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbg0KIyBhVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU3N3S1FZRFZRUURFeUpFDQojIGFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERURXlNRFF4T0RFeU1EQXcNCiMgTUZvWERUSTNNRFF4T0RFeU1EQXdNRm93YkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGVEFUQmdOVkJBb1RERVJwWjJsRA0KIyBaWEowSUVsdVl6RVpNQmNHQTFVRUN4TVFkM2QzTG1ScFoybGpaWEowTG1OdmJURXJNQ2tHQTFVRUF4TWlSR2xuDQojIGFVTmxjblFnUlZZZ1EyOWtaU0JUYVdkdWFXNW5JRU5CSUNoVFNFRXlLVENDQVNJd0RRWUpLb1pJaHZjTkFRRUINCiMgQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2RUK2creXRSUHhaTStFZ1B5dWdEWFJ0dGZIb3l5c0dpeXM4WVNzT2pVUw0KIyBPcEtSdWxma3hNbnpMNmhJUExmV2J0eVhJcnBSZVdHdlF5OE50NXUwU1RHdVJGZytwS0dXcDRkUEkzN0RiR1VrDQojIGtGVStvY29qZk1WQzZjUjZZa1diZmQ1amRNdWVZeVg0aEpxYXJVVlBybjBmeUJQTGRadko0ZUdLK0FzTW1QVEsNCiMgUHRCRnFub2VwVmlUTmpTK0t5NHJNVmhtdERJUW41M3dVcUh2NkQ3VGR2SkFXdHo2YWowYlM2MTJzSXhjN2phNg0KIyBnK293cUV6ZThRc3FXRUdJcmdDSnF3UFJGb0lnSW5iclhsUTRFbUxoMG5BazIrMGZjTkprQ1lBdDRyYWR6aC95DQojIHV5SHpiTnZZc3hsN2lsQ2Y3K3cyQ2x5YXQwclRDS0E1ZWYzZHZ6MDZDU1VDQXdFQUFhT0NBMWd3Z2dOVU1CSUcNCiMgQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnR0dNQk1HQTFVZEpRUU1NQW9HQ0NzRw0KIyBBUVVGQndNRE1IOEdDQ3NHQVFVRkJ3RUJCSE13Y1RBa0JnZ3JCZ0VGQlFjd0FZWVlhSFIwY0RvdkwyOWpjM0F1DQojIFpHbG5hV05sY25RdVkyOXRNRWtHQ0NzR0FRVUZCekFDaGoxb2RIUndPaTh2WTJGalpYSjBjeTVrYVdkcFkyVnkNCiMgZEM1amIyMHZSR2xuYVVObGNuUklhV2RvUVhOemRYSmhibU5sUlZaU2IyOTBRMEV1WTNKME1JR1BCZ05WSFI4RQ0KIyBnWWN3Z1lRd1FLQStvRHlHT21oMGRIQTZMeTlqY213ekxtUnBaMmxqWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwDQojIFoyaEJjM04xY21GdVkyVkZWbEp2YjNSRFFTNWpjbXd3UUtBK29EeUdPbWgwZEhBNkx5OWpjbXcwTG1ScFoybGoNCiMgWlhKMExtTnZiUzlFYVdkcFEyVnlkRWhwWjJoQmMzTjFjbUZ1WTJWRlZsSnZiM1JEUVM1amNtd3dnZ0hFQmdOVg0KIyBIU0FFZ2dHN01JSUJ0ekNDQWJNR0NXQ0dTQUdHL1d3REFqQ0NBYVF3T2dZSUt3WUJCUVVIQWdFV0xtaDBkSEE2DQojIEx5OTNkM2N1WkdsbmFXTmxjblF1WTI5dEwzTnpiQzFqY0hNdGNtVndiM05wZEc5eWVTNW9kRzB3Z2dGa0JnZ3INCiMgQmdFRkJRY0NBakNDQVZZZWdnRlNBRUVBYmdCNUFDQUFkUUJ6QUdVQUlBQnZBR1lBSUFCMEFHZ0FhUUJ6QUNBQQ0KIyBRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFkQUJsQUNBQVl3QnZBRzRBY3dCMEFHa0FkQUIxQUhRQVpRQnpBQ0FBDQojIFlRQmpBR01BWlFCd0FIUUFZUUJ1QUdNQVpRQWdBRzhBWmdBZ0FIUUFhQUJsQUNBQVJBQnBBR2NBYVFCREFHVUENCiMgY2dCMEFDQUFRd0JRQUM4QVF3QlFBRk1BSUFCaEFHNEFaQUFnQUhRQWFBQmxBQ0FBVWdCbEFHd0FlUUJwQUc0QQ0KIyBad0FnQUZBQVlRQnlBSFFBZVFBZ0FFRUFad0J5QUdVQVpRQnRBR1VBYmdCMEFDQUFkd0JvQUdrQVl3Qm9BQ0FBDQojIGJBQnBBRzBBYVFCMEFDQUFiQUJwQUdFQVlnQnBBR3dBYVFCMEFIa0FJQUJoQUc0QVpBQWdBR0VBY2dCbEFDQUENCiMgYVFCdUFHTUFid0J5QUhBQWJ3QnlBR0VBZEFCbEFHUUFJQUJvQUdVQWNnQmxBR2tBYmdBZ0FHSUFlUUFnQUhJQQ0KIyBaUUJtQUdVQWNnQmxBRzRBWXdCbEFDNHdIUVlEVlIwT0JCWUVGSS9vZnZCdE1tb0FCU1BIY0pkcU9wRC9hK3JVDQojIE1COEdBMVVkSXdRWU1CYUFGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUEwR0NTcUdTSWIzRFFFQkN3VUENCiMgQTRJQkFRQVpNMG9NZ1RNMzI2MDJ5ZVRKT3J1MUd5NTZvdUwwUTBJWG5yOU9vVTNoc2R2cGdkMmZBZkxraU5YcA0KIyAvZ245SWNIc1hZRFM4TmJCUThMK2R5dmIrZGVSTTg1czFiSVpPK1l1MXNtVFQ0aEFqczNoOVg3eEQ4WlpWbkxvDQojIDYycEJ2UnpWUnRWOFNjcG1PQlhCditDUmNIZUgzTW1OTWNrTUthSXo3WTNpaDgySmpUOGIvOVhnR3BlTGZOcHQNCiMgKzZqR3NqcG1hM3NCczgzWXBqVHNFZ0dybFZpbHhGTlhxR0RtNXdJU29Ma2paS0pOdTN5QkpXUWh2cy91UWhoRA0KIyBsN3VsTndhdlRmOG1wVTFoUyt4R1FiaGx6cmg1bmdpV0M0R01panVQeDVtTW95cHVtRzFlWWNhV3Q0cTVZUzJUDQojIHVPc09CRVBYOWY2bThHTFVtV3Fsd2NId1pKU0FNWUlVNlRDQ0ZPVUNBUUV3Z1lBd2JERUxNQWtHQTFVRUJoTUMNCiMgVlZNeEZUQVRCZ05WQkFvVERFUnBaMmxEWlhKMElFbHVZekVaTUJjR0ExVUVDeE1RZDNkM0xtUnBaMmxqWlhKMA0KIyBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1JWWWdRMjlrWlNCVGFXZHVhVzVuSUVOQklDaFRTRUV5DQojIEtRSVFDaG9ORzNLUGxMaTNjQlFnZkNvS3hEQU5CZ2xnaGtnQlpRTUVBZ0VGQUtDQmhEQVlCZ29yQmdFRUFZSTMNCiMgQWdFTU1Rb3dDS0FDZ0FDaEFvQUFNQmtHQ1NxR1NJYjNEUUVKQXpFTUJnb3JCZ0VFQVlJM0FnRUVNQndHQ2lzRw0KIyBBUVFCZ2pjQ0FRc3hEakFNQmdvckJnRUVBWUkzQWdFVk1DOEdDU3FHU0liM0RRRUpCREVpQkNCK216ZTVDeDdYDQojIElKdUtWU2ZSQmZTbFRhVVV3WU1Fc0M5L25xQlBtdTJtdmpBTkJna3Foa2lHOXcwQkFRRUZBQVNDQWdBZTFiYXANCiMgemZ2ckNNaThzKy9yUVJXNVVNdW9yQW9PT2Zndm5Id3p2WVNaR016VjNiUlB1dTJNcmJYVmxKQjIyQ0FNRFUyZA0KIyA4SEVjd3JNWUtod1hVVFVic2NnclVFcThRbHdCd1ZVSVV2endsd21YZGxUaWdKMG5aRXdLaC9wdEVUaG9kNjlQDQojIG1vVFY3dzNzNGc0eC9yTlRNTnZSZExqazJrVDlGYnFGWUJKWVRvbEhodDl5S3dMWE4xVWtPdG1LTnQ0eTBkWlANCiMgekk4VFZWQzZZYzFvTGdRcWpsd2wzYitoWkZPaGhOaXBZOFJwWlIwcDNqNXRJY1lrektDa3lxd2FwbWtrdkJpaA0KIyBVTEpzTXIweDFsUFF3ejJGdGZNdlB1MWNCRG1GWFZxcU02K1lJMjc1aDVxRXowMjNFOU1yRTBHdzB0RnRqc3I5DQojIE1yV2p5VERSaEFXcys3WU1xbTQzRjd2U2J0NnlOUkd4VnhXOUhHdk5kbTdpYy84NTVTYnN0K0ZuTURTWkFuSXgNCiMgMzNWaXVZN0NUbzBCNzZvZDdhZ3dYQlZmTm1KUENwenBxMFl1b1QzSUphMTkrQVRuNC9kdTVPTENxVmNuUDJ1eQ0KIyB2aGtXaFNuN2I2NnMzOE1xTE9GVmhhYXpIVlFYay83RjBXcHNVSzRWMHJaK0NPT2xwYURFejdDSWc0NHBseXNPDQojIDJadjViZnRGcG1VZUc2eWlBMWF1aDhxVHRjdVhoUGJ2TkcxVjBhTGN6WUNrcjZCN2hPTHNhWHd0SjF3WWtqWWYNCiMgV21DK2pFbGR5bkYyOFNQNENJVTVTVEFrNUl3bXVHLy83MEhSRkhzcWNLU3FmdFM2NGkzYmdOTjAxVlIrZDJTdA0KIyBzWkJOd0NwYXZKL1hXS2FrcURIN1E4OFlrMHNuVDY3T3ZwZVdJYUdDRWJJd2doR3VCZ29yQmdFRUFZSTNBd01CDQojIE1ZSVJuakNDRVpvR0NTcUdTSWIzRFFFSEFxQ0NFWXN3Z2hHSEFnRURNUTh3RFFZSllJWklBV1VEQkFJQkJRQXcNCiMgZHdZTEtvWklodmNOQVFrUUFRU2dhQVJtTUdRQ0FRRUdDV0NHU0FHRy9Xd0hBVEF4TUEwR0NXQ0dTQUZsQXdRQw0KIyBBUVVBQkNEVlNaenRQeWRRN0NLeWdIclNuelhJNzR3L1ZDWnlaRFRISlVXOU15YU9sQUlRR3FTMGtoc1NCQ1BUDQojIDRwNVFYbFIwQlJnUE1qQXlNakEwTVRrd05qRXlOVEphb0lJTmZEQ0NCc1l3Z2dTdW9BTUNBUUlDRUFwNlNvaWUNCiMgeVpsQ2tBWmpPRTJHbDUwd0RRWUpLb1pJaHZjTkFRRUxCUUF3WXpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVg0KIyBCQW9URGtScFoybERaWEowTENCSmJtTXVNVHN3T1FZRFZRUURFekpFYVdkcFEyVnlkQ0JVY25WemRHVmtJRWMwDQojIElGSlRRVFF3T1RZZ1UwaEJNalUySUZScGJXVlRkR0Z0Y0dsdVp5QkRRVEFlRncweU1qQXpNamt3TURBd01EQmENCiMgRncwek16QXpNVFF5TXpVNU5UbGFNRXd4Q3pBSkJnTlZCQVlUQWxWVE1SY3dGUVlEVlFRS0V3NUVhV2RwUTJWeQ0KIyBkQ3dnU1c1akxqRWtNQ0lHQTFVRUF4TWJSR2xuYVVObGNuUWdWR2x0WlhOMFlXMXdJREl3TWpJZ0xTQXlNSUlDDQojIElqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF1U3FXSTZaY3ZGL1dTZkFWZ2hqME0rN00NCiMgWEd6ajRDVXUwakhrUEVDdSs2dkU0M2hkZmx3MjZ2VWxqVU9qZ2VzNFkvazhpR25lUE5Jd1VRMHhCN3BHYnVtag0KIyBTMGpvaVVGL0RiTFcrWVR4bUQ0THZ3cUVFbkZzb1dJbUFkUE93Mno5ckR0KzNDb2NxYjB3eGhiWTJyenJzdkdEDQojIDBaL05DY1c1UVdwRlFpTkJXdmhnMDJVc1BuNWV2WmFuOFB5eDlQUW96MEo1SHp2SGt3ZG9hT1ZFTkZKZkQxRGUNCiMgMUZrc1JIVEFNa2NaVytLWUxvL1F5ai8veG1mUFBKT1ZUb1RwZGhpWW1SRVV4U3NNb0RQYlRTU0Y2SUtVNFM4RA0KIyA3bitGQXNtRzRkVVlGTGNFUmZQZ09MMml2WHB4bU93VjUvMHU3TktiQUlxc0hZMDdnR2orMEZtWUpzN2c3YTUvDQojIEtDN0NudUFMUzhnSTBUSzdnL29qUE5uLzBveTc5ME1qMytmRFdnVmlmbkFzNVN1eVBXUHF5SzZCSUd0RGljaCsNCiMgWDdBYTNSbTluM1JCQ3ErNWpnblRkS0V2c0ZSMndaQlBsT3lHWWYvYkVTK1NBekRPTUxlTEQxMUVzME1kSTFETg0KIyBrZGN2bmZ2OHpiSEJwOFFPeE85QVBoazZBdFF4cVdtZ1NmbDE0WnZvYU9ScURJL3I1TEVoZTRabldINS9IK2dyDQojIDVCU3lGdGFCb2NyYU1KQnI3bTkxd0xBMkpySUlPLys5dm45c0V4amZ4bTJrZVVtdGkzOWhod1ZvOTlSdzQwS1YNCiMgNko2N20wdXk0clpCUGVldnB4b295YTFoc0tCQkdCbE83VWViWVpYdFBndGhXdW8rZXBpU1VjMC95VVRuZ0lzcA0KIyBRbkwzZWJMZGhPb243djU5ZW1zQ0F3RUFBYU9DQVlzd2dnR0hNQTRHQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WDQojIEhSTUJBZjhFQWpBQU1CWUdBMVVkSlFFQi93UU1NQW9HQ0NzR0FRVUZCd01JTUNBR0ExVWRJQVFaTUJjd0NBWUcNCiMgWjRFTUFRUUNNQXNHQ1dDR1NBR0cvV3dIQVRBZkJnTlZIU01FR0RBV2dCUzZGdGx0VFlVdmN5bDJtaTkxakdvZw0KIyBqNTdJYnpBZEJnTlZIUTRFRmdRVWpXUzNpU0grVmxoRWhHR242bThjTm8vZHJ3MHdXZ1lEVlIwZkJGTXdVVEJQDQojIG9FMmdTNFpKYUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXRMMFJwWjJsRFpYSjBWSEoxYzNSbFpFYzANCiMgVWxOQk5EQTVObE5JUVRJMU5sUnBiV1ZUZEdGdGNHbHVaME5CTG1OeWJEQ0JrQVlJS3dZQkJRVUhBUUVFZ1lNdw0KIyBnWUF3SkFZSUt3WUJCUVVITUFHR0dHaDBkSEE2THk5dlkzTndMbVJwWjJsalpYSjBMbU52YlRCWUJnZ3JCZ0VGDQojIEJRY3dBb1pNYUhSMGNEb3ZMMk5oWTJWeWRITXVaR2xuYVdObGNuUXVZMjl0TDBScFoybERaWEowVkhKMWMzUmwNCiMgWkVjMFVsTkJOREE1TmxOSVFUSTFObFJwYldWVGRHRnRjR2x1WjBOQkxtTnlkREFOQmdrcWhraUc5dzBCQVFzRg0KIyBBQU9DQWdFQURTMGpkS2JSOWZqcVM1ay9BZVQyRE9TdkZwM1pzNHlYZ2ltY1EyOEJMYXM0dFhBUnY0UVppejlkDQojIDVZWlB2cE02M2lvNVdqbE8ySVJacGJ3Ym1Lcm9iTy9SU0drWk9GdlBpVGtkY0hEWlR0OGpJbXpWMy9aWnk2SEMNCiMgNmt4MnlxSGNvU3VXdUp0VnFScHJmZEgxQWdsUGd0YWxjNGpFbUlEZjdrbVZ0N1BNeGFmdUR1SHZIamlLbis4Ug0KIyB5VEZLV0xiZk9IekwrbHozNUZPL2JncDhmdGZlbU5VcFpZa1BvcHpBWmZRQkltWEg2bDUwcGxzMWtsQjg5QmVtDQojIGgyUlBQa2FKRm1NZ2E4dnllOUExNDBwd1NLbTI1eDFndlFRaUZTVndCbktwUkR0cFJ4SFQ3dW5Ib0Q1UEVMa3cNCiMgTnVUenFta0pxSXQrWktKbGxCSDdiakx4OWJzNHJjM0FreEhWTW5oS1N6Y3FUUE5jM0xhRndMdHdNRlY0MXBqKw0KIyBWRzEvY2FsSUduamRSbmN1RzNyQU00cjRTaWlNRXFoenp5MzUweVB5bmhuZ0RaUW9vT3ZiR2xHZ2xZS09LR3VrDQojIHpwMTIzcWx6cWtocVdVT3VYK3I0RHdaQ25kOEdhSmIrS3FCMFcyTm0zbXNzdUhpcVRYQnQ4Q3p4QnhWK05iVG0NCiMgdFF5aW1hWFhGV3MxRG9YVzRDek00QXdrdUh4U0N4NlpmTy9JeU1XTVdHbXZxejNoejh4OUZhNFV2NHB4MzhxWA0KIyBzZGhINmh5RjRFVk9FaHdVS1ZqTWI5Ti95NzdCRGtwdklKeXUyWE15V1FqbkxaS2hHaEgrTXBpbVhTdVg0SXZUDQojIG5NeHR0UTJ1UjJNNFJ4ZGJieFBhYWhCdUgwbTNSRnUwQ0FxSFdsa0VkaEdocDNjQ0V4d3dnZ2F1TUlJRWxxQUQNCiMgQWdFQ0FoQUhOamUzSkZSODJFZXMvU2htS2w1Yk1BMEdDU3FHU0liM0RRRUJDd1VBTUdJeEN6QUpCZ05WQkFZVA0KIyBBbFZUTVJVd0V3WURWUVFLRXd4RWFXZHBRMlZ5ZENCSmJtTXhHVEFYQmdOVkJBc1RFSGQzZHk1a2FXZHBZMlZ5DQojIGRDNWpiMjB4SVRBZkJnTlZCQU1UR0VScFoybERaWEowSUZSeWRYTjBaV1FnVW05dmRDQkhOREFlRncweU1qQXoNCiMgTWpNd01EQXdNREJhRncwek56QXpNakl5TXpVNU5UbGFNR014Q3pBSkJnTlZCQVlUQWxWVE1SY3dGUVlEVlFRSw0KIyBFdzVFYVdkcFEyVnlkQ3dnU1c1akxqRTdNRGtHQTFVRUF4TXlSR2xuYVVObGNuUWdWSEoxYzNSbFpDQkhOQ0JTDQojIFUwRTBNRGsySUZOSVFUSTFOaUJVYVcxbFUzUmhiWEJwYm1jZ1EwRXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUENCiMgQTRJQ0R3QXdnZ0lLQW9JQ0FRREdoalVHU2JQQlBYSkpVVlhISlFQRThwRTNxWmRSb2RiU2c5R2VUS0p0b0xETQ0KIyBnL2xhOWhHaFJCVkNYNlNJODJqNmZmT2NpUXQvblIrZUR6TWZVQk1MSm5PV2JmaFhxQUo5L1VPMGhOb1I4WE94DQojIHMrNHJnSVNLSWhqZjY5bzl4QmQvcXhrclBrTGNaNDdxVVQzdzFsYlU1eWd0NjlPeHRYWG5Id1psalpRcDA5bnMNCiMgYWQvWmtJZEdBSHZiUkVHSjNIeHFWM3J3TjNtZlhhekw2SVJrdEZMeWRrZjNZWU1aM1YrMFZBc2hhRzQzSWJ0QQ0KIyByRit5M2twOXp2VTVFbWZ2RHFWamJPU214UjNOTmcxYzFlWWJxTUZrZEVDbndITEZ1azRmc2JWWVRYbisxNDl6DQojIGs2d3NPZUtsU05id3NERVRxVmNwbGljdTlZZW1qMDUyRlZVbWNKZ21mNkFhUnlCRDQwTmpnSHQxYmljbGtKZzYNCiMgT0JHejl2YWU1anRiN0lIZUloVFpnaXJIa3IrZzN1TStvblA2NXg5YWJKVHlVcFVSSzFoMFFDaXJjMFBPMzBxaA0KIyBIR3M0eFNuenlxcVdjMEpvbjdaR3M1MDZvOVVENEwvd29qektRdHdZU0g4VU5NL1NUS3Z2bXozK0RyaGtLdnAxDQojIEtDUkI3VUsvQlp4bVNWSlE5Rkh6TmtsTml5RFNMRmMxZVN1bzgwVmd2Q09OV1BmY1lkNlQvam5BK2JJd3BVelgNCiMgNlpoS1dEN1RBNGorczQvVFhrdDJFbEdUeVl3TU8xdUtJcWpCSmdqNUZCQVNBMzFmSTd0azQyUGdwdUUrOXNKMA0KIyBzajhlQ1hic3ExMUdkZUpnbzFnSkFTZ0FEb1JVN3M3cFhjaGVNQks5UnA2MTAzYTUwZzVybVF6U003VE5zUUlEDQojIEFRQUJvNElCWFRDQ0FWa3dFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBREFkQmdOVkhRNEVGZ1FVdWhiWmJVMkYNCiMgTDNNcGRwb3ZkWXhxSUkrZXlHOHdId1lEVlIwakJCZ3dGb0FVN05mamd0SnhYV1JNM3k1blArZTZtSzRjRDA4dw0KIyBEZ1lEVlIwUEFRSC9CQVFEQWdHR01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUlNSGNHQ0NzR0FRVUZCd0VCDQojIEJHc3dhVEFrQmdnckJnRUZCUWN3QVlZWWFIUjBjRG92TDI5amMzQXVaR2xuYVdObGNuUXVZMjl0TUVFR0NDc0cNCiMgQVFVRkJ6QUNoalZvZEhSd09pOHZZMkZqWlhKMGN5NWthV2RwWTJWeWRDNWpiMjB2UkdsbmFVTmxjblJVY25Weg0KIyBkR1ZrVW05dmRFYzBMbU55ZERCREJnTlZIUjhFUERBNk1EaWdOcUEwaGpKb2RIUndPaTh2WTNKc015NWthV2RwDQojIFkyVnlkQzVqYjIwdlJHbG5hVU5sY25SVWNuVnpkR1ZrVW05dmRFYzBMbU55YkRBZ0JnTlZIU0FFR1RBWE1BZ0cNCiMgQm1lQkRBRUVBakFMQmdsZ2hrZ0JodjFzQndFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFIMVpqc0NUdG0rWQ0KIyBxVVFpQVg1bTF0Z2hRdUd3R0M0UVRSUFBNRlBPdnhqN3gxQmQ0a3NwKzNDS0Rhb3BhZnhwd2M4ZEIraytZTWpZDQojIEMrVmNXOWR0aC9xRUlDVTBNV2ZOdGhLV2I4UlFUR0lkREFpQ3FCYTlxVmJQRlhPTkFTSWx6cFZwUDBkMyszSjANCiMgRk5mL3EwK0tMSHFyaGMxRFgrMWd0cXBQa1dhZUxKN2dpcXpsL1l5OFpDYUhiSks5blh6UWNBcDg3Nmk4ZFUrNg0KIyBXdmVwRUxKZDZmOG9WSW53MVlweGRtWGF6UEJ5b3lQNndDZUNSSzZaSnh1ckpCNG13YmZlS3V2Mm5yRjVtWUdqDQojIFZvYXJDa1hKMzhTTm9PZVkrL3VtblhLdnhNZkJ3V3B4MmNZVGdBbkV0cC9OaDRja3UwK2pTYmwzWnBIeGNwenANCiMgU3dKU3B6ZCtrMU9zT3gwSVNRK1V6VGw2M2Y4bFk1a25MRDAvYTZmeFpzTkJ6VSsyUUpzaElVRFF0eE1remR3ZA0KIyBlRHJrbnEzbE5IR1MxeVpyNURoenE2WUJUNzAvTzNpdFRLMzd4SlY3N1FwZk16bUhRWGg2T09tYzRkMGovUjBvDQojIDA4ZjU2UEdZWC9zcjJIN3lScDExTEI0bkxDYmJieFY3SGhtTE5yaVQxT2J5RjVsWnluRHdONytZQU44Z0ZrOG4NCiMgKzJCbkZxRm11dDFWd0RvcGhyQ1lvQ3Z0bFVHM090VVZtREcwWWdrUENyMkIyUlArdjZUUjgxZlp2QVQ2Z3Q0eQ0KIyAzd1NKOEFETlhjTDUwQ04vQUF2a2RnSW0yZkJsZGtLbUtZY0pSeXZtZnhxa2hRLzhtSmIyVlZRckg0RDZ3UElPDQojIEsrWFcrNmt2UkJWSzV4TU9IZHMzT0JxaEsvYnQxbno4TVlJRGRqQ0NBM0lDQVFFd2R6QmpNUXN3Q1FZRFZRUUcNCiMgRXdKVlV6RVhNQlVHQTFVRUNoTU9SR2xuYVVObGNuUXNJRWx1WXk0eE96QTVCZ05WQkFNVE1rUnBaMmxEWlhKMA0KIyBJRlJ5ZFhOMFpXUWdSelFnVWxOQk5EQTVOaUJUU0VFeU5UWWdWR2x0WlZOMFlXMXdhVzVuSUVOQkFoQUtla3FJDQojIG5zbVpRcEFHWXpoTmhwZWRNQTBHQ1dDR1NBRmxBd1FDQVFVQW9JSFJNQm9HQ1NxR1NJYjNEUUVKQXpFTkJnc3ENCiMgaGtpRzl3MEJDUkFCQkRBY0Jna3Foa2lHOXcwQkNRVXhEeGNOTWpJd05ERTVNRFl4TWpVeVdqQXJCZ3NxaGtpRw0KIyA5dzBCQ1JBQ0RERWNNQm93R0RBV0JCU0ZDUE9HVVZ5ejB3ZDl0clMzd0g4YlNsNUIzakF2QmdrcWhraUc5dzBCDQojIENRUXhJZ1FnZjM2Rk4wR3QrREdTUFZYTkxiNU5YQk5Na1FZR1lQYnZ4ZWZFaDN6SUtVMHdOd1lMS29aSWh2Y04NCiMgQVFrUUFpOHhLREFtTUNRd0lnUWduYWFRRmNOSnhzR0plRVc2TllLdGNNaVBwQ2s3MjJxK25DdlNVNUo1NWpzdw0KIyBEUVlKS29aSWh2Y05BUUVCQlFBRWdnSUFiMDh4TmlBcXZzcmphcjdKRmZzbW1qOUxzTGViZG8zRVlGZXRQSGVVDQojIFFXQlIyZFMzWkl2ZFFjL21OYitBRUoxVjRkdlpSSTNsclJ0RU05ck83ckhlVDhwRTZvQnIxVjVaSDdRL2VlS2QNCiMgUm1lTCtNR3EzY1lHREcxSTBrVFJrR2NvVUlDWFh3c2NuOG5XQ0k5cStEUi9PMVF1WUdOZlo0K0xTMXM3aVhQNg0KIyBHNXRycHI1Ky9jdGo2WXJ5K2JET3JtVTkreHRrU1VmYmF3Qks3dnIyZlhMNDJhNzRUSk03MUhLV0VJelVpL1BKDQojIEY3czFvN2RZeVNzSU1qK1hLaTZrZ2NzWm1uNUZYd1V4ekdZOTlnZEREeG1rR3FEckozUkxET2ZrTE0rbHduaisNCiMgU25wcU5EclZSYnYva1RkSWo2LzVpblJ4UG1ZbnZTVS9CMVc1OEhrVjVUbDlpazBKL2k2L0ViMTQxN0M2cFk3Mw0KIyB2R2JXc0ZYOEVrWTJsakdaaEl5QUhHazhFeWRJVEc2T1BqeEdKZjcrcGRIVDJDTVcxd0hoUzgyRU81eTd6ZUxmDQojIHdIaStkZzMyK1p5WmQ2d3daNVA1YjBzcUhhN0U2OWZ2UkxGaEk5aWk1eE1NWWFaMkhVbWhKb3BWWmQ3ZlV4RnINCiMgSWRBUHdzbC9hdlZlTXhNZlU5ejd1ZWlQSTJCeXRzN3ZwbHBMVzlwdkFkMEtFeGJwaGYrV2dqcytzMGhEc2dFTA0KIyB0TUxVcEtPQStUNHVsdmcxSjVnRXN4SlJVaDEzMDR5dXNSNVFKQUp3UGVWbk5UMk53a01QRlM0NFpkTTczbUpvDQojIGkwb3VGMUF2MGV2SG91bmRpelk3MUVreUNHVjNZVWlMQVdXNzFnaHhrVjFYOXlSaVVRVUEzVEd3a0Q3NGF6QWkNCiMgS2FzPQ0KIyBTSUcgIyBFbmQgc2lnbmF0dXJlIGJsb2NrDQo="}}}