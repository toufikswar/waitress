{"id": "Synthetic_Page_Load_Microsoft_Edge_windows", "name": "Synthetic Page Load Microsoft Edge", "description": "Invokes the execution of URLs through Microsoft Edge based on URLs set in the input parameter, after 30 seconds Microsoft Edge will be closed.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "URL or URLs to be loaded, if more than one URL is specified, separate them by using semicolons", "id": "URLsToLoad", "name": "URLsToLoad", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Invoke-URLEdge.ps1", "script": ""}}}