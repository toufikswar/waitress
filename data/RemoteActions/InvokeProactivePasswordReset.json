{"id": "Invoke_Proactive_Password_Reset_windows", "name": "Invoke Proactive Password Reset", "description": "Checks password expiration date and if it is within the time frame provided by the input parameter, runs a campaign to warn the user (providing link to reset the password).", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "UID of the campaign to notify the user that the password is about to expire and to provide the URL to reset it", "id": "CampaignId", "name": "CampaignId", "options": ["9b3d5828-ea6c-402d-a404-c6e5abe8143f"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days left for the password to expire. If expiration date is inside this time frame, the campaign is run", "id": "DaysUntilExpiration", "name": "DaysUntilExpiration", "options": ["7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid domain controller overload. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["60"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Number of days left until password expiry", "id": "DaysUntilExpiration", "name": "DaysUntilExpiration", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Returns if the user password never expires", "id": "PasswordNeverExpires", "name": "PasswordNeverExpires", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Invoke-ProactivePasswordReset.ps1", "script": ""}}}