{"id": "Get_Battery_Status_windows", "name": "Get Battery Status", "description": "Returns the health status of the battery installed on the laptop, in terms of capacity that it can still hold. It also retrieves the currently active power plan. Useful for identifying the batteries to be replaced and optimize the power settings of the devices.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Health ratio, expressed as a percentage", "id": "BatteryHealth", "name": "BatteryHealth", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Initial capacity, in milliamp per hour (mAh)", "id": "BatteryDesignedCapacity", "name": "BatteryDesignedCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Current full charge capacity, in milliamp per hour (mAh)", "id": "BatteryFullChargeCapacity", "name": "BatteryFullChargeCapacity", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of charge cycles the battery has so far", "id": "BatteryCycleCount", "name": "BatteryCycleCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Estimated battery life time with one full charge. It will be 0 on Windows 7 devices", "id": "EstimatedBatteryLife", "name": "EstimatedBatteryLife", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "The power plan which is currently active on the device. It will display \"Custom\" if the power plan is not any of the default ones (Balanced, High performance, Power saving) and it will display \"Unknown\" in the case the information could not be retrieved", "id": "PowerPlan", "name": "PowerPlan", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-BatteryStatus.ps1", "script": ""}}}