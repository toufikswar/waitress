{"id": "Set_Service_Information_windows", "name": "Set Service Information", "description": "ADVANCED SCRIPT\nThe script enables the modification of the status and startup type of one or multiple services, which are provided as input. Useful for enforcing the expected status of critical services (e.g. Antivirus, SCCM agent, core business applications, etc.) in accordance with corporate policies.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "The service (or comma-separated list of services) whose status or startup type will be modified. Service names are case-insensitive", "id": "ServiceName", "name": "ServiceName", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The action (or comma-separated list of actions) to apply to the status of the specified service (or comma-separated list of services)", "id": "StatusChange", "name": "StatusChange", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "The startup type (or comma-separated list of startup types) to apply to the specified service (or comma-separated list of services)", "id": "SetStartTypeTo", "name": "SetStartTypeTo", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Name, status, and startup type of the requested service (or list of services) before and after the change", "id": "UpdatedServiceStatus", "name": "UpdatedServiceStatus", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Set-ServiceInformation.ps1", "script": ""}}}