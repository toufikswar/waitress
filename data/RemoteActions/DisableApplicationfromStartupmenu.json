{"id": "Disable_Application_from_Startup_menu_windows", "name": "Disable Application from Startup menu", "description": ". Disables startup of every application from ApplicationsToDisable parameter, excluding all listed in ApplicationsToKeep parameter. \nIf all applications should be disabled except specific ones, use only ApplicationsToKeep as a white-list and leave ApplicationsToDisable empty (''). \nIf only some specific applications should be disabled, use only ApplicationsToDisable and leave ApplicationsToKeep empty ('')", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Comma-separated list of programs to be kept on the Startup. Name has to be exactly as the processes' name (e.g. Lync, vmware-tray.exe)", "id": "ApplicationsToKeep", "name": "ApplicationsToKeep", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Comma-separated list of programs to be disabled on the Startup. Name has to be exactly as the processes' name (e.g. Lync, vmware-tray.exe)", "id": "ApplicationsToDisable", "name": "ApplicationsToDisable", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Action to be taken with the programs to disable registry keys. Value should be 'Delete' for erasing the applications from the Startup menu and 'Disable' to keep them disabled", "id": "Action", "name": "Action", "options": ["Disable"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Disable-ApplicationFromStartUpMenu.ps1", "script": ""}}}