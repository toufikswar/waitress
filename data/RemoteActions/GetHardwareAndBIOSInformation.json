{"id": "Get_Hardware_And_BIOS_Information_windows", "name": "Get Hardware And BIOS Information", "description": "Returns detailed information concerning the Graphics Processing Unit (GPU) and RAM installed on the device. Additionally, the script obtains the serial numbers and types of the installed disks, as well as the BIOS version and release date.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Name of the graphics card installed on the device", "id": "GPUName", "name": "GPUName", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Provider of the graphics card driver", "id": "GPUDriverVendor", "name": "GPUDriverVendor", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Version of the graphics card driver", "id": "GPUDriverVersion", "name": "GPUDriverVersion", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed disk drive, the number allocated by the manufacturer to identify the physical media and its type (HDD/SDD)", "id": "DiskSerialNumberAndType", "name": "DiskSerialNumberAndType", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total number of memory slots available on the device", "id": "TotalRAMSlots", "name": "TotalRAMSlots", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum total amount of RAM that can be installed on the device", "id": "MaximumRAM", "name": "MaximumRAM", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of memory slots currently used", "id": "UsedRAMSlots", "name": "UsedRAMSlots", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Amount of RAM currently installed", "id": "InstalledRAM", "name": "InstalledRAM", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Capacity of each installed memory bank", "id": "RAMBankCapacity", "name": "RAMBankCapacity", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed memory bank, label of the socket or circuit board that holds the memory", "id": "RAMBankDeviceLocator", "name": "RAMBankDeviceLocator", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed memory bank, implementation form factor for the chip", "id": "RAMBankFormFactor", "name": "RAMBankFormFactor", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed bank, name of the organization responsible for producing the physical element", "id": "RAMBankManufacturer", "name": "RAMBankManufacturer", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed bank, part number assigned by the organization responsible for producing or manufacturing the physical element", "id": "RAMBankPartNumber", "name": "RAMBankPartNumber", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed bank, manufacturer-allocated number to identify the physical element", "id": "RAMBankSerialNumber", "name": "RAMBankSerialNumber", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed memory bank, speed of the physical memory, in nanoseconds", "id": "RAMBankSpeed", "name": "RAMBankSpeed", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed memory bank, configured voltage for this device, in millivolts", "id": "RAMBankVoltage", "name": "RAMBankVoltage", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "For each installed memory bank, total width, in bits, of the physical memory, including check or error correction bits", "id": "RAMBankTotalWidth", "name": "RAMBankTotalWidth", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "BIOS version installed on the device obtained from the registry", "id": "RegistryBIOSVersion", "name": "RegistryBIOSVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "BIOS version installed on the device obtained from the WMI Object 'Win32_BIOS'", "id": "ManagementBiosVersion", "name": "ManagementBiosVersion", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "BIOS release date installed on the device", "id": "BIOSDate", "name": "BIOSDate", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-HardwareAndBIOSInfo.ps1", "script": ""}}}