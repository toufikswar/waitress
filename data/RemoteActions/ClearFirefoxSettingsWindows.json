{"id": "Clear_Firefox_Settings_Windows", "name": "Clear Firefox Settings Windows", "description": "Clears Firefox files according to the specified parameters. Useful for troubleshooting several browser-related issues.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 840, "inputs": [{"description": "UID of the campaign to notify the user that Firefox must be closed. Provide an empty value to avoid executing this campaign", "id": "ClearFirefoxSettingsCampaignId", "name": "ClearFirefoxSettingsCampaignId", "options": ["61c70b72-4b54-4497-bd43-f19dfe460575"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user that Firefox settings have been cleared and operation is completed. Provide an empty value to avoid executing this campaign", "id": "OperationCompletedCampaignId", "name": "OperationCompletedCampaignId", "options": ["5be2b85a-00f9-4c97-b4f5-dafcc5f359e0"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Firefox Cache folder for each existing profile. Set it to \"true\" for deletion, \"false\" otherwise", "id": "Cache", "name": "Cache", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Firefox Cookies saved on the device by websites for each existing profile. Set it to \"true\" for deletion, \"false\" otherwise", "id": "Cookies", "name": "Cookies", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Firefox User Data folder on the device. Set it to \"true\" for deletion, \"false\" otherwise", "id": "FullUserDataRemoval", "name": "FullUserDataRemoval", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "List of cleared settings in Firefox, based on the input parameters set to true", "id": "FirefoxSettingsCleared", "name": "FirefoxSettingsCleared", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Clear-FirefoxSettings.ps1", "script": ""}}}