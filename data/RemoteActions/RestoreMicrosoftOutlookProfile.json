{"id": "Restore_Microsoft_Outlook_Profile_windows", "name": "Restore Microsoft Outlook Profile", "description": ". Removes the Microsoft Outlook profile and guides the user through the profile recreation process and account setup with the use of campaigns. \n\n'''''Warning:''' This Remote Action uses COM objects and sometimes they don't work as expected under certain configurations.  This Remote Action deletes Microsoft Outlook current active profile from the targeted device.  In consequence, the email account(s) connected to that profile will be also removed", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 1200, "inputs": [{"description": "Campaign to be shown to the user when closing Microsoft Outlook is needed", "id": "OpenOrCloseOutlookCampaignId", "name": "OpenOrCloseOutlookCampaignId", "options": ["bf2af02b-7635-42f7-b473-28d7b473b83d"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Campaign to be shown to the user when they need to select a profile, and the steps involved to add the email account", "id": "ConfigureProfileCampaignId", "name": "ConfigureProfileCampaignId", "options": ["71ccd464-3e72-41f7-af3f-099e047bb585"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Campaign to be shown to the user when the Microsoft Outlook profile restoration operations concluded (either successfully or not)", "id": "OperationsFinishedCampaignId", "name": "OperationsFinishedCampaignId", "options": ["8050ee8a-1fb1-4b6f-8dff-27c1f2592345"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [], "scriptWindows": {"name": "Restore-OutlookProfile.ps1", "script": ""}}}