{"id": "Get_Wi_Fi_Signal_Strength_Nexthink_IT_windows", "name": "Get Wi-Fi Signal Strength Nexthink IT", "description": "Informs users who are not connected to a corporate network and have a connection strength lower than the threshold specified that their connection is not good for optimal work. In addition gets feedback on the usefulness of the campaign.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [{"description": "Comma-separated list of SSIDs which are defined as corporate. It can be empty", "id": "CorporateNetworks", "name": "CorporateNetworks", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Minimum signal quality percentage to consider the current wireless network as good (0 to 100)", "id": "AcceptableSignalQuality", "name": "AcceptableSignalQuality", "options": ["80"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Minimum signal quality percentage to consider nearby networks to be competing with the current wireless network (0 to 100)", "id": "NearbyNetworksAcceptableSignalQuality", "name": "NearbyNetworksAcceptableSignalQuality", "options": ["80"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum signal percentage difference between the current wireless network and the available networks to consider them as competing (0 to 100)", "id": "NearbyNetworksMaximumSignalDifference", "name": "NearbyNetworksMaximumSignalDifference", "options": ["80"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of times (1 to 200) the signal has to be under the acceptable threshold during current day to notify the user via a campaign", "id": "AlertUserAfterBadSignals", "name": "AlertUserAfterBadSignals", "options": ["3"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Campaign to show to recommend to get closer to the router. Use an empty GUID (00000000-0000-0000-0000-000000000000) to avoid campaign", "id": "CampaignId", "name": "CampaignId", "options": ["dc147ed6-05b8-4869-a058-b20c20acefe2"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "If the device is connected to a wireless network categorized as corporate", "id": "ConnectedToCorporateWiFi", "name": "ConnectedToCorporateWiFi", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Signal quality percentage as presented by Windows", "id": "WiFiSignalQuality", "name": "WiFiSignalQuality", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Wi-Fi signal quality average during the current day", "id": "WiFiSignalQualityAverage", "name": "WiFiSignalQualityAverage", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Signal strength in dBm", "id": "WiFiStrengthInDbm", "name": "WiFiStrengthInDbm", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of times the Wi-Fi signal quality was below the acceptable signal threshold during the current day", "id": "BadSignalCount", "name": "BadSignalCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Percentage of time the Wi-Fi signal quality was below the acceptable signal threshold during the current day", "id": "BadSignalPercentage", "name": "BadSignalPercentage", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Speed of the connected wireless network in Mbps (Megabits per second)", "id": "WiFiSpeed", "name": "WiFiSpeed", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Radio type used by the device's adapter connected to the active wireless network", "id": "WiFiRadioType", "name": "WiFiRadioType", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Channel used by the active wireless network", "id": "WiFiChannel", "name": "WiFiChannel", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "If there is noise caused by competing networks using the same channel as the active wireless network", "id": "CoChannelCongestion", "name": "CoChannelCongestion", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Details of the co-channel competing networks if there are any. The list is in CSV format", "id": "CoChannelsList", "name": "CoChannelsList", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "If there is noise caused by competing networks using adjacent channels with respect to the active wireless network", "id": "AdjacentChannelsCongestion", "name": "AdjacentChannelsCongestion", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Details of the adjacent competing networks if there are any. The list is in CSV format", "id": "AdjacentChannelsList", "name": "AdjacentChannelsList", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}, {"description": "If the user answered to the campaign affirmatively", "id": "UserConsideredTipAsUseful", "name": "UserConsideredTipAsUseful", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WiFiSignalStrengthNexthinkIT.ps1", "script": ""}}}