{"id": "Set_Internet_Explorer_Plugins_windows", "name": "Set Internet Explorer Plugins", "description": "Enables or disables Internet Explorer plugins by editing Group Policies. The script is designed for Windows 10 and 7, and Internet Explorer 11.", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Campaign Id to invoke when Internet Explorer is needed to be closed", "id": "CampaignId", "name": "CampaignId", "options": ["6f86944f-e9f3-45f1-af57-d7a464237884"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Plugin name, or a comma-separated list of plugins names", "id": "PluginsNames", "name": "PluginsNames", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Status, or comma-separated list of status, to apply to the plugin. Values expected enabled / disabled", "id": "Status", "name": "Status", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Internet Explorer plugins configured and their status", "id": "PluginsStatus", "name": "PluginsStatus", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Set-InternetExplorerPlugins.ps1", "script": ""}}}