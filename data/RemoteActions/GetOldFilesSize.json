{"id": "Get_Old_Files_Size_windows", "name": "Get Old Files Size", "description": "Provides total size of files older and newer than the number of days passed since Remote Action execution date.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "Full path of the folder to measure. Examples of valid paths are '%HOMEPATH%/Documents', '$env:USERPROFILE/Downloads/' or '%HOMEDRIVE%$env:Domain\\%USERNAME%'", "id": "Path", "name": "Path", "options": ["%HOMEPATH%"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Number of days in the past to consider until Remote Action execution date, for the files to be recent or old", "id": "ThresholdInDays", "name": "ThresholdInDays", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Total size of files in the given path, older than the Remote Action execution date minus the number of days provided as threshold", "id": "OldFilesSize", "name": "OldFilesSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Total size of files in the given path, newer than the Remote Action execution date minus the number of days provided as threshold", "id": "RecentlyModifiedFilesSize", "name": "RecentlyModifiedFilesSize", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-OldFilesSize.ps1", "script": ""}}}