{"id": "Get_Download_Speed_windows", "name": "Get Download Speed", "description": "Retrieves the download speed of the user from a corporate network folder and a business URL.\nPlease read the further information below for more details.\n\n'''''Warning:''' This Remote Action starts simultaneous downloads on all targeted devices. Please ensure that the available network capacity is appropriate for the number of targeted devices.''", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 1200, "inputs": [{"description": "Maximum random delay set to avoid network overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["600"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Path to a file located in a corporate network's shared location. Eg. \\\\\\\\server\\\\SharedFolder\\\\file.txt. IMPORTANT - Do not use a large file or this could flood your network. Provide empty value to skip this test", "id": "BusinessServiceUNC", "name": "BusinessServiceUNC", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "URL to a file located in a corporate WebPage. IMPORTANT - Do not use a large file or this could flood your network. Provide empty value to skip this test", "id": "BusinessServiceURL", "name": "BusinessServiceURL", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Speed of the connection between the device and the network drive introduced as an input", "id": "DownloadSpeedUNC", "name": "DownloadSpeedUNC", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Speed of the connection between the device and the URL introduced as an input", "id": "DownloadSpeedURL", "name": "DownloadSpeedURL", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-DownloadSpeed.ps1", "script": ""}}}