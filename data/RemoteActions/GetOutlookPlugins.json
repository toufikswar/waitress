{"id": "Get_Outlook_Plugins_windows", "name": "Get Outlook Plugins", "description": "Retrieves the installed Microsoft Office Outlook COM Add-ins sorted by status and name.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 120, "inputs": [], "outputs": [{"description": "Number of Microsoft Outlook Add-ins", "id": "OutlookPluginsCount", "name": "OutlookPluginsCount", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "List of Microsoft Outlook Add-ins sorted by status and name. It displays the name, version and status of each Add-in", "id": "OutlookPluginsInfo", "name": "OutlookPluginsInfo", "type": "list_of_strings", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-OutlookPlugins.ps1", "script": ""}}}