{"id": "Get_Windows_Disk_Configuration_windows", "name": "Get Windows Disk Configuration", "description": "Gets physical disk details where the drive is located at (identified by its assigned letter). This remote action also gets configuration status of disk-consuming features such as SuperFetch, Indexing, Hibernate and Drive Optimization (a.k.a. Disk Defragmentation).", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": false, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 120, "inputs": [{"description": "Drive letter which you want drive and disk information from. It must be a single letter from A to Z (English alphabet)", "id": "DriveLetter", "name": "DriveLetter", "options": ["C"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Type of physical disk where the drive is located. It can be 'HDD', 'SSD' ,'SCM' or 'Unspecified'", "id": "DiskType", "name": "DiskType", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Bus type of the physical disk where the drive is located", "id": "BusType", "name": "BusType", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Interface used by the physical disk where the drive is located", "id": "InterfaceUsed", "name": "InterfaceUsed", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicated whether the current drive has Indexing feature enabled or not", "id": "DriveIndexingEnabled", "name": "DriveIndexingEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether Windows default 'ScheduledDefrag' is enabled or not (depending on device configuration, it might not affect all drive letters, including the one provided as input parameter)", "id": "DiskDefragEnabled", "name": "DiskDefragEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether hibernate feature is enabled or not in the system", "id": "HibernateEnabled", "name": "HibernateEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Indicates whether SuperFetch feature is enabled or not in the system", "id": "SuperFetchEnabled", "name": "SuperFetchEnabled", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-WindowsDiskConfiguration.ps1", "script": ""}}}