{"id": "Disk_Cleanup_windows", "name": "Disk Cleanup", "description": "An assisted-help campaign is triggered to perform a light (recycle bin) or a deep (recycle bin and user temporary folder) clean.\nIn order to run a silent execution, campaign can be skipped by providing an empty GUID as input DiskCleanupCampaignId. In such case, CleanupLevel determines how cleanup will be processed.\n\n'''''Warning:''' This Remote Action permanently deletes user temporary files and recycle bin content from all targeted devices.''", "purpose": ["REMEDIATION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "UID of the campaign to allow the user select which cleanup process will be done. Provide an empty GUID to avoid executing this campaign", "id": "DiskCleanupCampaignId", "name": "DiskCleanupCampaignId", "options": ["d92c175d-e1bd-42c7-a5a6-f12138b107e1"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "UID of the campaign to notify the user about the finish of the cleanup process. Provide an empty GUID to avoid executing this campaign", "id": "CleanupCompletedCampaignId", "name": "CleanupCompletedCampaignId", "options": ["8eeb54d7-431a-4b68-86ec-2c954afb8c40"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Files modified less recently than this threshold will be deleted. Provide number of days", "id": "RemoveFilesNotModifiedInDays", "name": "RemoveFilesNotModifiedInDays", "options": ["7"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Cleanup level to support Chatbot solution. Relevant only in case empty guid is provided in DiskCleanupCampaignId parameter. Accepted values are (Light/Deep), by default Light is applied", "id": "CleanupLevel", "name": "CleanupLevel", "options": ["Light"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Space freed", "id": "CleanupSpace", "name": "CleanupSpace", "type": "real", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Invoke-DiskCleanup.ps1", "script": ""}}}