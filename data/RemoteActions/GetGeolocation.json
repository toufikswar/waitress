{"id": "Get_Geolocation_windows", "name": "Get Geolocation", "description": "Retrieves the device geolocation (city, region, country) by public IP and the Internet Service Provider (ISP).", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": false}, "scriptInfo": {"runAs": "INTERACTIVE_USER", "timeoutSeconds": 720, "inputs": [{"description": "API key to be used for the external geolocation service", "id": "APIKey", "name": "APIKey", "options": ["''"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "HTTPS enabled. Valid values are true/false", "id": "EnableHTTPS", "name": "EnableHTTPS", "options": ["False"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}, {"description": "Maximum random delay set to avoid external API overload. Provide number of seconds lower than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "City where the device is located", "id": "City", "name": "City", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Region where the device is located", "id": "Region", "name": "Region", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Country where the device is located", "id": "Country", "name": "Country", "type": "string", "usedByWindows": true, "usedByMacOs": false}, {"description": "Name of the Internet Service Provider (ISP) the device is connected to", "id": "ISP", "name": "ISP", "type": "string", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Get-Geolocation.ps1", "script": ""}}}