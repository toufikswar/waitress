{"id": "Invoke_Network_Assessment_Tool_windows", "name": "Invoke Network Assessment Tool", "description": "Using Microsoft Teams or Skype for Business Network Assessment Tool connects to nearby Microsoft node to test voice call quality (round trip time, jitter, packet loss rate, packet reorder ratio).\nResults are calculated based on 90 percentile of values per metric.\nTool is applicable for quality test of Microsoft Skype for Business and Microsoft Teams.", "purpose": ["DATA_COLLECTION"], "targeting": {"apiEnabled": true, "manualEnabled": true, "manualAllowMultipleDevices": true}, "scriptInfo": {"runAs": "LOCAL_SYSTEM", "timeoutSeconds": 720, "inputs": [{"description": "Maximum random delay set to avoid overloading server hosting virtual machines. Provide number of seconds less than 600", "id": "MaximumDelayInSeconds", "name": "MaximumDelayInSeconds", "options": ["30"], "allowCustomValue": false, "usedByWindows": true, "usedByMacOs": false}], "outputs": [{"description": "Round trip time latency between device and Microsoft server node", "id": "RTTLatency", "name": "RTTLatency", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Average time difference of packet arrival", "id": "Jitter", "name": "Jitter", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Fraction of the total transmitted packets that did not arrive at the receiver", "id": "PacketLossRate", "name": "PacketLossRate", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Ratio of the total transmitted packets that did not arrive in correct order at the receiver", "id": "PacketReorderRatio", "name": "PacketReorderRatio", "type": "real", "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft quality test result of packet loss during test call", "id": "PacketLossRateTestPassed", "name": "PacketLossRateTestPassed", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft quality test result of packet round trip time during test call", "id": "RTTLatencyTestPassed", "name": "RTTLatencyTestPassed", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft quality test result of average jitter during test call", "id": "JitterTestPassed", "name": "JitterTestPassed", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}, {"description": "Microsoft quality test result of average jitter during test call", "id": "PacketReorderRatioTestPassed", "name": "PacketReorderRatioTestPassed", "type": "uint32", "usedByWindows": true, "usedByMacOs": false}], "scriptWindows": {"name": "Invoke-NetworkAssesmentTool.ps1", "script": ""}}}